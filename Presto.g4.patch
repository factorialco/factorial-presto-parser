15c15
< grammar SqlBase;
---
> grammar Presto;
21,89d20
< singleStatement
<     : statement EOF
<     ;
< 
< singleExpression
<     : expression EOF
<     ;
< 
< statement
<     : query                                                            #statementDefault
<     | USE schema=identifier                                            #use
<     | USE catalog=identifier '.' schema=identifier                     #use
<     | CREATE SCHEMA (IF NOT EXISTS)? qualifiedName
<         (WITH tableProperties)?                                        #createSchema
<     | DROP SCHEMA (IF EXISTS)? qualifiedName (CASCADE | RESTRICT)?     #dropSchema
<     | ALTER SCHEMA qualifiedName RENAME TO identifier                  #renameSchema
<     | CREATE TABLE (IF NOT EXISTS)? qualifiedName
<         (WITH tableProperties)? AS query
<         (WITH (NO)? DATA)?                                             #createTableAsSelect
<     | CREATE TABLE (IF NOT EXISTS)? qualifiedName
<         '(' tableElement (',' tableElement)* ')'
<         (WITH tableProperties)?                                        #createTable
<     | DROP TABLE (IF EXISTS)? qualifiedName                            #dropTable
<     | INSERT INTO qualifiedName columnAliases? query                   #insertInto
<     | DELETE FROM qualifiedName (WHERE booleanExpression)?             #delete
<     | ALTER TABLE from=qualifiedName RENAME TO to=qualifiedName        #renameTable
<     | ALTER TABLE tableName=qualifiedName
<         RENAME COLUMN from=identifier TO to=identifier                 #renameColumn
<     | ALTER TABLE tableName=qualifiedName
<         ADD COLUMN column=columnDefinition                             #addColumn
<     | CREATE (OR REPLACE)? VIEW qualifiedName AS query                 #createView
<     | DROP VIEW (IF EXISTS)? qualifiedName                             #dropView
<     | CALL qualifiedName '(' (callArgument (',' callArgument)*)? ')'   #call
<     | GRANT
<         (privilege (',' privilege)* | ALL PRIVILEGES)
<         ON TABLE? qualifiedName TO grantee=identifier
<         (WITH GRANT OPTION)?                                           #grant
<     | REVOKE
<         (GRANT OPTION FOR)?
<         (privilege (',' privilege)* | ALL PRIVILEGES)
<         ON TABLE? qualifiedName FROM grantee=identifier                #revoke
<     | EXPLAIN ANALYZE?
<         ('(' explainOption (',' explainOption)* ')')? statement        #explain
<     | SHOW CREATE TABLE qualifiedName                                  #showCreateTable
<     | SHOW CREATE VIEW qualifiedName                                   #showCreateView
<     | SHOW TABLES ((FROM | IN) qualifiedName)? (LIKE pattern=STRING)?  #showTables
<     | SHOW SCHEMAS ((FROM | IN) identifier)? (LIKE pattern=STRING)?    #showSchemas
<     | SHOW CATALOGS (LIKE pattern=STRING)?                             #showCatalogs
<     | SHOW COLUMNS (FROM | IN) qualifiedName                           #showColumns
<     | DESCRIBE qualifiedName                                           #showColumns
<     | DESC qualifiedName                                               #showColumns
<     | SHOW FUNCTIONS                                                   #showFunctions
<     | SHOW SESSION                                                     #showSession
<     | SET SESSION qualifiedName EQ expression                          #setSession
<     | RESET SESSION qualifiedName                                      #resetSession
<     | START TRANSACTION (transactionMode (',' transactionMode)*)?      #startTransaction
<     | COMMIT WORK?                                                     #commit
<     | ROLLBACK WORK?                                                   #rollback
<     | SHOW PARTITIONS (FROM | IN) qualifiedName
<         (WHERE booleanExpression)?
<         (ORDER BY sortItem (',' sortItem)*)?
<         (LIMIT limit=(INTEGER_VALUE | ALL))?                           #showPartitions
<     | PREPARE identifier FROM statement                                #prepare
<     | DEALLOCATE PREPARE identifier                                    #deallocate
<     | EXECUTE identifier (USING expression (',' expression)*)?         #execute
<     | DESCRIBE INPUT identifier                                        #describeInput
<     | DESCRIBE OUTPUT identifier                                       #describeOutput
<     ;
< 
91c22
<     :  with? queryNoWith
---
>     :  with? queryNoWith EOF
249c180
<     : valueExpression predicate[$valueExpression.ctx]?
---
>     : valueExpression predicate?
252c183
< predicate[ParserRuleContext value]
---
> predicate
259c190
<     | IS NOT? NULL                                                        #nullPredicate
---
>     | IS NOT? NULLTOKEN                                                   #nullPredicate
273c204
<     : NULL                                                                                #nullLiteral
---
>     : NULLTOKEN                                                                           #nullLiteral
493c424
< NULL: 'NULL';
---
> NULLTOKEN: 'NULL';
