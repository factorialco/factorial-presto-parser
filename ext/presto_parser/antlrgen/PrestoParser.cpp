
// Generated from ./Presto.g4 by ANTLR 4.10.1


#include "PrestoListener.h"
#include "PrestoVisitor.h"

#include "PrestoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct PrestoParserStaticData final {
  PrestoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PrestoParserStaticData(const PrestoParserStaticData&) = delete;
  PrestoParserStaticData(PrestoParserStaticData&&) = delete;
  PrestoParserStaticData& operator=(const PrestoParserStaticData&) = delete;
  PrestoParserStaticData& operator=(PrestoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag prestoParserOnceFlag;
PrestoParserStaticData *prestoParserStaticData = nullptr;

void prestoParserInitialize() {
  assert(prestoParserStaticData == nullptr);
  auto staticData = std::make_unique<PrestoParserStaticData>(
    std::vector<std::string>{
      "singleQuery", "query", "with", "tableElement", "columnDefinition", 
      "likeClause", "tableProperties", "tableProperty", "queryNoWith", "queryTerm", 
      "queryPrimary", "sortItem", "querySpecification", "groupBy", "groupingElement", 
      "groupingExpressions", "groupingSet", "namedQuery", "setQuantifier", 
      "selectItem", "relation", "joinType", "joinCriteria", "sampledRelation", 
      "sampleType", "aliasedRelation", "columnAliases", "relationPrimary", 
      "expression", "booleanExpression", "predicated", "predicate", "valueExpression", 
      "primaryExpression", "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
      "booleanValue", "interval", "intervalField", "type", "typeParameter", 
      "baseType", "whenClause", "filter", "over", "windowFrame", "frameBound", 
      "explainOption", "transactionMode", "levelOfIsolation", "callArgument", 
      "privilege", "qualifiedName", "identifier", "quotedIdentifier", "number", 
      "nonReserved", "normalForm"
    },
    std::vector<std::string>{
      "", "','", "'('", "')'", "'.'", "'\\u003F'", "'->'", "'['", "']'", 
      "'=>'", "'SELECT'", "'FROM'", "'ADD'", "'AS'", "'ALL'", "'SOME'", 
      "'ANY'", "'DISTINCT'", "'WHERE'", "'GROUP'", "'BY'", "'GROUPING'", 
      "'SETS'", "'CUBE'", "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", 
      "'AT'", "'OR'", "'AND'", "'IN'", "'NOT'", "'NO'", "'EXISTS'", "'BETWEEN'", 
      "'LIKE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", "'NULLS'", "'FIRST'", 
      "'LAST'", "'ESCAPE'", "'ASC'", "'DESC'", "'SUBSTRING'", "'POSITION'", 
      "'FOR'", "'TINYINT'", "'SMALLINT'", "'INTEGER'", "'DATE'", "'TIME'", 
      "'TIMESTAMP'", "'INTERVAL'", "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", 
      "'MINUTE'", "'SECOND'", "'ZONE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
      "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'EXTRACT'", 
      "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'CROSS'", 
      "'OUTER'", "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'NATURAL'", 
      "'USING'", "'ON'", "'FILTER'", "'OVER'", "'PARTITION'", "'RANGE'", 
      "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", 
      "'ROW'", "'WITH'", "'RECURSIVE'", "'VALUES'", "'CREATE'", "'SCHEMA'", 
      "'TABLE'", "'COMMENT'", "'VIEW'", "'REPLACE'", "'INSERT'", "'DELETE'", 
      "'INTO'", "'CONSTRAINT'", "'DESCRIBE'", "'GRANT'", "'REVOKE'", "'PRIVILEGES'", 
      "'PUBLIC'", "'OPTION'", "'EXPLAIN'", "'ANALYZE'", "'FORMAT'", "'TYPE'", 
      "'TEXT'", "'GRAPHVIZ'", "'LOGICAL'", "'DISTRIBUTED'", "'VALIDATE'", 
      "'CAST'", "'TRY_CAST'", "'SHOW'", "'TABLES'", "'SCHEMAS'", "'CATALOGS'", 
      "'COLUMNS'", "'COLUMN'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", 
      "'UNION'", "'EXCEPT'", "'INTERSECT'", "'TO'", "'SYSTEM'", "'BERNOULLI'", 
      "'POISSONIZED'", "'TABLESAMPLE'", "'ALTER'", "'RENAME'", "'UNNEST'", 
      "'ORDINALITY'", "'ARRAY'", "'MAP'", "'SET'", "'RESET'", "'SESSION'", 
      "'DATA'", "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", "'WORK'", 
      "'ISOLATION'", "'LEVEL'", "'SERIALIZABLE'", "'REPEATABLE'", "'COMMITTED'", 
      "'UNCOMMITTED'", "'READ'", "'WRITE'", "'ONLY'", "'CALL'", "'PREPARE'", 
      "'DEALLOCATE'", "'EXECUTE'", "'INPUT'", "'OUTPUT'", "'CASCADE'", "'RESTRICT'", 
      "'INCLUDING'", "'EXCLUDING'", "'PROPERTIES'", "'NORMALIZE'", "'NFD'", 
      "'NFC'", "'NFKD'", "'NFKC'", "'IF'", "'NULLIF'", "'COALESCE'", "'='", 
      "", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", 
      "'||'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "SELECT", "FROM", "ADD", "AS", 
      "ALL", "SOME", "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", "AT", "OR", 
      "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "IS", "NULLTOKEN", 
      "TRUE", "FALSE", "NULLS", "FIRST", "LAST", "ESCAPE", "ASC", "DESC", 
      "SUBSTRING", "POSITION", "FOR", "TINYINT", "SMALLINT", "INTEGER", 
      "DATE", "TIME", "TIMESTAMP", "INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", 
      "MINUTE", "SECOND", "ZONE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
      "LOCALTIME", "LOCALTIMESTAMP", "EXTRACT", "CASE", "WHEN", "THEN", 
      "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "RIGHT", 
      "FULL", "NATURAL", "USING", "ON", "FILTER", "OVER", "PARTITION", "RANGE", 
      "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", "ROW", "WITH", 
      "RECURSIVE", "VALUES", "CREATE", "SCHEMA", "TABLE", "COMMENT", "VIEW", 
      "REPLACE", "INSERT", "DELETE", "INTO", "CONSTRAINT", "DESCRIBE", "GRANT", 
      "REVOKE", "PRIVILEGES", "PUBLIC", "OPTION", "EXPLAIN", "ANALYZE", 
      "FORMAT", "TYPE", "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "VALIDATE", 
      "CAST", "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", "CATALOGS", "COLUMNS", 
      "COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT", 
      "INTERSECT", "TO", "SYSTEM", "BERNOULLI", "POISSONIZED", "TABLESAMPLE", 
      "ALTER", "RENAME", "UNNEST", "ORDINALITY", "ARRAY", "MAP", "SET", 
      "RESET", "SESSION", "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", 
      "WORK", "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", "COMMITTED", 
      "UNCOMMITTED", "READ", "WRITE", "ONLY", "CALL", "PREPARE", "DEALLOCATE", 
      "EXECUTE", "INPUT", "OUTPUT", "CASCADE", "RESTRICT", "INCLUDING", 
      "EXCLUDING", "PROPERTIES", "NORMALIZE", "NFD", "NFC", "NFKD", "NFKC", 
      "IF", "NULLIF", "COALESCE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
      "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", 
      "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", 
      "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
      "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", 
      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,213,1138,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,1,0,1,0,1,0,1,1,3,1,123,8,1,1,1,1,1,1,2,1,2,
  	3,2,129,8,2,1,2,1,2,1,2,5,2,134,8,2,10,2,12,2,137,9,2,1,3,1,3,3,3,141,
  	8,3,1,4,1,4,1,4,1,4,3,4,147,8,4,1,5,1,5,1,5,1,5,3,5,153,8,5,1,6,1,6,1,
  	6,1,6,5,6,159,8,6,10,6,12,6,162,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,
  	8,1,8,1,8,1,8,5,8,176,8,8,10,8,12,8,179,9,8,3,8,181,8,8,1,8,1,8,3,8,185,
  	8,8,1,9,1,9,1,9,1,9,1,9,1,9,3,9,193,8,9,1,9,1,9,1,9,1,9,3,9,199,8,9,1,
  	9,5,9,202,8,9,10,9,12,9,205,9,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,
  	10,214,8,10,10,10,12,10,217,9,10,1,10,1,10,1,10,1,10,3,10,223,8,10,1,
  	11,1,11,3,11,227,8,11,1,11,1,11,3,11,231,8,11,1,12,1,12,3,12,235,8,12,
  	1,12,1,12,1,12,5,12,240,8,12,10,12,12,12,243,9,12,1,12,1,12,1,12,1,12,
  	5,12,249,8,12,10,12,12,12,252,9,12,3,12,254,8,12,1,12,1,12,3,12,258,8,
  	12,1,12,1,12,1,12,3,12,263,8,12,1,12,1,12,3,12,267,8,12,1,13,3,13,270,
  	8,13,1,13,1,13,1,13,5,13,275,8,13,10,13,12,13,278,9,13,1,14,1,14,1,14,
  	1,14,1,14,1,14,5,14,286,8,14,10,14,12,14,289,9,14,3,14,291,8,14,1,14,
  	1,14,1,14,1,14,1,14,1,14,5,14,299,8,14,10,14,12,14,302,9,14,3,14,304,
  	8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,313,8,14,10,14,12,14,316,
  	9,14,1,14,1,14,3,14,320,8,14,1,15,1,15,1,15,1,15,5,15,326,8,15,10,15,
  	12,15,329,9,15,3,15,331,8,15,1,15,1,15,3,15,335,8,15,1,16,1,16,1,16,1,
  	16,5,16,341,8,16,10,16,12,16,344,9,16,3,16,346,8,16,1,16,1,16,3,16,350,
  	8,16,1,17,1,17,3,17,354,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,
  	1,19,3,19,365,8,19,1,19,3,19,368,8,19,1,19,1,19,1,19,1,19,1,19,3,19,375,
  	8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,20,3,20,394,8,20,5,20,396,8,20,10,20,12,20,399,9,20,
  	1,21,3,21,402,8,21,1,21,1,21,3,21,406,8,21,1,21,1,21,3,21,410,8,21,1,
  	21,1,21,3,21,414,8,21,3,21,416,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
  	5,22,425,8,22,10,22,12,22,428,9,22,1,22,1,22,3,22,432,8,22,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,3,23,441,8,23,1,24,1,24,1,25,1,25,3,25,447,8,
  	25,1,25,1,25,3,25,451,8,25,3,25,453,8,25,1,26,1,26,1,26,1,26,5,26,459,
  	8,26,10,26,12,26,462,9,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
  	1,27,1,27,1,27,5,27,476,8,27,10,27,12,27,479,9,27,1,27,1,27,1,27,3,27,
  	484,8,27,1,27,1,27,1,27,1,27,3,27,490,8,27,1,28,1,28,1,29,1,29,1,29,1,
  	29,3,29,498,8,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,506,8,29,10,29,12,
  	29,509,9,29,1,30,1,30,3,30,513,8,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,3,31,525,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,533,8,
  	31,1,31,1,31,1,31,1,31,1,31,5,31,540,8,31,10,31,12,31,543,9,31,1,31,1,
  	31,1,31,3,31,548,8,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,556,8,31,1,31,
  	1,31,1,31,1,31,3,31,562,8,31,1,31,1,31,3,31,566,8,31,1,31,1,31,1,31,3,
  	31,571,8,31,1,31,1,31,1,31,3,31,576,8,31,1,32,1,32,1,32,1,32,3,32,582,
  	8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,
  	596,8,32,10,32,12,32,599,9,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,4,33,625,8,33,11,33,12,33,626,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,5,33,636,8,33,10,33,12,33,639,9,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,3,33,648,8,33,1,33,3,33,651,8,33,1,33,1,33,1,33,3,33,656,8,33,1,
  	33,1,33,1,33,5,33,661,8,33,10,33,12,33,664,9,33,3,33,666,8,33,1,33,1,
  	33,3,33,670,8,33,1,33,3,33,673,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,5,33,683,8,33,10,33,12,33,686,9,33,1,33,1,33,1,33,1,33,1,33,1,33,
  	1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,4,33,704,8,33,11,33,
  	12,33,705,1,33,1,33,3,33,710,8,33,1,33,1,33,1,33,1,33,4,33,716,8,33,11,
  	33,12,33,717,1,33,1,33,3,33,722,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,5,33,745,8,33,10,33,12,33,748,9,33,3,33,750,8,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,3,33,759,8,33,1,33,1,33,1,33,1,33,3,33,765,8,33,1,33,
  	1,33,1,33,1,33,3,33,771,8,33,1,33,1,33,1,33,1,33,3,33,777,8,33,1,33,1,
  	33,1,33,1,33,1,33,1,33,1,33,3,33,786,8,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,3,33,795,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,1,33,1,33,1,33,3,33,810,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
  	33,5,33,820,8,33,10,33,12,33,823,9,33,1,34,1,34,1,34,1,34,1,34,1,34,3,
  	34,831,8,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,3,38,841,8,38,1,38,
  	1,38,1,38,1,38,3,38,847,8,38,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,5,40,872,8,40,10,40,12,40,875,9,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,5,40,884,8,40,10,40,12,40,887,9,40,1,40,1,40,3,40,891,8,40,3,40,
  	893,8,40,1,40,1,40,5,40,897,8,40,10,40,12,40,900,9,40,1,41,1,41,3,41,
  	904,8,41,1,42,1,42,1,42,1,42,3,42,910,8,42,1,43,1,43,1,43,1,43,1,43,1,
  	44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,5,45,930,
  	8,45,10,45,12,45,933,9,45,3,45,935,8,45,1,45,1,45,1,45,1,45,1,45,5,45,
  	942,8,45,10,45,12,45,945,9,45,3,45,947,8,45,1,45,3,45,950,8,45,1,45,1,
  	45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,
  	46,1,46,1,46,3,46,970,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
  	47,3,47,981,8,47,1,48,1,48,1,48,1,48,3,48,987,8,48,1,49,1,49,1,49,1,49,
  	1,49,3,49,994,8,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1003,8,50,
  	1,51,1,51,1,51,1,51,1,51,3,51,1010,8,51,1,52,1,52,1,52,1,52,3,52,1016,
  	8,52,1,53,1,53,1,53,5,53,1021,8,53,10,53,12,53,1024,9,53,1,54,1,54,1,
  	54,1,54,1,54,3,54,1031,8,54,1,55,1,55,1,56,1,56,3,56,1037,8,56,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,1134,8,57,1,58,1,
  	58,1,58,0,6,18,40,58,64,66,80,59,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
  	28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
  	74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,
  	116,0,18,1,0,175,176,2,0,14,14,200,200,1,0,135,136,1,0,45,46,1,0,42,43,
  	2,0,14,14,17,17,1,0,139,141,1,0,192,193,1,0,194,196,1,0,186,191,1,0,14,
  	16,1,0,39,40,1,0,57,62,1,0,91,92,1,0,118,119,1,0,120,122,1,0,165,166,
  	1,0,179,182,1362,0,118,1,0,0,0,2,122,1,0,0,0,4,126,1,0,0,0,6,140,1,0,
  	0,0,8,142,1,0,0,0,10,148,1,0,0,0,12,154,1,0,0,0,14,165,1,0,0,0,16,169,
  	1,0,0,0,18,186,1,0,0,0,20,222,1,0,0,0,22,224,1,0,0,0,24,232,1,0,0,0,26,
  	269,1,0,0,0,28,319,1,0,0,0,30,334,1,0,0,0,32,349,1,0,0,0,34,351,1,0,0,
  	0,36,360,1,0,0,0,38,374,1,0,0,0,40,376,1,0,0,0,42,415,1,0,0,0,44,431,
  	1,0,0,0,46,433,1,0,0,0,48,442,1,0,0,0,50,444,1,0,0,0,52,454,1,0,0,0,54,
  	489,1,0,0,0,56,491,1,0,0,0,58,497,1,0,0,0,60,510,1,0,0,0,62,575,1,0,0,
  	0,64,581,1,0,0,0,66,809,1,0,0,0,68,830,1,0,0,0,70,832,1,0,0,0,72,834,
  	1,0,0,0,74,836,1,0,0,0,76,838,1,0,0,0,78,848,1,0,0,0,80,892,1,0,0,0,82,
  	903,1,0,0,0,84,909,1,0,0,0,86,911,1,0,0,0,88,916,1,0,0,0,90,922,1,0,0,
  	0,92,969,1,0,0,0,94,980,1,0,0,0,96,986,1,0,0,0,98,993,1,0,0,0,100,1002,
  	1,0,0,0,102,1009,1,0,0,0,104,1015,1,0,0,0,106,1017,1,0,0,0,108,1030,1,
  	0,0,0,110,1032,1,0,0,0,112,1036,1,0,0,0,114,1133,1,0,0,0,116,1135,1,0,
  	0,0,118,119,3,2,1,0,119,120,5,0,0,1,120,1,1,0,0,0,121,123,3,4,2,0,122,
  	121,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,125,3,16,8,0,125,3,1,
  	0,0,0,126,128,5,95,0,0,127,129,5,96,0,0,128,127,1,0,0,0,128,129,1,0,0,
  	0,129,130,1,0,0,0,130,135,3,34,17,0,131,132,5,1,0,0,132,134,3,34,17,0,
  	133,131,1,0,0,0,134,137,1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,5,
  	1,0,0,0,137,135,1,0,0,0,138,141,3,8,4,0,139,141,3,10,5,0,140,138,1,0,
  	0,0,140,139,1,0,0,0,141,7,1,0,0,0,142,143,3,108,54,0,143,146,3,80,40,
  	0,144,145,5,101,0,0,145,147,5,198,0,0,146,144,1,0,0,0,146,147,1,0,0,0,
  	147,9,1,0,0,0,148,149,5,36,0,0,149,152,3,106,53,0,150,151,7,0,0,0,151,
  	153,5,177,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,11,1,0,0,0,154,155,
  	5,2,0,0,155,160,3,14,7,0,156,157,5,1,0,0,157,159,3,14,7,0,158,156,1,0,
  	0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,0,0,162,
  	160,1,0,0,0,163,164,5,3,0,0,164,13,1,0,0,0,165,166,3,108,54,0,166,167,
  	5,186,0,0,167,168,3,56,28,0,168,15,1,0,0,0,169,180,3,18,9,0,170,171,5,
  	25,0,0,171,172,5,20,0,0,172,177,3,22,11,0,173,174,5,1,0,0,174,176,3,22,
  	11,0,175,173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,
  	178,181,1,0,0,0,179,177,1,0,0,0,180,170,1,0,0,0,180,181,1,0,0,0,181,184,
  	1,0,0,0,182,183,5,27,0,0,183,185,7,1,0,0,184,182,1,0,0,0,184,185,1,0,
  	0,0,185,17,1,0,0,0,186,187,6,9,-1,0,187,188,3,20,10,0,188,203,1,0,0,0,
  	189,190,10,2,0,0,190,192,5,137,0,0,191,193,3,36,18,0,192,191,1,0,0,0,
  	192,193,1,0,0,0,193,194,1,0,0,0,194,202,3,18,9,3,195,196,10,1,0,0,196,
  	198,7,2,0,0,197,199,3,36,18,0,198,197,1,0,0,0,198,199,1,0,0,0,199,200,
  	1,0,0,0,200,202,3,18,9,2,201,189,1,0,0,0,201,195,1,0,0,0,202,205,1,0,
  	0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,19,1,0,0,0,205,203,1,0,0,0,206,
  	223,3,24,12,0,207,208,5,100,0,0,208,223,3,106,53,0,209,210,5,97,0,0,210,
  	215,3,56,28,0,211,212,5,1,0,0,212,214,3,56,28,0,213,211,1,0,0,0,214,217,
  	1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,223,1,0,0,0,217,215,1,0,0,
  	0,218,219,5,2,0,0,219,220,3,16,8,0,220,221,5,3,0,0,221,223,1,0,0,0,222,
  	206,1,0,0,0,222,207,1,0,0,0,222,209,1,0,0,0,222,218,1,0,0,0,223,21,1,
  	0,0,0,224,226,3,56,28,0,225,227,7,3,0,0,226,225,1,0,0,0,226,227,1,0,0,
  	0,227,230,1,0,0,0,228,229,5,41,0,0,229,231,7,4,0,0,230,228,1,0,0,0,230,
  	231,1,0,0,0,231,23,1,0,0,0,232,234,5,10,0,0,233,235,3,36,18,0,234,233,
  	1,0,0,0,234,235,1,0,0,0,235,236,1,0,0,0,236,241,3,38,19,0,237,238,5,1,
  	0,0,238,240,3,38,19,0,239,237,1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,
  	241,242,1,0,0,0,242,253,1,0,0,0,243,241,1,0,0,0,244,245,5,11,0,0,245,
  	250,3,40,20,0,246,247,5,1,0,0,247,249,3,40,20,0,248,246,1,0,0,0,249,252,
  	1,0,0,0,250,248,1,0,0,0,250,251,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,
  	0,253,244,1,0,0,0,253,254,1,0,0,0,254,257,1,0,0,0,255,256,5,18,0,0,256,
  	258,3,58,29,0,257,255,1,0,0,0,257,258,1,0,0,0,258,262,1,0,0,0,259,260,
  	5,19,0,0,260,261,5,20,0,0,261,263,3,26,13,0,262,259,1,0,0,0,262,263,1,
  	0,0,0,263,266,1,0,0,0,264,265,5,26,0,0,265,267,3,58,29,0,266,264,1,0,
  	0,0,266,267,1,0,0,0,267,25,1,0,0,0,268,270,3,36,18,0,269,268,1,0,0,0,
  	269,270,1,0,0,0,270,271,1,0,0,0,271,276,3,28,14,0,272,273,5,1,0,0,273,
  	275,3,28,14,0,274,272,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,
  	1,0,0,0,277,27,1,0,0,0,278,276,1,0,0,0,279,320,3,30,15,0,280,281,5,24,
  	0,0,281,290,5,2,0,0,282,287,3,106,53,0,283,284,5,1,0,0,284,286,3,106,
  	53,0,285,283,1,0,0,0,286,289,1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,
  	288,291,1,0,0,0,289,287,1,0,0,0,290,282,1,0,0,0,290,291,1,0,0,0,291,292,
  	1,0,0,0,292,320,5,3,0,0,293,294,5,23,0,0,294,303,5,2,0,0,295,300,3,106,
  	53,0,296,297,5,1,0,0,297,299,3,106,53,0,298,296,1,0,0,0,299,302,1,0,0,
  	0,300,298,1,0,0,0,300,301,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,303,
  	295,1,0,0,0,303,304,1,0,0,0,304,305,1,0,0,0,305,320,5,3,0,0,306,307,5,
  	21,0,0,307,308,5,22,0,0,308,309,5,2,0,0,309,314,3,32,16,0,310,311,5,1,
  	0,0,311,313,3,32,16,0,312,310,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,
  	314,315,1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,5,3,0,0,318,320,
  	1,0,0,0,319,279,1,0,0,0,319,280,1,0,0,0,319,293,1,0,0,0,319,306,1,0,0,
  	0,320,29,1,0,0,0,321,330,5,2,0,0,322,327,3,56,28,0,323,324,5,1,0,0,324,
  	326,3,56,28,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,
  	1,0,0,0,328,331,1,0,0,0,329,327,1,0,0,0,330,322,1,0,0,0,330,331,1,0,0,
  	0,331,332,1,0,0,0,332,335,5,3,0,0,333,335,3,56,28,0,334,321,1,0,0,0,334,
  	333,1,0,0,0,335,31,1,0,0,0,336,345,5,2,0,0,337,342,3,106,53,0,338,339,
  	5,1,0,0,339,341,3,106,53,0,340,338,1,0,0,0,341,344,1,0,0,0,342,340,1,
  	0,0,0,342,343,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,345,337,1,0,0,0,
  	345,346,1,0,0,0,346,347,1,0,0,0,347,350,5,3,0,0,348,350,3,106,53,0,349,
  	336,1,0,0,0,349,348,1,0,0,0,350,33,1,0,0,0,351,353,3,108,54,0,352,354,
  	3,52,26,0,353,352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,5,13,
  	0,0,356,357,5,2,0,0,357,358,3,2,1,0,358,359,5,3,0,0,359,35,1,0,0,0,360,
  	361,7,5,0,0,361,37,1,0,0,0,362,367,3,56,28,0,363,365,5,13,0,0,364,363,
  	1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,368,3,108,54,0,367,364,1,
  	0,0,0,367,368,1,0,0,0,368,375,1,0,0,0,369,370,3,106,53,0,370,371,5,4,
  	0,0,371,372,5,194,0,0,372,375,1,0,0,0,373,375,5,194,0,0,374,362,1,0,0,
  	0,374,369,1,0,0,0,374,373,1,0,0,0,375,39,1,0,0,0,376,377,6,20,-1,0,377,
  	378,3,46,23,0,378,397,1,0,0,0,379,393,10,2,0,0,380,381,5,76,0,0,381,382,
  	5,75,0,0,382,394,3,46,23,0,383,384,3,42,21,0,384,385,5,75,0,0,385,386,
  	3,40,20,0,386,387,3,44,22,0,387,394,1,0,0,0,388,389,5,82,0,0,389,390,
  	3,42,21,0,390,391,5,75,0,0,391,392,3,46,23,0,392,394,1,0,0,0,393,380,
  	1,0,0,0,393,383,1,0,0,0,393,388,1,0,0,0,394,396,1,0,0,0,395,379,1,0,0,
  	0,396,399,1,0,0,0,397,395,1,0,0,0,397,398,1,0,0,0,398,41,1,0,0,0,399,
  	397,1,0,0,0,400,402,5,78,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,416,
  	1,0,0,0,403,405,5,79,0,0,404,406,5,77,0,0,405,404,1,0,0,0,405,406,1,0,
  	0,0,406,416,1,0,0,0,407,409,5,80,0,0,408,410,5,77,0,0,409,408,1,0,0,0,
  	409,410,1,0,0,0,410,416,1,0,0,0,411,413,5,81,0,0,412,414,5,77,0,0,413,
  	412,1,0,0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,401,1,0,0,0,415,403,1,
  	0,0,0,415,407,1,0,0,0,415,411,1,0,0,0,416,43,1,0,0,0,417,418,5,84,0,0,
  	418,432,3,58,29,0,419,420,5,83,0,0,420,421,5,2,0,0,421,426,3,108,54,0,
  	422,423,5,1,0,0,423,425,3,108,54,0,424,422,1,0,0,0,425,428,1,0,0,0,426,
  	424,1,0,0,0,426,427,1,0,0,0,427,429,1,0,0,0,428,426,1,0,0,0,429,430,5,
  	3,0,0,430,432,1,0,0,0,431,417,1,0,0,0,431,419,1,0,0,0,432,45,1,0,0,0,
  	433,440,3,50,25,0,434,435,5,142,0,0,435,436,3,48,24,0,436,437,5,2,0,0,
  	437,438,3,56,28,0,438,439,5,3,0,0,439,441,1,0,0,0,440,434,1,0,0,0,440,
  	441,1,0,0,0,441,47,1,0,0,0,442,443,7,6,0,0,443,49,1,0,0,0,444,452,3,54,
  	27,0,445,447,5,13,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,
  	448,450,3,108,54,0,449,451,3,52,26,0,450,449,1,0,0,0,450,451,1,0,0,0,
  	451,453,1,0,0,0,452,446,1,0,0,0,452,453,1,0,0,0,453,51,1,0,0,0,454,455,
  	5,2,0,0,455,460,3,108,54,0,456,457,5,1,0,0,457,459,3,108,54,0,458,456,
  	1,0,0,0,459,462,1,0,0,0,460,458,1,0,0,0,460,461,1,0,0,0,461,463,1,0,0,
  	0,462,460,1,0,0,0,463,464,5,3,0,0,464,53,1,0,0,0,465,490,3,106,53,0,466,
  	467,5,2,0,0,467,468,3,2,1,0,468,469,5,3,0,0,469,490,1,0,0,0,470,471,5,
  	145,0,0,471,472,5,2,0,0,472,477,3,56,28,0,473,474,5,1,0,0,474,476,3,56,
  	28,0,475,473,1,0,0,0,476,479,1,0,0,0,477,475,1,0,0,0,477,478,1,0,0,0,
  	478,480,1,0,0,0,479,477,1,0,0,0,480,483,5,3,0,0,481,482,5,95,0,0,482,
  	484,5,146,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,490,1,0,0,0,485,486,
  	5,2,0,0,486,487,3,40,20,0,487,488,5,3,0,0,488,490,1,0,0,0,489,465,1,0,
  	0,0,489,466,1,0,0,0,489,470,1,0,0,0,489,485,1,0,0,0,490,55,1,0,0,0,491,
  	492,3,58,29,0,492,57,1,0,0,0,493,494,6,29,-1,0,494,498,3,60,30,0,495,
  	496,5,32,0,0,496,498,3,58,29,3,497,493,1,0,0,0,497,495,1,0,0,0,498,507,
  	1,0,0,0,499,500,10,2,0,0,500,501,5,30,0,0,501,506,3,58,29,3,502,503,10,
  	1,0,0,503,504,5,29,0,0,504,506,3,58,29,2,505,499,1,0,0,0,505,502,1,0,
  	0,0,506,509,1,0,0,0,507,505,1,0,0,0,507,508,1,0,0,0,508,59,1,0,0,0,509,
  	507,1,0,0,0,510,512,3,64,32,0,511,513,3,62,31,0,512,511,1,0,0,0,512,513,
  	1,0,0,0,513,61,1,0,0,0,514,515,3,70,35,0,515,516,3,64,32,0,516,576,1,
  	0,0,0,517,518,3,70,35,0,518,519,3,72,36,0,519,520,5,2,0,0,520,521,3,2,
  	1,0,521,522,5,3,0,0,522,576,1,0,0,0,523,525,5,32,0,0,524,523,1,0,0,0,
  	524,525,1,0,0,0,525,526,1,0,0,0,526,527,5,35,0,0,527,528,3,64,32,0,528,
  	529,5,30,0,0,529,530,3,64,32,0,530,576,1,0,0,0,531,533,5,32,0,0,532,531,
  	1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,535,5,31,0,0,535,536,5,2,
  	0,0,536,541,3,56,28,0,537,538,5,1,0,0,538,540,3,56,28,0,539,537,1,0,0,
  	0,540,543,1,0,0,0,541,539,1,0,0,0,541,542,1,0,0,0,542,544,1,0,0,0,543,
  	541,1,0,0,0,544,545,5,3,0,0,545,576,1,0,0,0,546,548,5,32,0,0,547,546,
  	1,0,0,0,547,548,1,0,0,0,548,549,1,0,0,0,549,550,5,31,0,0,550,551,5,2,
  	0,0,551,552,3,2,1,0,552,553,5,3,0,0,553,576,1,0,0,0,554,556,5,32,0,0,
  	555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,558,5,36,0,0,558,
  	561,3,64,32,0,559,560,5,44,0,0,560,562,3,64,32,0,561,559,1,0,0,0,561,
  	562,1,0,0,0,562,576,1,0,0,0,563,565,5,37,0,0,564,566,5,32,0,0,565,564,
  	1,0,0,0,565,566,1,0,0,0,566,567,1,0,0,0,567,576,5,38,0,0,568,570,5,37,
  	0,0,569,571,5,32,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,
  	572,573,5,17,0,0,573,574,5,11,0,0,574,576,3,64,32,0,575,514,1,0,0,0,575,
  	517,1,0,0,0,575,524,1,0,0,0,575,532,1,0,0,0,575,547,1,0,0,0,575,555,1,
  	0,0,0,575,563,1,0,0,0,575,568,1,0,0,0,576,63,1,0,0,0,577,578,6,32,-1,
  	0,578,582,3,66,33,0,579,580,7,7,0,0,580,582,3,64,32,4,581,577,1,0,0,0,
  	581,579,1,0,0,0,582,597,1,0,0,0,583,584,10,3,0,0,584,585,7,8,0,0,585,
  	596,3,64,32,4,586,587,10,2,0,0,587,588,7,7,0,0,588,596,3,64,32,3,589,
  	590,10,1,0,0,590,591,5,197,0,0,591,596,3,64,32,2,592,593,10,5,0,0,593,
  	594,5,28,0,0,594,596,3,68,34,0,595,583,1,0,0,0,595,586,1,0,0,0,595,589,
  	1,0,0,0,595,592,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,
  	0,598,65,1,0,0,0,599,597,1,0,0,0,600,601,6,33,-1,0,601,810,5,38,0,0,602,
  	810,3,76,38,0,603,604,3,108,54,0,604,605,5,198,0,0,605,810,1,0,0,0,606,
  	607,5,208,0,0,607,810,5,198,0,0,608,810,3,112,56,0,609,810,3,74,37,0,
  	610,810,5,198,0,0,611,810,5,199,0,0,612,810,5,5,0,0,613,614,5,48,0,0,
  	614,615,5,2,0,0,615,616,3,64,32,0,616,617,5,31,0,0,617,618,3,64,32,0,
  	618,619,5,3,0,0,619,810,1,0,0,0,620,621,5,2,0,0,621,624,3,56,28,0,622,
  	623,5,1,0,0,623,625,3,56,28,0,624,622,1,0,0,0,625,626,1,0,0,0,626,624,
  	1,0,0,0,626,627,1,0,0,0,627,628,1,0,0,0,628,629,5,3,0,0,629,810,1,0,0,
  	0,630,631,5,94,0,0,631,632,5,2,0,0,632,637,3,56,28,0,633,634,5,1,0,0,
  	634,636,3,56,28,0,635,633,1,0,0,0,636,639,1,0,0,0,637,635,1,0,0,0,637,
  	638,1,0,0,0,638,640,1,0,0,0,639,637,1,0,0,0,640,641,5,3,0,0,641,810,1,
  	0,0,0,642,643,3,106,53,0,643,644,5,2,0,0,644,645,5,194,0,0,645,647,5,
  	3,0,0,646,648,3,88,44,0,647,646,1,0,0,0,647,648,1,0,0,0,648,650,1,0,0,
  	0,649,651,3,90,45,0,650,649,1,0,0,0,650,651,1,0,0,0,651,810,1,0,0,0,652,
  	653,3,106,53,0,653,665,5,2,0,0,654,656,3,36,18,0,655,654,1,0,0,0,655,
  	656,1,0,0,0,656,657,1,0,0,0,657,662,3,56,28,0,658,659,5,1,0,0,659,661,
  	3,56,28,0,660,658,1,0,0,0,661,664,1,0,0,0,662,660,1,0,0,0,662,663,1,0,
  	0,0,663,666,1,0,0,0,664,662,1,0,0,0,665,655,1,0,0,0,665,666,1,0,0,0,666,
  	667,1,0,0,0,667,669,5,3,0,0,668,670,3,88,44,0,669,668,1,0,0,0,669,670,
  	1,0,0,0,670,672,1,0,0,0,671,673,3,90,45,0,672,671,1,0,0,0,672,673,1,0,
  	0,0,673,810,1,0,0,0,674,675,3,108,54,0,675,676,5,6,0,0,676,677,3,56,28,
  	0,677,810,1,0,0,0,678,679,5,2,0,0,679,684,3,108,54,0,680,681,5,1,0,0,
  	681,683,3,108,54,0,682,680,1,0,0,0,683,686,1,0,0,0,684,682,1,0,0,0,684,
  	685,1,0,0,0,685,687,1,0,0,0,686,684,1,0,0,0,687,688,5,3,0,0,688,689,5,
  	6,0,0,689,690,3,56,28,0,690,810,1,0,0,0,691,692,5,2,0,0,692,693,3,2,1,
  	0,693,694,5,3,0,0,694,810,1,0,0,0,695,696,5,34,0,0,696,697,5,2,0,0,697,
  	698,3,2,1,0,698,699,5,3,0,0,699,810,1,0,0,0,700,701,5,70,0,0,701,703,
  	3,64,32,0,702,704,3,86,43,0,703,702,1,0,0,0,704,705,1,0,0,0,705,703,1,
  	0,0,0,705,706,1,0,0,0,706,709,1,0,0,0,707,708,5,73,0,0,708,710,3,56,28,
  	0,709,707,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,5,74,0,0,712,
  	810,1,0,0,0,713,715,5,70,0,0,714,716,3,86,43,0,715,714,1,0,0,0,716,717,
  	1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,721,1,0,0,0,719,720,5,73,
  	0,0,720,722,3,56,28,0,721,719,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,
  	723,724,5,74,0,0,724,810,1,0,0,0,725,726,5,123,0,0,726,727,5,2,0,0,727,
  	728,3,56,28,0,728,729,5,13,0,0,729,730,3,80,40,0,730,731,5,3,0,0,731,
  	810,1,0,0,0,732,733,5,124,0,0,733,734,5,2,0,0,734,735,3,56,28,0,735,736,
  	5,13,0,0,736,737,3,80,40,0,737,738,5,3,0,0,738,810,1,0,0,0,739,740,5,
  	147,0,0,740,749,5,7,0,0,741,746,3,56,28,0,742,743,5,1,0,0,743,745,3,56,
  	28,0,744,742,1,0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,
  	747,750,1,0,0,0,748,746,1,0,0,0,749,741,1,0,0,0,749,750,1,0,0,0,750,751,
  	1,0,0,0,751,810,5,8,0,0,752,810,3,108,54,0,753,810,5,64,0,0,754,758,5,
  	65,0,0,755,756,5,2,0,0,756,757,5,200,0,0,757,759,5,3,0,0,758,755,1,0,
  	0,0,758,759,1,0,0,0,759,810,1,0,0,0,760,764,5,66,0,0,761,762,5,2,0,0,
  	762,763,5,200,0,0,763,765,5,3,0,0,764,761,1,0,0,0,764,765,1,0,0,0,765,
  	810,1,0,0,0,766,770,5,67,0,0,767,768,5,2,0,0,768,769,5,200,0,0,769,771,
  	5,3,0,0,770,767,1,0,0,0,770,771,1,0,0,0,771,810,1,0,0,0,772,776,5,68,
  	0,0,773,774,5,2,0,0,774,775,5,200,0,0,775,777,5,3,0,0,776,773,1,0,0,0,
  	776,777,1,0,0,0,777,810,1,0,0,0,778,779,5,47,0,0,779,780,5,2,0,0,780,
  	781,3,64,32,0,781,782,5,11,0,0,782,785,3,64,32,0,783,784,5,49,0,0,784,
  	786,3,64,32,0,785,783,1,0,0,0,785,786,1,0,0,0,786,787,1,0,0,0,787,788,
  	5,3,0,0,788,810,1,0,0,0,789,790,5,178,0,0,790,791,5,2,0,0,791,794,3,64,
  	32,0,792,793,5,1,0,0,793,795,3,116,58,0,794,792,1,0,0,0,794,795,1,0,0,
  	0,795,796,1,0,0,0,796,797,5,3,0,0,797,810,1,0,0,0,798,799,5,69,0,0,799,
  	800,5,2,0,0,800,801,3,108,54,0,801,802,5,11,0,0,802,803,3,64,32,0,803,
  	804,5,3,0,0,804,810,1,0,0,0,805,806,5,2,0,0,806,807,3,56,28,0,807,808,
  	5,3,0,0,808,810,1,0,0,0,809,600,1,0,0,0,809,602,1,0,0,0,809,603,1,0,0,
  	0,809,606,1,0,0,0,809,608,1,0,0,0,809,609,1,0,0,0,809,610,1,0,0,0,809,
  	611,1,0,0,0,809,612,1,0,0,0,809,613,1,0,0,0,809,620,1,0,0,0,809,630,1,
  	0,0,0,809,642,1,0,0,0,809,652,1,0,0,0,809,674,1,0,0,0,809,678,1,0,0,0,
  	809,691,1,0,0,0,809,695,1,0,0,0,809,700,1,0,0,0,809,713,1,0,0,0,809,725,
  	1,0,0,0,809,732,1,0,0,0,809,739,1,0,0,0,809,752,1,0,0,0,809,753,1,0,0,
  	0,809,754,1,0,0,0,809,760,1,0,0,0,809,766,1,0,0,0,809,772,1,0,0,0,809,
  	778,1,0,0,0,809,789,1,0,0,0,809,798,1,0,0,0,809,805,1,0,0,0,810,821,1,
  	0,0,0,811,812,10,12,0,0,812,813,5,7,0,0,813,814,3,64,32,0,814,815,5,8,
  	0,0,815,820,1,0,0,0,816,817,10,10,0,0,817,818,5,4,0,0,818,820,3,108,54,
  	0,819,811,1,0,0,0,819,816,1,0,0,0,820,823,1,0,0,0,821,819,1,0,0,0,821,
  	822,1,0,0,0,822,67,1,0,0,0,823,821,1,0,0,0,824,825,5,54,0,0,825,826,5,
  	63,0,0,826,831,3,76,38,0,827,828,5,54,0,0,828,829,5,63,0,0,829,831,5,
  	198,0,0,830,824,1,0,0,0,830,827,1,0,0,0,831,69,1,0,0,0,832,833,7,9,0,
  	0,833,71,1,0,0,0,834,835,7,10,0,0,835,73,1,0,0,0,836,837,7,11,0,0,837,
  	75,1,0,0,0,838,840,5,56,0,0,839,841,7,7,0,0,840,839,1,0,0,0,840,841,1,
  	0,0,0,841,842,1,0,0,0,842,843,5,198,0,0,843,846,3,78,39,0,844,845,5,138,
  	0,0,845,847,3,78,39,0,846,844,1,0,0,0,846,847,1,0,0,0,847,77,1,0,0,0,
  	848,849,7,12,0,0,849,79,1,0,0,0,850,851,6,40,-1,0,851,852,5,147,0,0,852,
  	853,5,188,0,0,853,854,3,80,40,0,854,855,5,190,0,0,855,893,1,0,0,0,856,
  	857,5,148,0,0,857,858,5,188,0,0,858,859,3,80,40,0,859,860,5,1,0,0,860,
  	861,3,80,40,0,861,862,5,190,0,0,862,893,1,0,0,0,863,864,5,94,0,0,864,
  	865,5,2,0,0,865,866,3,108,54,0,866,873,3,80,40,0,867,868,5,1,0,0,868,
  	869,3,108,54,0,869,870,3,80,40,0,870,872,1,0,0,0,871,867,1,0,0,0,872,
  	875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,876,1,0,0,0,875,873,1,
  	0,0,0,876,877,5,3,0,0,877,893,1,0,0,0,878,890,3,84,42,0,879,880,5,2,0,
  	0,880,885,3,82,41,0,881,882,5,1,0,0,882,884,3,82,41,0,883,881,1,0,0,0,
  	884,887,1,0,0,0,885,883,1,0,0,0,885,886,1,0,0,0,886,888,1,0,0,0,887,885,
  	1,0,0,0,888,889,5,3,0,0,889,891,1,0,0,0,890,879,1,0,0,0,890,891,1,0,0,
  	0,891,893,1,0,0,0,892,850,1,0,0,0,892,856,1,0,0,0,892,863,1,0,0,0,892,
  	878,1,0,0,0,893,898,1,0,0,0,894,895,10,5,0,0,895,897,5,147,0,0,896,894,
  	1,0,0,0,897,900,1,0,0,0,898,896,1,0,0,0,898,899,1,0,0,0,899,81,1,0,0,
  	0,900,898,1,0,0,0,901,904,5,200,0,0,902,904,3,80,40,0,903,901,1,0,0,0,
  	903,902,1,0,0,0,904,83,1,0,0,0,905,910,5,206,0,0,906,910,5,207,0,0,907,
  	910,5,208,0,0,908,910,3,108,54,0,909,905,1,0,0,0,909,906,1,0,0,0,909,
  	907,1,0,0,0,909,908,1,0,0,0,910,85,1,0,0,0,911,912,5,71,0,0,912,913,3,
  	56,28,0,913,914,5,72,0,0,914,915,3,56,28,0,915,87,1,0,0,0,916,917,5,85,
  	0,0,917,918,5,2,0,0,918,919,5,18,0,0,919,920,3,58,29,0,920,921,5,3,0,
  	0,921,89,1,0,0,0,922,923,5,86,0,0,923,934,5,2,0,0,924,925,5,87,0,0,925,
  	926,5,20,0,0,926,931,3,56,28,0,927,928,5,1,0,0,928,930,3,56,28,0,929,
  	927,1,0,0,0,930,933,1,0,0,0,931,929,1,0,0,0,931,932,1,0,0,0,932,935,1,
  	0,0,0,933,931,1,0,0,0,934,924,1,0,0,0,934,935,1,0,0,0,935,946,1,0,0,0,
  	936,937,5,25,0,0,937,938,5,20,0,0,938,943,3,22,11,0,939,940,5,1,0,0,940,
  	942,3,22,11,0,941,939,1,0,0,0,942,945,1,0,0,0,943,941,1,0,0,0,943,944,
  	1,0,0,0,944,947,1,0,0,0,945,943,1,0,0,0,946,936,1,0,0,0,946,947,1,0,0,
  	0,947,949,1,0,0,0,948,950,3,92,46,0,949,948,1,0,0,0,949,950,1,0,0,0,950,
  	951,1,0,0,0,951,952,5,3,0,0,952,91,1,0,0,0,953,954,5,88,0,0,954,970,3,
  	94,47,0,955,956,5,89,0,0,956,970,3,94,47,0,957,958,5,88,0,0,958,959,5,
  	35,0,0,959,960,3,94,47,0,960,961,5,30,0,0,961,962,3,94,47,0,962,970,1,
  	0,0,0,963,964,5,89,0,0,964,965,5,35,0,0,965,966,3,94,47,0,966,967,5,30,
  	0,0,967,968,3,94,47,0,968,970,1,0,0,0,969,953,1,0,0,0,969,955,1,0,0,0,
  	969,957,1,0,0,0,969,963,1,0,0,0,970,93,1,0,0,0,971,972,5,90,0,0,972,981,
  	5,91,0,0,973,974,5,90,0,0,974,981,5,92,0,0,975,976,5,93,0,0,976,981,5,
  	94,0,0,977,978,3,56,28,0,978,979,7,13,0,0,979,981,1,0,0,0,980,971,1,0,
  	0,0,980,973,1,0,0,0,980,975,1,0,0,0,980,977,1,0,0,0,981,95,1,0,0,0,982,
  	983,5,116,0,0,983,987,7,14,0,0,984,985,5,117,0,0,985,987,7,15,0,0,986,
  	982,1,0,0,0,986,984,1,0,0,0,987,97,1,0,0,0,988,989,5,158,0,0,989,990,
  	5,159,0,0,990,994,3,100,50,0,991,992,5,164,0,0,992,994,7,16,0,0,993,988,
  	1,0,0,0,993,991,1,0,0,0,994,99,1,0,0,0,995,996,5,164,0,0,996,1003,5,163,
  	0,0,997,998,5,164,0,0,998,1003,5,162,0,0,999,1000,5,161,0,0,1000,1003,
  	5,164,0,0,1001,1003,5,160,0,0,1002,995,1,0,0,0,1002,997,1,0,0,0,1002,
  	999,1,0,0,0,1002,1001,1,0,0,0,1003,101,1,0,0,0,1004,1010,3,56,28,0,1005,
  	1006,3,108,54,0,1006,1007,5,9,0,0,1007,1008,3,56,28,0,1008,1010,1,0,0,
  	0,1009,1004,1,0,0,0,1009,1005,1,0,0,0,1010,103,1,0,0,0,1011,1016,5,10,
  	0,0,1012,1016,5,105,0,0,1013,1016,5,104,0,0,1014,1016,3,108,54,0,1015,
  	1011,1,0,0,0,1015,1012,1,0,0,0,1015,1013,1,0,0,0,1015,1014,1,0,0,0,1016,
  	105,1,0,0,0,1017,1022,3,108,54,0,1018,1019,5,4,0,0,1019,1021,3,108,54,
  	0,1020,1018,1,0,0,0,1021,1024,1,0,0,0,1022,1020,1,0,0,0,1022,1023,1,0,
  	0,0,1023,107,1,0,0,0,1024,1022,1,0,0,0,1025,1031,5,202,0,0,1026,1031,
  	3,110,55,0,1027,1031,3,114,57,0,1028,1031,5,205,0,0,1029,1031,5,203,0,
  	0,1030,1025,1,0,0,0,1030,1026,1,0,0,0,1030,1027,1,0,0,0,1030,1028,1,0,
  	0,0,1030,1029,1,0,0,0,1031,109,1,0,0,0,1032,1033,5,204,0,0,1033,111,1,
  	0,0,0,1034,1037,5,201,0,0,1035,1037,5,200,0,0,1036,1034,1,0,0,0,1036,
  	1035,1,0,0,0,1037,113,1,0,0,0,1038,1134,5,125,0,0,1039,1134,5,126,0,0,
  	1040,1134,5,129,0,0,1041,1134,5,130,0,0,1042,1134,5,132,0,0,1043,1134,
  	5,133,0,0,1044,1134,5,127,0,0,1045,1134,5,128,0,0,1046,1134,5,151,0,0,
  	1047,1134,5,12,0,0,1048,1134,5,85,0,0,1049,1134,5,28,0,0,1050,1134,5,
  	86,0,0,1051,1134,5,87,0,0,1052,1134,5,88,0,0,1053,1134,5,89,0,0,1054,
  	1134,5,91,0,0,1055,1134,5,92,0,0,1056,1134,5,93,0,0,1057,1134,5,94,0,
  	0,1058,1134,5,148,0,0,1059,1134,5,147,0,0,1060,1134,5,50,0,0,1061,1134,
  	5,51,0,0,1062,1134,5,52,0,0,1063,1134,5,53,0,0,1064,1134,5,54,0,0,1065,
  	1134,5,55,0,0,1066,1134,5,56,0,0,1067,1134,5,63,0,0,1068,1134,5,57,0,
  	0,1069,1134,5,58,0,0,1070,1134,5,59,0,0,1071,1134,5,60,0,0,1072,1134,
  	5,61,0,0,1073,1134,5,62,0,0,1074,1134,5,114,0,0,1075,1134,5,115,0,0,1076,
  	1134,5,116,0,0,1077,1134,5,117,0,0,1078,1134,5,118,0,0,1079,1134,5,119,
  	0,0,1080,1134,5,120,0,0,1081,1134,5,121,0,0,1082,1134,5,122,0,0,1083,
  	1134,5,142,0,0,1084,1134,5,139,0,0,1085,1134,5,140,0,0,1086,1134,5,141,
  	0,0,1087,1134,5,131,0,0,1088,1134,5,138,0,0,1089,1134,5,149,0,0,1090,
  	1134,5,150,0,0,1091,1134,5,102,0,0,1092,1134,5,103,0,0,1093,1134,5,183,
  	0,0,1094,1134,5,184,0,0,1095,1134,5,185,0,0,1096,1134,3,116,58,0,1097,
  	1134,5,48,0,0,1098,1134,5,33,0,0,1099,1134,5,152,0,0,1100,1134,5,153,
  	0,0,1101,1134,5,154,0,0,1102,1134,5,155,0,0,1103,1134,5,156,0,0,1104,
  	1134,5,157,0,0,1105,1134,5,158,0,0,1106,1134,5,159,0,0,1107,1134,5,160,
  	0,0,1108,1134,5,161,0,0,1109,1134,5,162,0,0,1110,1134,5,163,0,0,1111,
  	1134,5,164,0,0,1112,1134,5,165,0,0,1113,1134,5,166,0,0,1114,1134,5,101,
  	0,0,1115,1134,5,167,0,0,1116,1134,5,109,0,0,1117,1134,5,110,0,0,1118,
  	1134,5,111,0,0,1119,1134,5,112,0,0,1120,1134,5,113,0,0,1121,1134,5,47,
  	0,0,1122,1134,5,99,0,0,1123,1134,5,173,0,0,1124,1134,5,174,0,0,1125,1134,
  	5,171,0,0,1126,1134,5,172,0,0,1127,1134,5,175,0,0,1128,1134,5,176,0,0,
  	1129,1134,5,177,0,0,1130,1134,5,14,0,0,1131,1134,5,15,0,0,1132,1134,5,
  	16,0,0,1133,1038,1,0,0,0,1133,1039,1,0,0,0,1133,1040,1,0,0,0,1133,1041,
  	1,0,0,0,1133,1042,1,0,0,0,1133,1043,1,0,0,0,1133,1044,1,0,0,0,1133,1045,
  	1,0,0,0,1133,1046,1,0,0,0,1133,1047,1,0,0,0,1133,1048,1,0,0,0,1133,1049,
  	1,0,0,0,1133,1050,1,0,0,0,1133,1051,1,0,0,0,1133,1052,1,0,0,0,1133,1053,
  	1,0,0,0,1133,1054,1,0,0,0,1133,1055,1,0,0,0,1133,1056,1,0,0,0,1133,1057,
  	1,0,0,0,1133,1058,1,0,0,0,1133,1059,1,0,0,0,1133,1060,1,0,0,0,1133,1061,
  	1,0,0,0,1133,1062,1,0,0,0,1133,1063,1,0,0,0,1133,1064,1,0,0,0,1133,1065,
  	1,0,0,0,1133,1066,1,0,0,0,1133,1067,1,0,0,0,1133,1068,1,0,0,0,1133,1069,
  	1,0,0,0,1133,1070,1,0,0,0,1133,1071,1,0,0,0,1133,1072,1,0,0,0,1133,1073,
  	1,0,0,0,1133,1074,1,0,0,0,1133,1075,1,0,0,0,1133,1076,1,0,0,0,1133,1077,
  	1,0,0,0,1133,1078,1,0,0,0,1133,1079,1,0,0,0,1133,1080,1,0,0,0,1133,1081,
  	1,0,0,0,1133,1082,1,0,0,0,1133,1083,1,0,0,0,1133,1084,1,0,0,0,1133,1085,
  	1,0,0,0,1133,1086,1,0,0,0,1133,1087,1,0,0,0,1133,1088,1,0,0,0,1133,1089,
  	1,0,0,0,1133,1090,1,0,0,0,1133,1091,1,0,0,0,1133,1092,1,0,0,0,1133,1093,
  	1,0,0,0,1133,1094,1,0,0,0,1133,1095,1,0,0,0,1133,1096,1,0,0,0,1133,1097,
  	1,0,0,0,1133,1098,1,0,0,0,1133,1099,1,0,0,0,1133,1100,1,0,0,0,1133,1101,
  	1,0,0,0,1133,1102,1,0,0,0,1133,1103,1,0,0,0,1133,1104,1,0,0,0,1133,1105,
  	1,0,0,0,1133,1106,1,0,0,0,1133,1107,1,0,0,0,1133,1108,1,0,0,0,1133,1109,
  	1,0,0,0,1133,1110,1,0,0,0,1133,1111,1,0,0,0,1133,1112,1,0,0,0,1133,1113,
  	1,0,0,0,1133,1114,1,0,0,0,1133,1115,1,0,0,0,1133,1116,1,0,0,0,1133,1117,
  	1,0,0,0,1133,1118,1,0,0,0,1133,1119,1,0,0,0,1133,1120,1,0,0,0,1133,1121,
  	1,0,0,0,1133,1122,1,0,0,0,1133,1123,1,0,0,0,1133,1124,1,0,0,0,1133,1125,
  	1,0,0,0,1133,1126,1,0,0,0,1133,1127,1,0,0,0,1133,1128,1,0,0,0,1133,1129,
  	1,0,0,0,1133,1130,1,0,0,0,1133,1131,1,0,0,0,1133,1132,1,0,0,0,1134,115,
  	1,0,0,0,1135,1136,7,17,0,0,1136,117,1,0,0,0,127,122,128,135,140,146,152,
  	160,177,180,184,192,198,201,203,215,222,226,230,234,241,250,253,257,262,
  	266,269,276,287,290,300,303,314,319,327,330,334,342,345,349,353,364,367,
  	374,393,397,401,405,409,413,415,426,431,440,446,450,452,460,477,483,489,
  	497,505,507,512,524,532,541,547,555,561,565,570,575,581,595,597,626,637,
  	647,650,655,662,665,669,672,684,705,709,717,721,746,749,758,764,770,776,
  	785,794,809,819,821,830,840,846,873,885,890,892,898,903,909,931,934,943,
  	946,949,969,980,986,993,1002,1009,1015,1022,1030,1036,1133
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  prestoParserStaticData = staticData.release();
}

}

PrestoParser::PrestoParser(TokenStream *input) : PrestoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

PrestoParser::PrestoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  PrestoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *prestoParserStaticData->atn, prestoParserStaticData->decisionToDFA, prestoParserStaticData->sharedContextCache, options);
}

PrestoParser::~PrestoParser() {
  delete _interpreter;
}

const atn::ATN& PrestoParser::getATN() const {
  return *prestoParserStaticData->atn;
}

std::string PrestoParser::getGrammarFileName() const {
  return "Presto.g4";
}

const std::vector<std::string>& PrestoParser::getRuleNames() const {
  return prestoParserStaticData->ruleNames;
}

const dfa::Vocabulary& PrestoParser::getVocabulary() const {
  return prestoParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PrestoParser::getSerializedATN() const {
  return prestoParserStaticData->serializedATN;
}


//----------------- SingleQueryContext ------------------------------------------------------------------

PrestoParser::SingleQueryContext::SingleQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::QueryContext* PrestoParser::SingleQueryContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

tree::TerminalNode* PrestoParser::SingleQueryContext::EOF() {
  return getToken(PrestoParser::EOF, 0);
}


size_t PrestoParser::SingleQueryContext::getRuleIndex() const {
  return PrestoParser::RuleSingleQuery;
}

void PrestoParser::SingleQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleQuery(this);
}

void PrestoParser::SingleQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleQuery(this);
}


std::any PrestoParser::SingleQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSingleQuery(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SingleQueryContext* PrestoParser::singleQuery() {
  SingleQueryContext *_localctx = _tracker.createInstance<SingleQueryContext>(_ctx, getState());
  enterRule(_localctx, 0, PrestoParser::RuleSingleQuery);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(118);
    query();
    setState(119);
    match(PrestoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryContext ------------------------------------------------------------------

PrestoParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::QueryNoWithContext* PrestoParser::QueryContext::queryNoWith() {
  return getRuleContext<PrestoParser::QueryNoWithContext>(0);
}

PrestoParser::WithContext* PrestoParser::QueryContext::with() {
  return getRuleContext<PrestoParser::WithContext>(0);
}


size_t PrestoParser::QueryContext::getRuleIndex() const {
  return PrestoParser::RuleQuery;
}

void PrestoParser::QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery(this);
}

void PrestoParser::QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery(this);
}


std::any PrestoParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryContext* PrestoParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 2, PrestoParser::RuleQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::WITH) {
      setState(121);
      with();
    }
    setState(124);
    queryNoWith();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithContext ------------------------------------------------------------------

PrestoParser::WithContext::WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WithContext::WITH() {
  return getToken(PrestoParser::WITH, 0);
}

std::vector<PrestoParser::NamedQueryContext *> PrestoParser::WithContext::namedQuery() {
  return getRuleContexts<PrestoParser::NamedQueryContext>();
}

PrestoParser::NamedQueryContext* PrestoParser::WithContext::namedQuery(size_t i) {
  return getRuleContext<PrestoParser::NamedQueryContext>(i);
}

tree::TerminalNode* PrestoParser::WithContext::RECURSIVE() {
  return getToken(PrestoParser::RECURSIVE, 0);
}


size_t PrestoParser::WithContext::getRuleIndex() const {
  return PrestoParser::RuleWith;
}

void PrestoParser::WithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith(this);
}

void PrestoParser::WithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith(this);
}


std::any PrestoParser::WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWith(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WithContext* PrestoParser::with() {
  WithContext *_localctx = _tracker.createInstance<WithContext>(_ctx, getState());
  enterRule(_localctx, 4, PrestoParser::RuleWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(126);
    match(PrestoParser::WITH);
    setState(128);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::RECURSIVE) {
      setState(127);
      match(PrestoParser::RECURSIVE);
    }
    setState(130);
    namedQuery();
    setState(135);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(131);
      match(PrestoParser::T__0);
      setState(132);
      namedQuery();
      setState(137);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableElementContext ------------------------------------------------------------------

PrestoParser::TableElementContext::TableElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ColumnDefinitionContext* PrestoParser::TableElementContext::columnDefinition() {
  return getRuleContext<PrestoParser::ColumnDefinitionContext>(0);
}

PrestoParser::LikeClauseContext* PrestoParser::TableElementContext::likeClause() {
  return getRuleContext<PrestoParser::LikeClauseContext>(0);
}


size_t PrestoParser::TableElementContext::getRuleIndex() const {
  return PrestoParser::RuleTableElement;
}

void PrestoParser::TableElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableElement(this);
}

void PrestoParser::TableElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableElement(this);
}


std::any PrestoParser::TableElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableElement(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TableElementContext* PrestoParser::tableElement() {
  TableElementContext *_localctx = _tracker.createInstance<TableElementContext>(_ctx, getState());
  enterRule(_localctx, 6, PrestoParser::RuleTableElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(140);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(138);
        columnDefinition();
        break;
      }

      case PrestoParser::LIKE: {
        enterOuterAlt(_localctx, 2);
        setState(139);
        likeClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnDefinitionContext ------------------------------------------------------------------

PrestoParser::ColumnDefinitionContext::ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::IdentifierContext* PrestoParser::ColumnDefinitionContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::TypeContext* PrestoParser::ColumnDefinitionContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}

tree::TerminalNode* PrestoParser::ColumnDefinitionContext::COMMENT() {
  return getToken(PrestoParser::COMMENT, 0);
}

tree::TerminalNode* PrestoParser::ColumnDefinitionContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}


size_t PrestoParser::ColumnDefinitionContext::getRuleIndex() const {
  return PrestoParser::RuleColumnDefinition;
}

void PrestoParser::ColumnDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnDefinition(this);
}

void PrestoParser::ColumnDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnDefinition(this);
}


std::any PrestoParser::ColumnDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnDefinition(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ColumnDefinitionContext* PrestoParser::columnDefinition() {
  ColumnDefinitionContext *_localctx = _tracker.createInstance<ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 8, PrestoParser::RuleColumnDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(142);
    identifier();
    setState(143);
    type(0);
    setState(146);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::COMMENT) {
      setState(144);
      match(PrestoParser::COMMENT);
      setState(145);
      match(PrestoParser::STRING);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LikeClauseContext ------------------------------------------------------------------

PrestoParser::LikeClauseContext::LikeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::LikeClauseContext::LIKE() {
  return getToken(PrestoParser::LIKE, 0);
}

PrestoParser::QualifiedNameContext* PrestoParser::LikeClauseContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::PROPERTIES() {
  return getToken(PrestoParser::PROPERTIES, 0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::INCLUDING() {
  return getToken(PrestoParser::INCLUDING, 0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::EXCLUDING() {
  return getToken(PrestoParser::EXCLUDING, 0);
}


size_t PrestoParser::LikeClauseContext::getRuleIndex() const {
  return PrestoParser::RuleLikeClause;
}

void PrestoParser::LikeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLikeClause(this);
}

void PrestoParser::LikeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLikeClause(this);
}


std::any PrestoParser::LikeClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLikeClause(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::LikeClauseContext* PrestoParser::likeClause() {
  LikeClauseContext *_localctx = _tracker.createInstance<LikeClauseContext>(_ctx, getState());
  enterRule(_localctx, 10, PrestoParser::RuleLikeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(148);
    match(PrestoParser::LIKE);
    setState(149);
    qualifiedName();
    setState(152);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::INCLUDING

    || _la == PrestoParser::EXCLUDING) {
      setState(150);
      antlrcpp::downCast<LikeClauseContext *>(_localctx)->optionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::INCLUDING

      || _la == PrestoParser::EXCLUDING)) {
        antlrcpp::downCast<LikeClauseContext *>(_localctx)->optionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(151);
      match(PrestoParser::PROPERTIES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertiesContext ------------------------------------------------------------------

PrestoParser::TablePropertiesContext::TablePropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::TablePropertyContext *> PrestoParser::TablePropertiesContext::tableProperty() {
  return getRuleContexts<PrestoParser::TablePropertyContext>();
}

PrestoParser::TablePropertyContext* PrestoParser::TablePropertiesContext::tableProperty(size_t i) {
  return getRuleContext<PrestoParser::TablePropertyContext>(i);
}


size_t PrestoParser::TablePropertiesContext::getRuleIndex() const {
  return PrestoParser::RuleTableProperties;
}

void PrestoParser::TablePropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableProperties(this);
}

void PrestoParser::TablePropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableProperties(this);
}


std::any PrestoParser::TablePropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableProperties(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TablePropertiesContext* PrestoParser::tableProperties() {
  TablePropertiesContext *_localctx = _tracker.createInstance<TablePropertiesContext>(_ctx, getState());
  enterRule(_localctx, 12, PrestoParser::RuleTableProperties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(154);
    match(PrestoParser::T__1);
    setState(155);
    tableProperty();
    setState(160);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(156);
      match(PrestoParser::T__0);
      setState(157);
      tableProperty();
      setState(162);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(163);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyContext ------------------------------------------------------------------

PrestoParser::TablePropertyContext::TablePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::IdentifierContext* PrestoParser::TablePropertyContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::TablePropertyContext::EQ() {
  return getToken(PrestoParser::EQ, 0);
}

PrestoParser::ExpressionContext* PrestoParser::TablePropertyContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}


size_t PrestoParser::TablePropertyContext::getRuleIndex() const {
  return PrestoParser::RuleTableProperty;
}

void PrestoParser::TablePropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableProperty(this);
}

void PrestoParser::TablePropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableProperty(this);
}


std::any PrestoParser::TablePropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableProperty(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TablePropertyContext* PrestoParser::tableProperty() {
  TablePropertyContext *_localctx = _tracker.createInstance<TablePropertyContext>(_ctx, getState());
  enterRule(_localctx, 14, PrestoParser::RuleTableProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(165);
    identifier();
    setState(166);
    match(PrestoParser::EQ);
    setState(167);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryNoWithContext ------------------------------------------------------------------

PrestoParser::QueryNoWithContext::QueryNoWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::QueryTermContext* PrestoParser::QueryNoWithContext::queryTerm() {
  return getRuleContext<PrestoParser::QueryTermContext>(0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::ORDER() {
  return getToken(PrestoParser::ORDER, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::BY() {
  return getToken(PrestoParser::BY, 0);
}

std::vector<PrestoParser::SortItemContext *> PrestoParser::QueryNoWithContext::sortItem() {
  return getRuleContexts<PrestoParser::SortItemContext>();
}

PrestoParser::SortItemContext* PrestoParser::QueryNoWithContext::sortItem(size_t i) {
  return getRuleContext<PrestoParser::SortItemContext>(i);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::LIMIT() {
  return getToken(PrestoParser::LIMIT, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}


size_t PrestoParser::QueryNoWithContext::getRuleIndex() const {
  return PrestoParser::RuleQueryNoWith;
}

void PrestoParser::QueryNoWithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryNoWith(this);
}

void PrestoParser::QueryNoWithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryNoWith(this);
}


std::any PrestoParser::QueryNoWithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryNoWith(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryNoWithContext* PrestoParser::queryNoWith() {
  QueryNoWithContext *_localctx = _tracker.createInstance<QueryNoWithContext>(_ctx, getState());
  enterRule(_localctx, 16, PrestoParser::RuleQueryNoWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(169);
    queryTerm(0);
    setState(180);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ORDER) {
      setState(170);
      match(PrestoParser::ORDER);
      setState(171);
      match(PrestoParser::BY);
      setState(172);
      sortItem();
      setState(177);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(173);
        match(PrestoParser::T__0);
        setState(174);
        sortItem();
        setState(179);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(184);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::LIMIT) {
      setState(182);
      match(PrestoParser::LIMIT);
      setState(183);
      antlrcpp::downCast<QueryNoWithContext *>(_localctx)->limit = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::ALL || _la == PrestoParser::INTEGER_VALUE)) {
        antlrcpp::downCast<QueryNoWithContext *>(_localctx)->limit = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryTermContext ------------------------------------------------------------------

PrestoParser::QueryTermContext::QueryTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::QueryTermContext::getRuleIndex() const {
  return PrestoParser::RuleQueryTerm;
}

void PrestoParser::QueryTermContext::copyFrom(QueryTermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryTermDefaultContext ------------------------------------------------------------------

PrestoParser::QueryPrimaryContext* PrestoParser::QueryTermDefaultContext::queryPrimary() {
  return getRuleContext<PrestoParser::QueryPrimaryContext>(0);
}

PrestoParser::QueryTermDefaultContext::QueryTermDefaultContext(QueryTermContext *ctx) { copyFrom(ctx); }

void PrestoParser::QueryTermDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryTermDefault(this);
}
void PrestoParser::QueryTermDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryTermDefault(this);
}

std::any PrestoParser::QueryTermDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryTermDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetOperationContext ------------------------------------------------------------------

std::vector<PrestoParser::QueryTermContext *> PrestoParser::SetOperationContext::queryTerm() {
  return getRuleContexts<PrestoParser::QueryTermContext>();
}

PrestoParser::QueryTermContext* PrestoParser::SetOperationContext::queryTerm(size_t i) {
  return getRuleContext<PrestoParser::QueryTermContext>(i);
}

tree::TerminalNode* PrestoParser::SetOperationContext::INTERSECT() {
  return getToken(PrestoParser::INTERSECT, 0);
}

PrestoParser::SetQuantifierContext* PrestoParser::SetOperationContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

tree::TerminalNode* PrestoParser::SetOperationContext::UNION() {
  return getToken(PrestoParser::UNION, 0);
}

tree::TerminalNode* PrestoParser::SetOperationContext::EXCEPT() {
  return getToken(PrestoParser::EXCEPT, 0);
}

PrestoParser::SetOperationContext::SetOperationContext(QueryTermContext *ctx) { copyFrom(ctx); }

void PrestoParser::SetOperationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetOperation(this);
}
void PrestoParser::SetOperationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetOperation(this);
}

std::any PrestoParser::SetOperationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSetOperation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryTermContext* PrestoParser::queryTerm() {
   return queryTerm(0);
}

PrestoParser::QueryTermContext* PrestoParser::queryTerm(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::QueryTermContext *_localctx = _tracker.createInstance<QueryTermContext>(_ctx, parentState);
  PrestoParser::QueryTermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 18;
  enterRecursionRule(_localctx, 18, PrestoParser::RuleQueryTerm, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<QueryTermDefaultContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(187);
    queryPrimary();
    _ctx->stop = _input->LT(-1);
    setState(203);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(201);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(189);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(190);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = match(PrestoParser::INTERSECT);
          setState(192);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == PrestoParser::ALL

          || _la == PrestoParser::DISTINCT) {
            setState(191);
            setQuantifier();
          }
          setState(194);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(195);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(196);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == PrestoParser::UNION

          || _la == PrestoParser::EXCEPT)) {
            antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(198);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == PrestoParser::ALL

          || _la == PrestoParser::DISTINCT) {
            setState(197);
            setQuantifier();
          }
          setState(200);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(205);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- QueryPrimaryContext ------------------------------------------------------------------

PrestoParser::QueryPrimaryContext::QueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::QueryPrimaryContext::getRuleIndex() const {
  return PrestoParser::RuleQueryPrimary;
}

void PrestoParser::QueryPrimaryContext::copyFrom(QueryPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryContext ------------------------------------------------------------------

PrestoParser::QueryNoWithContext* PrestoParser::SubqueryContext::queryNoWith() {
  return getRuleContext<PrestoParser::QueryNoWithContext>(0);
}

PrestoParser::SubqueryContext::SubqueryContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery(this);
}
void PrestoParser::SubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery(this);
}

std::any PrestoParser::SubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QueryPrimaryDefaultContext ------------------------------------------------------------------

PrestoParser::QuerySpecificationContext* PrestoParser::QueryPrimaryDefaultContext::querySpecification() {
  return getRuleContext<PrestoParser::QuerySpecificationContext>(0);
}

PrestoParser::QueryPrimaryDefaultContext::QueryPrimaryDefaultContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::QueryPrimaryDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryPrimaryDefault(this);
}
void PrestoParser::QueryPrimaryDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryPrimaryDefault(this);
}

std::any PrestoParser::QueryPrimaryDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryPrimaryDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TableContext::TABLE() {
  return getToken(PrestoParser::TABLE, 0);
}

PrestoParser::QualifiedNameContext* PrestoParser::TableContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

PrestoParser::TableContext::TableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::TableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable(this);
}
void PrestoParser::TableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable(this);
}

std::any PrestoParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InlineTableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InlineTableContext::VALUES() {
  return getToken(PrestoParser::VALUES, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::InlineTableContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::InlineTableContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::InlineTableContext::InlineTableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::InlineTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInlineTable(this);
}
void PrestoParser::InlineTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInlineTable(this);
}

std::any PrestoParser::InlineTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInlineTable(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::QueryPrimaryContext* PrestoParser::queryPrimary() {
  QueryPrimaryContext *_localctx = _tracker.createInstance<QueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 20, PrestoParser::RuleQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(222);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SELECT: {
        _localctx = _tracker.createInstance<PrestoParser::QueryPrimaryDefaultContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(206);
        querySpecification();
        break;
      }

      case PrestoParser::TABLE: {
        _localctx = _tracker.createInstance<PrestoParser::TableContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(207);
        match(PrestoParser::TABLE);
        setState(208);
        qualifiedName();
        break;
      }

      case PrestoParser::VALUES: {
        _localctx = _tracker.createInstance<PrestoParser::InlineTableContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(209);
        match(PrestoParser::VALUES);
        setState(210);
        expression();
        setState(215);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(211);
            match(PrestoParser::T__0);
            setState(212);
            expression(); 
          }
          setState(217);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
        }
        break;
      }

      case PrestoParser::T__1: {
        _localctx = _tracker.createInstance<PrestoParser::SubqueryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(218);
        match(PrestoParser::T__1);
        setState(219);
        queryNoWith();
        setState(220);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortItemContext ------------------------------------------------------------------

PrestoParser::SortItemContext::SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ExpressionContext* PrestoParser::SortItemContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::SortItemContext::NULLS() {
  return getToken(PrestoParser::NULLS, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::ASC() {
  return getToken(PrestoParser::ASC, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::DESC() {
  return getToken(PrestoParser::DESC, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::FIRST() {
  return getToken(PrestoParser::FIRST, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::LAST() {
  return getToken(PrestoParser::LAST, 0);
}


size_t PrestoParser::SortItemContext::getRuleIndex() const {
  return PrestoParser::RuleSortItem;
}

void PrestoParser::SortItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortItem(this);
}

void PrestoParser::SortItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortItem(this);
}


std::any PrestoParser::SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSortItem(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SortItemContext* PrestoParser::sortItem() {
  SortItemContext *_localctx = _tracker.createInstance<SortItemContext>(_ctx, getState());
  enterRule(_localctx, 22, PrestoParser::RuleSortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(224);
    expression();
    setState(226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ASC

    || _la == PrestoParser::DESC) {
      setState(225);
      antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::ASC

      || _la == PrestoParser::DESC)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(230);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::NULLS) {
      setState(228);
      match(PrestoParser::NULLS);
      setState(229);
      antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrdering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::FIRST

      || _la == PrestoParser::LAST)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrdering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

PrestoParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::SELECT() {
  return getToken(PrestoParser::SELECT, 0);
}

std::vector<PrestoParser::SelectItemContext *> PrestoParser::QuerySpecificationContext::selectItem() {
  return getRuleContexts<PrestoParser::SelectItemContext>();
}

PrestoParser::SelectItemContext* PrestoParser::QuerySpecificationContext::selectItem(size_t i) {
  return getRuleContext<PrestoParser::SelectItemContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::QuerySpecificationContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

std::vector<PrestoParser::RelationContext *> PrestoParser::QuerySpecificationContext::relation() {
  return getRuleContexts<PrestoParser::RelationContext>();
}

PrestoParser::RelationContext* PrestoParser::QuerySpecificationContext::relation(size_t i) {
  return getRuleContext<PrestoParser::RelationContext>(i);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::WHERE() {
  return getToken(PrestoParser::WHERE, 0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::GROUP() {
  return getToken(PrestoParser::GROUP, 0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::BY() {
  return getToken(PrestoParser::BY, 0);
}

PrestoParser::GroupByContext* PrestoParser::QuerySpecificationContext::groupBy() {
  return getRuleContext<PrestoParser::GroupByContext>(0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::HAVING() {
  return getToken(PrestoParser::HAVING, 0);
}

std::vector<PrestoParser::BooleanExpressionContext *> PrestoParser::QuerySpecificationContext::booleanExpression() {
  return getRuleContexts<PrestoParser::BooleanExpressionContext>();
}

PrestoParser::BooleanExpressionContext* PrestoParser::QuerySpecificationContext::booleanExpression(size_t i) {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(i);
}


size_t PrestoParser::QuerySpecificationContext::getRuleIndex() const {
  return PrestoParser::RuleQuerySpecification;
}

void PrestoParser::QuerySpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuerySpecification(this);
}

void PrestoParser::QuerySpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuerySpecification(this);
}


std::any PrestoParser::QuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QuerySpecificationContext* PrestoParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 24, PrestoParser::RuleQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(232);
    match(PrestoParser::SELECT);
    setState(234);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(233);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(236);
    selectItem();
    setState(241);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(237);
        match(PrestoParser::T__0);
        setState(238);
        selectItem(); 
      }
      setState(243);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
    setState(253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(244);
      match(PrestoParser::FROM);
      setState(245);
      relation(0);
      setState(250);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(246);
          match(PrestoParser::T__0);
          setState(247);
          relation(0); 
        }
        setState(252);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(257);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(255);
      match(PrestoParser::WHERE);
      setState(256);
      antlrcpp::downCast<QuerySpecificationContext *>(_localctx)->where = booleanExpression(0);
      break;
    }

    default:
      break;
    }
    setState(262);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(259);
      match(PrestoParser::GROUP);
      setState(260);
      match(PrestoParser::BY);
      setState(261);
      groupBy();
      break;
    }

    default:
      break;
    }
    setState(266);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(264);
      match(PrestoParser::HAVING);
      setState(265);
      antlrcpp::downCast<QuerySpecificationContext *>(_localctx)->having = booleanExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByContext ------------------------------------------------------------------

PrestoParser::GroupByContext::GroupByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::GroupingElementContext *> PrestoParser::GroupByContext::groupingElement() {
  return getRuleContexts<PrestoParser::GroupingElementContext>();
}

PrestoParser::GroupingElementContext* PrestoParser::GroupByContext::groupingElement(size_t i) {
  return getRuleContext<PrestoParser::GroupingElementContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::GroupByContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}


size_t PrestoParser::GroupByContext::getRuleIndex() const {
  return PrestoParser::RuleGroupBy;
}

void PrestoParser::GroupByContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupBy(this);
}

void PrestoParser::GroupByContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupBy(this);
}


std::any PrestoParser::GroupByContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupBy(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupByContext* PrestoParser::groupBy() {
  GroupByContext *_localctx = _tracker.createInstance<GroupByContext>(_ctx, getState());
  enterRule(_localctx, 26, PrestoParser::RuleGroupBy);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(269);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(268);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(271);
    groupingElement();
    setState(276);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(272);
        match(PrestoParser::T__0);
        setState(273);
        groupingElement(); 
      }
      setState(278);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementContext ------------------------------------------------------------------

PrestoParser::GroupingElementContext::GroupingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::GroupingElementContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingElement;
}

void PrestoParser::GroupingElementContext::copyFrom(GroupingElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MultipleGroupingSetsContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::MultipleGroupingSetsContext::GROUPING() {
  return getToken(PrestoParser::GROUPING, 0);
}

tree::TerminalNode* PrestoParser::MultipleGroupingSetsContext::SETS() {
  return getToken(PrestoParser::SETS, 0);
}

std::vector<PrestoParser::GroupingSetContext *> PrestoParser::MultipleGroupingSetsContext::groupingSet() {
  return getRuleContexts<PrestoParser::GroupingSetContext>();
}

PrestoParser::GroupingSetContext* PrestoParser::MultipleGroupingSetsContext::groupingSet(size_t i) {
  return getRuleContext<PrestoParser::GroupingSetContext>(i);
}

PrestoParser::MultipleGroupingSetsContext::MultipleGroupingSetsContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::MultipleGroupingSetsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleGroupingSets(this);
}
void PrestoParser::MultipleGroupingSetsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleGroupingSets(this);
}

std::any PrestoParser::MultipleGroupingSetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitMultipleGroupingSets(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SingleGroupingSetContext ------------------------------------------------------------------

PrestoParser::GroupingExpressionsContext* PrestoParser::SingleGroupingSetContext::groupingExpressions() {
  return getRuleContext<PrestoParser::GroupingExpressionsContext>(0);
}

PrestoParser::SingleGroupingSetContext::SingleGroupingSetContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::SingleGroupingSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleGroupingSet(this);
}
void PrestoParser::SingleGroupingSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleGroupingSet(this);
}

std::any PrestoParser::SingleGroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSingleGroupingSet(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CubeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CubeContext::CUBE() {
  return getToken(PrestoParser::CUBE, 0);
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::CubeContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::CubeContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}

PrestoParser::CubeContext::CubeContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::CubeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCube(this);
}
void PrestoParser::CubeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCube(this);
}

std::any PrestoParser::CubeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCube(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RollupContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::RollupContext::ROLLUP() {
  return getToken(PrestoParser::ROLLUP, 0);
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::RollupContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::RollupContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}

PrestoParser::RollupContext::RollupContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::RollupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollup(this);
}
void PrestoParser::RollupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollup(this);
}

std::any PrestoParser::RollupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRollup(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::GroupingElementContext* PrestoParser::groupingElement() {
  GroupingElementContext *_localctx = _tracker.createInstance<GroupingElementContext>(_ctx, getState());
  enterRule(_localctx, 28, PrestoParser::RuleGroupingElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(319);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NOT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::PLUS:
      case PrestoParser::MINUS:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<PrestoParser::SingleGroupingSetContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(279);
        groupingExpressions();
        break;
      }

      case PrestoParser::ROLLUP: {
        _localctx = _tracker.createInstance<PrestoParser::RollupContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(280);
        match(PrestoParser::ROLLUP);
        setState(281);
        match(PrestoParser::T__1);
        setState(290);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(282);
          qualifiedName();
          setState(287);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(283);
            match(PrestoParser::T__0);
            setState(284);
            qualifiedName();
            setState(289);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(292);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::CUBE: {
        _localctx = _tracker.createInstance<PrestoParser::CubeContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(293);
        match(PrestoParser::CUBE);
        setState(294);
        match(PrestoParser::T__1);
        setState(303);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(295);
          qualifiedName();
          setState(300);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(296);
            match(PrestoParser::T__0);
            setState(297);
            qualifiedName();
            setState(302);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(305);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::GROUPING: {
        _localctx = _tracker.createInstance<PrestoParser::MultipleGroupingSetsContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(306);
        match(PrestoParser::GROUPING);
        setState(307);
        match(PrestoParser::SETS);
        setState(308);
        match(PrestoParser::T__1);
        setState(309);
        groupingSet();
        setState(314);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(310);
          match(PrestoParser::T__0);
          setState(311);
          groupingSet();
          setState(316);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(317);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingExpressionsContext ------------------------------------------------------------------

PrestoParser::GroupingExpressionsContext::GroupingExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::GroupingExpressionsContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::GroupingExpressionsContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::GroupingExpressionsContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingExpressions;
}

void PrestoParser::GroupingExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupingExpressions(this);
}

void PrestoParser::GroupingExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupingExpressions(this);
}


std::any PrestoParser::GroupingExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupingExpressions(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupingExpressionsContext* PrestoParser::groupingExpressions() {
  GroupingExpressionsContext *_localctx = _tracker.createInstance<GroupingExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 30, PrestoParser::RuleGroupingExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(334);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(321);
      match(PrestoParser::T__1);
      setState(330);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(322);
        expression();
        setState(327);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(323);
          match(PrestoParser::T__0);
          setState(324);
          expression();
          setState(329);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(332);
      match(PrestoParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(333);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingSetContext ------------------------------------------------------------------

PrestoParser::GroupingSetContext::GroupingSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::GroupingSetContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::GroupingSetContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}


size_t PrestoParser::GroupingSetContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingSet;
}

void PrestoParser::GroupingSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupingSet(this);
}

void PrestoParser::GroupingSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupingSet(this);
}


std::any PrestoParser::GroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupingSet(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupingSetContext* PrestoParser::groupingSet() {
  GroupingSetContext *_localctx = _tracker.createInstance<GroupingSetContext>(_ctx, getState());
  enterRule(_localctx, 32, PrestoParser::RuleGroupingSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(349);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1: {
        enterOuterAlt(_localctx, 1);
        setState(336);
        match(PrestoParser::T__1);
        setState(345);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(337);
          qualifiedName();
          setState(342);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(338);
            match(PrestoParser::T__0);
            setState(339);
            qualifiedName();
            setState(344);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(347);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(348);
        qualifiedName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedQueryContext ------------------------------------------------------------------

PrestoParser::NamedQueryContext::NamedQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NamedQueryContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::QueryContext* PrestoParser::NamedQueryContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::NamedQueryContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ColumnAliasesContext* PrestoParser::NamedQueryContext::columnAliases() {
  return getRuleContext<PrestoParser::ColumnAliasesContext>(0);
}


size_t PrestoParser::NamedQueryContext::getRuleIndex() const {
  return PrestoParser::RuleNamedQuery;
}

void PrestoParser::NamedQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedQuery(this);
}

void PrestoParser::NamedQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedQuery(this);
}


std::any PrestoParser::NamedQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNamedQuery(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NamedQueryContext* PrestoParser::namedQuery() {
  NamedQueryContext *_localctx = _tracker.createInstance<NamedQueryContext>(_ctx, getState());
  enterRule(_localctx, 34, PrestoParser::RuleNamedQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(351);
    antlrcpp::downCast<NamedQueryContext *>(_localctx)->name = identifier();
    setState(353);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::T__1) {
      setState(352);
      columnAliases();
    }
    setState(355);
    match(PrestoParser::AS);
    setState(356);
    match(PrestoParser::T__1);
    setState(357);
    query();
    setState(358);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

PrestoParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::SetQuantifierContext::DISTINCT() {
  return getToken(PrestoParser::DISTINCT, 0);
}

tree::TerminalNode* PrestoParser::SetQuantifierContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}


size_t PrestoParser::SetQuantifierContext::getRuleIndex() const {
  return PrestoParser::RuleSetQuantifier;
}

void PrestoParser::SetQuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetQuantifier(this);
}

void PrestoParser::SetQuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetQuantifier(this);
}


std::any PrestoParser::SetQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSetQuantifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SetQuantifierContext* PrestoParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 36, PrestoParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(360);
    _la = _input->LA(1);
    if (!(_la == PrestoParser::ALL

    || _la == PrestoParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemContext ------------------------------------------------------------------

PrestoParser::SelectItemContext::SelectItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::SelectItemContext::getRuleIndex() const {
  return PrestoParser::RuleSelectItem;
}

void PrestoParser::SelectItemContext::copyFrom(SelectItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectAllContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::SelectAllContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::SelectAllContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

PrestoParser::SelectAllContext::SelectAllContext(SelectItemContext *ctx) { copyFrom(ctx); }

void PrestoParser::SelectAllContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectAll(this);
}
void PrestoParser::SelectAllContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectAll(this);
}

std::any PrestoParser::SelectAllContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSelectAll(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectSingleContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::SelectSingleContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::SelectSingleContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::SelectSingleContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::SelectSingleContext::SelectSingleContext(SelectItemContext *ctx) { copyFrom(ctx); }

void PrestoParser::SelectSingleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectSingle(this);
}
void PrestoParser::SelectSingleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectSingle(this);
}

std::any PrestoParser::SelectSingleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSelectSingle(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::SelectItemContext* PrestoParser::selectItem() {
  SelectItemContext *_localctx = _tracker.createInstance<SelectItemContext>(_ctx, getState());
  enterRule(_localctx, 38, PrestoParser::RuleSelectItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(374);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::SelectSingleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(362);
      expression();
      setState(367);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
      case 1: {
        setState(364);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::AS) {
          setState(363);
          match(PrestoParser::AS);
        }
        setState(366);
        identifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::SelectAllContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(369);
      qualifiedName();
      setState(370);
      match(PrestoParser::T__3);
      setState(371);
      match(PrestoParser::ASTERISK);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::SelectAllContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(373);
      match(PrestoParser::ASTERISK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

PrestoParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::RelationContext::getRuleIndex() const {
  return PrestoParser::RuleRelation;
}

void PrestoParser::RelationContext::copyFrom(RelationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RelationDefaultContext ------------------------------------------------------------------

PrestoParser::SampledRelationContext* PrestoParser::RelationDefaultContext::sampledRelation() {
  return getRuleContext<PrestoParser::SampledRelationContext>(0);
}

PrestoParser::RelationDefaultContext::RelationDefaultContext(RelationContext *ctx) { copyFrom(ctx); }

void PrestoParser::RelationDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationDefault(this);
}
void PrestoParser::RelationDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationDefault(this);
}

std::any PrestoParser::RelationDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRelationDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinRelationContext ------------------------------------------------------------------

std::vector<PrestoParser::RelationContext *> PrestoParser::JoinRelationContext::relation() {
  return getRuleContexts<PrestoParser::RelationContext>();
}

PrestoParser::RelationContext* PrestoParser::JoinRelationContext::relation(size_t i) {
  return getRuleContext<PrestoParser::RelationContext>(i);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::CROSS() {
  return getToken(PrestoParser::CROSS, 0);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::JOIN() {
  return getToken(PrestoParser::JOIN, 0);
}

PrestoParser::JoinTypeContext* PrestoParser::JoinRelationContext::joinType() {
  return getRuleContext<PrestoParser::JoinTypeContext>(0);
}

PrestoParser::JoinCriteriaContext* PrestoParser::JoinRelationContext::joinCriteria() {
  return getRuleContext<PrestoParser::JoinCriteriaContext>(0);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::NATURAL() {
  return getToken(PrestoParser::NATURAL, 0);
}

PrestoParser::SampledRelationContext* PrestoParser::JoinRelationContext::sampledRelation() {
  return getRuleContext<PrestoParser::SampledRelationContext>(0);
}

PrestoParser::JoinRelationContext::JoinRelationContext(RelationContext *ctx) { copyFrom(ctx); }

void PrestoParser::JoinRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinRelation(this);
}
void PrestoParser::JoinRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinRelation(this);
}

std::any PrestoParser::JoinRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::RelationContext* PrestoParser::relation() {
   return relation(0);
}

PrestoParser::RelationContext* PrestoParser::relation(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, parentState);
  PrestoParser::RelationContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 40;
  enterRecursionRule(_localctx, 40, PrestoParser::RuleRelation, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationDefaultContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(377);
    sampledRelation();
    _ctx->stop = _input->LT(-1);
    setState(397);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<JoinRelationContext>(_tracker.createInstance<RelationContext>(parentContext, parentState));
        _localctx = newContext;
        newContext->left = previousContext;
        pushNewRecursionContext(newContext, startState, RuleRelation);
        setState(379);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(393);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case PrestoParser::CROSS: {
            setState(380);
            match(PrestoParser::CROSS);
            setState(381);
            match(PrestoParser::JOIN);
            setState(382);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = sampledRelation();
            break;
          }

          case PrestoParser::JOIN:
          case PrestoParser::INNER:
          case PrestoParser::LEFT:
          case PrestoParser::RIGHT:
          case PrestoParser::FULL: {
            setState(383);
            joinType();
            setState(384);
            match(PrestoParser::JOIN);
            setState(385);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->rightRelation = relation(0);
            setState(386);
            joinCriteria();
            break;
          }

          case PrestoParser::NATURAL: {
            setState(388);
            match(PrestoParser::NATURAL);
            setState(389);
            joinType();
            setState(390);
            match(PrestoParser::JOIN);
            setState(391);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = sampledRelation();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(399);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinTypeContext ------------------------------------------------------------------

PrestoParser::JoinTypeContext::JoinTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::JoinTypeContext::INNER() {
  return getToken(PrestoParser::INNER, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::LEFT() {
  return getToken(PrestoParser::LEFT, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::OUTER() {
  return getToken(PrestoParser::OUTER, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::RIGHT() {
  return getToken(PrestoParser::RIGHT, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::FULL() {
  return getToken(PrestoParser::FULL, 0);
}


size_t PrestoParser::JoinTypeContext::getRuleIndex() const {
  return PrestoParser::RuleJoinType;
}

void PrestoParser::JoinTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinType(this);
}

void PrestoParser::JoinTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinType(this);
}


std::any PrestoParser::JoinTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::JoinTypeContext* PrestoParser::joinType() {
  JoinTypeContext *_localctx = _tracker.createInstance<JoinTypeContext>(_ctx, getState());
  enterRule(_localctx, 42, PrestoParser::RuleJoinType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(415);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::JOIN:
      case PrestoParser::INNER: {
        enterOuterAlt(_localctx, 1);
        setState(401);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::INNER) {
          setState(400);
          match(PrestoParser::INNER);
        }
        break;
      }

      case PrestoParser::LEFT: {
        enterOuterAlt(_localctx, 2);
        setState(403);
        match(PrestoParser::LEFT);
        setState(405);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(404);
          match(PrestoParser::OUTER);
        }
        break;
      }

      case PrestoParser::RIGHT: {
        enterOuterAlt(_localctx, 3);
        setState(407);
        match(PrestoParser::RIGHT);
        setState(409);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(408);
          match(PrestoParser::OUTER);
        }
        break;
      }

      case PrestoParser::FULL: {
        enterOuterAlt(_localctx, 4);
        setState(411);
        match(PrestoParser::FULL);
        setState(413);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(412);
          match(PrestoParser::OUTER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinCriteriaContext ------------------------------------------------------------------

PrestoParser::JoinCriteriaContext::JoinCriteriaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::JoinCriteriaContext::ON() {
  return getToken(PrestoParser::ON, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::JoinCriteriaContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::JoinCriteriaContext::USING() {
  return getToken(PrestoParser::USING, 0);
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::JoinCriteriaContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::JoinCriteriaContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::JoinCriteriaContext::getRuleIndex() const {
  return PrestoParser::RuleJoinCriteria;
}

void PrestoParser::JoinCriteriaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinCriteria(this);
}

void PrestoParser::JoinCriteriaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinCriteria(this);
}


std::any PrestoParser::JoinCriteriaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinCriteria(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::JoinCriteriaContext* PrestoParser::joinCriteria() {
  JoinCriteriaContext *_localctx = _tracker.createInstance<JoinCriteriaContext>(_ctx, getState());
  enterRule(_localctx, 44, PrestoParser::RuleJoinCriteria);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(431);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ON: {
        enterOuterAlt(_localctx, 1);
        setState(417);
        match(PrestoParser::ON);
        setState(418);
        booleanExpression(0);
        break;
      }

      case PrestoParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(419);
        match(PrestoParser::USING);
        setState(420);
        match(PrestoParser::T__1);
        setState(421);
        identifier();
        setState(426);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(422);
          match(PrestoParser::T__0);
          setState(423);
          identifier();
          setState(428);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(429);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampledRelationContext ------------------------------------------------------------------

PrestoParser::SampledRelationContext::SampledRelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::AliasedRelationContext* PrestoParser::SampledRelationContext::aliasedRelation() {
  return getRuleContext<PrestoParser::AliasedRelationContext>(0);
}

tree::TerminalNode* PrestoParser::SampledRelationContext::TABLESAMPLE() {
  return getToken(PrestoParser::TABLESAMPLE, 0);
}

PrestoParser::SampleTypeContext* PrestoParser::SampledRelationContext::sampleType() {
  return getRuleContext<PrestoParser::SampleTypeContext>(0);
}

PrestoParser::ExpressionContext* PrestoParser::SampledRelationContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}


size_t PrestoParser::SampledRelationContext::getRuleIndex() const {
  return PrestoParser::RuleSampledRelation;
}

void PrestoParser::SampledRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampledRelation(this);
}

void PrestoParser::SampledRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampledRelation(this);
}


std::any PrestoParser::SampledRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSampledRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SampledRelationContext* PrestoParser::sampledRelation() {
  SampledRelationContext *_localctx = _tracker.createInstance<SampledRelationContext>(_ctx, getState());
  enterRule(_localctx, 46, PrestoParser::RuleSampledRelation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(433);
    aliasedRelation();
    setState(440);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(434);
      match(PrestoParser::TABLESAMPLE);
      setState(435);
      sampleType();
      setState(436);
      match(PrestoParser::T__1);
      setState(437);
      antlrcpp::downCast<SampledRelationContext *>(_localctx)->percentage = expression();
      setState(438);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleTypeContext ------------------------------------------------------------------

PrestoParser::SampleTypeContext::SampleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::SampleTypeContext::BERNOULLI() {
  return getToken(PrestoParser::BERNOULLI, 0);
}

tree::TerminalNode* PrestoParser::SampleTypeContext::SYSTEM() {
  return getToken(PrestoParser::SYSTEM, 0);
}

tree::TerminalNode* PrestoParser::SampleTypeContext::POISSONIZED() {
  return getToken(PrestoParser::POISSONIZED, 0);
}


size_t PrestoParser::SampleTypeContext::getRuleIndex() const {
  return PrestoParser::RuleSampleType;
}

void PrestoParser::SampleTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampleType(this);
}

void PrestoParser::SampleTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampleType(this);
}


std::any PrestoParser::SampleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSampleType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SampleTypeContext* PrestoParser::sampleType() {
  SampleTypeContext *_localctx = _tracker.createInstance<SampleTypeContext>(_ctx, getState());
  enterRule(_localctx, 48, PrestoParser::RuleSampleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(442);
    _la = _input->LA(1);
    if (!(((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & ((1ULL << (PrestoParser::SYSTEM - 139))
      | (1ULL << (PrestoParser::BERNOULLI - 139))
      | (1ULL << (PrestoParser::POISSONIZED - 139)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasedRelationContext ------------------------------------------------------------------

PrestoParser::AliasedRelationContext::AliasedRelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::RelationPrimaryContext* PrestoParser::AliasedRelationContext::relationPrimary() {
  return getRuleContext<PrestoParser::RelationPrimaryContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::AliasedRelationContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::AliasedRelationContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::ColumnAliasesContext* PrestoParser::AliasedRelationContext::columnAliases() {
  return getRuleContext<PrestoParser::ColumnAliasesContext>(0);
}


size_t PrestoParser::AliasedRelationContext::getRuleIndex() const {
  return PrestoParser::RuleAliasedRelation;
}

void PrestoParser::AliasedRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasedRelation(this);
}

void PrestoParser::AliasedRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasedRelation(this);
}


std::any PrestoParser::AliasedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitAliasedRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::AliasedRelationContext* PrestoParser::aliasedRelation() {
  AliasedRelationContext *_localctx = _tracker.createInstance<AliasedRelationContext>(_ctx, getState());
  enterRule(_localctx, 50, PrestoParser::RuleAliasedRelation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(444);
    relationPrimary();
    setState(452);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::AS) {
        setState(445);
        match(PrestoParser::AS);
      }
      setState(448);
      identifier();
      setState(450);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
      case 1: {
        setState(449);
        columnAliases();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnAliasesContext ------------------------------------------------------------------

PrestoParser::ColumnAliasesContext::ColumnAliasesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::ColumnAliasesContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::ColumnAliasesContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::ColumnAliasesContext::getRuleIndex() const {
  return PrestoParser::RuleColumnAliases;
}

void PrestoParser::ColumnAliasesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnAliases(this);
}

void PrestoParser::ColumnAliasesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnAliases(this);
}


std::any PrestoParser::ColumnAliasesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnAliases(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ColumnAliasesContext* PrestoParser::columnAliases() {
  ColumnAliasesContext *_localctx = _tracker.createInstance<ColumnAliasesContext>(_ctx, getState());
  enterRule(_localctx, 52, PrestoParser::RuleColumnAliases);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(454);
    match(PrestoParser::T__1);
    setState(455);
    identifier();
    setState(460);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(456);
      match(PrestoParser::T__0);
      setState(457);
      identifier();
      setState(462);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(463);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationPrimaryContext ------------------------------------------------------------------

PrestoParser::RelationPrimaryContext::RelationPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::RelationPrimaryContext::getRuleIndex() const {
  return PrestoParser::RuleRelationPrimary;
}

void PrestoParser::RelationPrimaryContext::copyFrom(RelationPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryRelationContext ------------------------------------------------------------------

PrestoParser::QueryContext* PrestoParser::SubqueryRelationContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::SubqueryRelationContext::SubqueryRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryRelation(this);
}
void PrestoParser::SubqueryRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryRelation(this);
}

std::any PrestoParser::SubqueryRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubqueryRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedRelationContext ------------------------------------------------------------------

PrestoParser::RelationContext* PrestoParser::ParenthesizedRelationContext::relation() {
  return getRuleContext<PrestoParser::RelationContext>(0);
}

PrestoParser::ParenthesizedRelationContext::ParenthesizedRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParenthesizedRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedRelation(this);
}
void PrestoParser::ParenthesizedRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedRelation(this);
}

std::any PrestoParser::ParenthesizedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParenthesizedRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnnestContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnnestContext::UNNEST() {
  return getToken(PrestoParser::UNNEST, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::UnnestContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::UnnestContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::UnnestContext::WITH() {
  return getToken(PrestoParser::WITH, 0);
}

tree::TerminalNode* PrestoParser::UnnestContext::ORDINALITY() {
  return getToken(PrestoParser::ORDINALITY, 0);
}

PrestoParser::UnnestContext::UnnestContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnnestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnnest(this);
}
void PrestoParser::UnnestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnnest(this);
}

std::any PrestoParser::UnnestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnnest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableNameContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::TableNameContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

PrestoParser::TableNameContext::TableNameContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::TableNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableName(this);
}
void PrestoParser::TableNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableName(this);
}

std::any PrestoParser::TableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableName(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::RelationPrimaryContext* PrestoParser::relationPrimary() {
  RelationPrimaryContext *_localctx = _tracker.createInstance<RelationPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 54, PrestoParser::RuleRelationPrimary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(489);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::TableNameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(465);
      qualifiedName();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::SubqueryRelationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(466);
      match(PrestoParser::T__1);
      setState(467);
      query();
      setState(468);
      match(PrestoParser::T__2);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::UnnestContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(470);
      match(PrestoParser::UNNEST);
      setState(471);
      match(PrestoParser::T__1);
      setState(472);
      expression();
      setState(477);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(473);
        match(PrestoParser::T__0);
        setState(474);
        expression();
        setState(479);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(480);
      match(PrestoParser::T__2);
      setState(483);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(481);
        match(PrestoParser::WITH);
        setState(482);
        match(PrestoParser::ORDINALITY);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::ParenthesizedRelationContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(485);
      match(PrestoParser::T__1);
      setState(486);
      relation(0);
      setState(487);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

PrestoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::BooleanExpressionContext* PrestoParser::ExpressionContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}


size_t PrestoParser::ExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleExpression;
}

void PrestoParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void PrestoParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any PrestoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ExpressionContext* PrestoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 56, PrestoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(491);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanExpressionContext ------------------------------------------------------------------

PrestoParser::BooleanExpressionContext::BooleanExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::BooleanExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleBooleanExpression;
}

void PrestoParser::BooleanExpressionContext::copyFrom(BooleanExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LogicalNotContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::LogicalNotContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::LogicalNotContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}

PrestoParser::LogicalNotContext::LogicalNotContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LogicalNotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalNot(this);
}
void PrestoParser::LogicalNotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalNot(this);
}

std::any PrestoParser::LogicalNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLogicalNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanDefaultContext ------------------------------------------------------------------

PrestoParser::PredicatedContext* PrestoParser::BooleanDefaultContext::predicated() {
  return getRuleContext<PrestoParser::PredicatedContext>(0);
}

PrestoParser::BooleanDefaultContext::BooleanDefaultContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BooleanDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanDefault(this);
}
void PrestoParser::BooleanDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanDefault(this);
}

std::any PrestoParser::BooleanDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalBinaryContext ------------------------------------------------------------------

std::vector<PrestoParser::BooleanExpressionContext *> PrestoParser::LogicalBinaryContext::booleanExpression() {
  return getRuleContexts<PrestoParser::BooleanExpressionContext>();
}

PrestoParser::BooleanExpressionContext* PrestoParser::LogicalBinaryContext::booleanExpression(size_t i) {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::LogicalBinaryContext::AND() {
  return getToken(PrestoParser::AND, 0);
}

tree::TerminalNode* PrestoParser::LogicalBinaryContext::OR() {
  return getToken(PrestoParser::OR, 0);
}

PrestoParser::LogicalBinaryContext::LogicalBinaryContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LogicalBinaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalBinary(this);
}
void PrestoParser::LogicalBinaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalBinary(this);
}

std::any PrestoParser::LogicalBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLogicalBinary(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BooleanExpressionContext* PrestoParser::booleanExpression() {
   return booleanExpression(0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::booleanExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::BooleanExpressionContext *_localctx = _tracker.createInstance<BooleanExpressionContext>(_ctx, parentState);
  PrestoParser::BooleanExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 58;
  enterRecursionRule(_localctx, 58, PrestoParser::RuleBooleanExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(497);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::PLUS:
      case PrestoParser::MINUS:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<BooleanDefaultContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(494);
        predicated();
        break;
      }

      case PrestoParser::NOT: {
        _localctx = _tracker.createInstance<LogicalNotContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(495);
        match(PrestoParser::NOT);
        setState(496);
        booleanExpression(3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(507);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(505);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(499);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(500);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(PrestoParser::AND);
          setState(501);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(502);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(503);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(PrestoParser::OR);
          setState(504);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(509);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicatedContext ------------------------------------------------------------------

PrestoParser::PredicatedContext::PredicatedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ValueExpressionContext* PrestoParser::PredicatedContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::PredicateContext* PrestoParser::PredicatedContext::predicate() {
  return getRuleContext<PrestoParser::PredicateContext>(0);
}


size_t PrestoParser::PredicatedContext::getRuleIndex() const {
  return PrestoParser::RulePredicated;
}

void PrestoParser::PredicatedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicated(this);
}

void PrestoParser::PredicatedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicated(this);
}


std::any PrestoParser::PredicatedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPredicated(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PredicatedContext* PrestoParser::predicated() {
  PredicatedContext *_localctx = _tracker.createInstance<PredicatedContext>(_ctx, getState());
  enterRule(_localctx, 60, PrestoParser::RulePredicated);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(510);
    valueExpression(0);
    setState(512);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(511);
      predicate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

PrestoParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::PredicateContext::getRuleIndex() const {
  return PrestoParser::RulePredicate;
}

void PrestoParser::PredicateContext::copyFrom(PredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ComparisonContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext* PrestoParser::ComparisonContext::comparisonOperator() {
  return getRuleContext<PrestoParser::ComparisonOperatorContext>(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::ComparisonContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::ComparisonContext::ComparisonContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void PrestoParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any PrestoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LikeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::LikeContext::LIKE() {
  return getToken(PrestoParser::LIKE, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::LikeContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::LikeContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::LikeContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

tree::TerminalNode* PrestoParser::LikeContext::ESCAPE() {
  return getToken(PrestoParser::ESCAPE, 0);
}

PrestoParser::LikeContext::LikeContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::LikeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLike(this);
}
void PrestoParser::LikeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLike(this);
}

std::any PrestoParser::LikeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLike(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InSubqueryContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

PrestoParser::QueryContext* PrestoParser::InSubqueryContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

tree::TerminalNode* PrestoParser::InSubqueryContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::InSubqueryContext::InSubqueryContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::InSubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInSubquery(this);
}
void PrestoParser::InSubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInSubquery(this);
}

std::any PrestoParser::InSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DistinctFromContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DistinctFromContext::IS() {
  return getToken(PrestoParser::IS, 0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::DISTINCT() {
  return getToken(PrestoParser::DISTINCT, 0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::DistinctFromContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::DistinctFromContext::DistinctFromContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::DistinctFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDistinctFrom(this);
}
void PrestoParser::DistinctFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDistinctFrom(this);
}

std::any PrestoParser::DistinctFromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDistinctFrom(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InListContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InListContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::InListContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::InListContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::InListContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::InListContext::InListContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::InListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInList(this);
}
void PrestoParser::InListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInList(this);
}

std::any PrestoParser::InListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInList(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NullPredicateContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NullPredicateContext::IS() {
  return getToken(PrestoParser::IS, 0);
}

tree::TerminalNode* PrestoParser::NullPredicateContext::NULLTOKEN() {
  return getToken(PrestoParser::NULLTOKEN, 0);
}

tree::TerminalNode* PrestoParser::NullPredicateContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::NullPredicateContext::NullPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::NullPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullPredicate(this);
}
void PrestoParser::NullPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullPredicate(this);
}

std::any PrestoParser::NullPredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNullPredicate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BetweenContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BetweenContext::BETWEEN() {
  return getToken(PrestoParser::BETWEEN, 0);
}

tree::TerminalNode* PrestoParser::BetweenContext::AND() {
  return getToken(PrestoParser::AND, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::BetweenContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::BetweenContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::BetweenContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::BetweenContext::BetweenContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::BetweenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBetween(this);
}
void PrestoParser::BetweenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBetween(this);
}

std::any PrestoParser::BetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QuantifiedComparisonContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext* PrestoParser::QuantifiedComparisonContext::comparisonOperator() {
  return getRuleContext<PrestoParser::ComparisonOperatorContext>(0);
}

PrestoParser::ComparisonQuantifierContext* PrestoParser::QuantifiedComparisonContext::comparisonQuantifier() {
  return getRuleContext<PrestoParser::ComparisonQuantifierContext>(0);
}

PrestoParser::QueryContext* PrestoParser::QuantifiedComparisonContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::QuantifiedComparisonContext::QuantifiedComparisonContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::QuantifiedComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantifiedComparison(this);
}
void PrestoParser::QuantifiedComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantifiedComparison(this);
}

std::any PrestoParser::QuantifiedComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuantifiedComparison(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::PredicateContext* PrestoParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 62, PrestoParser::RulePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(575);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::ComparisonContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(514);
      comparisonOperator();
      setState(515);
      antlrcpp::downCast<ComparisonContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::QuantifiedComparisonContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(517);
      comparisonOperator();
      setState(518);
      comparisonQuantifier();
      setState(519);
      match(PrestoParser::T__1);
      setState(520);
      query();
      setState(521);
      match(PrestoParser::T__2);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::BetweenContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(524);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(523);
        match(PrestoParser::NOT);
      }
      setState(526);
      match(PrestoParser::BETWEEN);
      setState(527);
      antlrcpp::downCast<BetweenContext *>(_localctx)->lower = valueExpression(0);
      setState(528);
      match(PrestoParser::AND);
      setState(529);
      antlrcpp::downCast<BetweenContext *>(_localctx)->upper = valueExpression(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::InListContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(532);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(531);
        match(PrestoParser::NOT);
      }
      setState(534);
      match(PrestoParser::IN);
      setState(535);
      match(PrestoParser::T__1);
      setState(536);
      expression();
      setState(541);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(537);
        match(PrestoParser::T__0);
        setState(538);
        expression();
        setState(543);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(544);
      match(PrestoParser::T__2);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<PrestoParser::InSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(547);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(546);
        match(PrestoParser::NOT);
      }
      setState(549);
      match(PrestoParser::IN);
      setState(550);
      match(PrestoParser::T__1);
      setState(551);
      query();
      setState(552);
      match(PrestoParser::T__2);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PrestoParser::LikeContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(555);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(554);
        match(PrestoParser::NOT);
      }
      setState(557);
      match(PrestoParser::LIKE);
      setState(558);
      antlrcpp::downCast<LikeContext *>(_localctx)->pattern = valueExpression(0);
      setState(561);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
      case 1: {
        setState(559);
        match(PrestoParser::ESCAPE);
        setState(560);
        antlrcpp::downCast<LikeContext *>(_localctx)->escape = valueExpression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<PrestoParser::NullPredicateContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(563);
      match(PrestoParser::IS);
      setState(565);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(564);
        match(PrestoParser::NOT);
      }
      setState(567);
      match(PrestoParser::NULLTOKEN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<PrestoParser::DistinctFromContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(568);
      match(PrestoParser::IS);
      setState(570);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(569);
        match(PrestoParser::NOT);
      }
      setState(572);
      match(PrestoParser::DISTINCT);
      setState(573);
      match(PrestoParser::FROM);
      setState(574);
      antlrcpp::downCast<DistinctFromContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext::ValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::ValueExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleValueExpression;
}

void PrestoParser::ValueExpressionContext::copyFrom(ValueExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ValueExpressionDefaultContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::ValueExpressionDefaultContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::ValueExpressionDefaultContext::ValueExpressionDefaultContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ValueExpressionDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValueExpressionDefault(this);
}
void PrestoParser::ValueExpressionDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValueExpressionDefault(this);
}

std::any PrestoParser::ValueExpressionDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitValueExpressionDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConcatenationContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ConcatenationContext::CONCAT() {
  return getToken(PrestoParser::CONCAT, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::ConcatenationContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::ConcatenationContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

PrestoParser::ConcatenationContext::ConcatenationContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ConcatenationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcatenation(this);
}
void PrestoParser::ConcatenationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcatenation(this);
}

std::any PrestoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticBinaryContext ------------------------------------------------------------------

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::ArithmeticBinaryContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::ArithmeticBinaryContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::SLASH() {
  return getToken(PrestoParser::SLASH, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::PERCENT() {
  return getToken(PrestoParser::PERCENT, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}

PrestoParser::ArithmeticBinaryContext::ArithmeticBinaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArithmeticBinaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticBinary(this);
}
void PrestoParser::ArithmeticBinaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticBinary(this);
}

std::any PrestoParser::ArithmeticBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArithmeticBinary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticUnaryContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext* PrestoParser::ArithmeticUnaryContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::ArithmeticUnaryContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticUnaryContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

PrestoParser::ArithmeticUnaryContext::ArithmeticUnaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArithmeticUnaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticUnary(this);
}
void PrestoParser::ArithmeticUnaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticUnary(this);
}

std::any PrestoParser::ArithmeticUnaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArithmeticUnary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AtTimeZoneContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext* PrestoParser::AtTimeZoneContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::AtTimeZoneContext::AT() {
  return getToken(PrestoParser::AT, 0);
}

PrestoParser::TimeZoneSpecifierContext* PrestoParser::AtTimeZoneContext::timeZoneSpecifier() {
  return getRuleContext<PrestoParser::TimeZoneSpecifierContext>(0);
}

PrestoParser::AtTimeZoneContext::AtTimeZoneContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::AtTimeZoneContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtTimeZone(this);
}
void PrestoParser::AtTimeZoneContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtTimeZone(this);
}

std::any PrestoParser::AtTimeZoneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitAtTimeZone(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ValueExpressionContext* PrestoParser::valueExpression() {
   return valueExpression(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::valueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::ValueExpressionContext *_localctx = _tracker.createInstance<ValueExpressionContext>(_ctx, parentState);
  PrestoParser::ValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, PrestoParser::RuleValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(581);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<ValueExpressionDefaultContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(578);
        primaryExpression(0);
        break;
      }

      case PrestoParser::PLUS:
      case PrestoParser::MINUS: {
        _localctx = _tracker.createInstance<ArithmeticUnaryContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(579);
        antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::PLUS

        || _la == PrestoParser::MINUS)) {
          antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(580);
        valueExpression(4);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(597);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(595);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(583);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(584);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 194) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 194)) & ((1ULL << (PrestoParser::ASTERISK - 194))
            | (1ULL << (PrestoParser::SLASH - 194))
            | (1ULL << (PrestoParser::PERCENT - 194)))) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(585);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(586);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(587);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == PrestoParser::PLUS

          || _la == PrestoParser::MINUS)) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(588);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(3);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ConcatenationContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(589);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(590);
          match(PrestoParser::CONCAT);
          setState(591);
          antlrcpp::downCast<ConcatenationContext *>(_localctx)->right = valueExpression(2);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<AtTimeZoneContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(592);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(593);
          match(PrestoParser::AT);
          setState(594);
          timeZoneSpecifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(599);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::PrimaryExpressionContext::getRuleIndex() const {
  return PrestoParser::RulePrimaryExpression;
}

void PrestoParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DereferenceContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::DereferenceContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::DereferenceContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::DereferenceContext::DereferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::DereferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDereference(this);
}
void PrestoParser::DereferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDereference(this);
}

std::any PrestoParser::DereferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDereference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeConstructorContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::TypeConstructorContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::TypeConstructorContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

tree::TerminalNode* PrestoParser::TypeConstructorContext::DOUBLE_PRECISION() {
  return getToken(PrestoParser::DOUBLE_PRECISION, 0);
}

PrestoParser::TypeConstructorContext::TypeConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::TypeConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeConstructor(this);
}
void PrestoParser::TypeConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeConstructor(this);
}

std::any PrestoParser::TypeConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTypeConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SpecialDateTimeFunctionContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_DATE() {
  return getToken(PrestoParser::CURRENT_DATE, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_TIME() {
  return getToken(PrestoParser::CURRENT_TIME, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_TIMESTAMP() {
  return getToken(PrestoParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::LOCALTIME() {
  return getToken(PrestoParser::LOCALTIME, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::LOCALTIMESTAMP() {
  return getToken(PrestoParser::LOCALTIMESTAMP, 0);
}

PrestoParser::SpecialDateTimeFunctionContext::SpecialDateTimeFunctionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SpecialDateTimeFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialDateTimeFunction(this);
}
void PrestoParser::SpecialDateTimeFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialDateTimeFunction(this);
}

std::any PrestoParser::SpecialDateTimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSpecialDateTimeFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubstringContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SubstringContext::SUBSTRING() {
  return getToken(PrestoParser::SUBSTRING, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::SubstringContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::SubstringContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::SubstringContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

tree::TerminalNode* PrestoParser::SubstringContext::FOR() {
  return getToken(PrestoParser::FOR, 0);
}

PrestoParser::SubstringContext::SubstringContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubstringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstring(this);
}
void PrestoParser::SubstringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstring(this);
}

std::any PrestoParser::SubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CastContext::CAST() {
  return getToken(PrestoParser::CAST, 0);
}

PrestoParser::ExpressionContext* PrestoParser::CastContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::CastContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::TypeContext* PrestoParser::CastContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}

tree::TerminalNode* PrestoParser::CastContext::TRY_CAST() {
  return getToken(PrestoParser::TRY_CAST, 0);
}

PrestoParser::CastContext::CastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::CastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCast(this);
}
void PrestoParser::CastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCast(this);
}

std::any PrestoParser::CastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaContext ------------------------------------------------------------------

std::vector<PrestoParser::IdentifierContext *> PrestoParser::LambdaContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::LambdaContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}

PrestoParser::ExpressionContext* PrestoParser::LambdaContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::LambdaContext::LambdaContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LambdaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambda(this);
}
void PrestoParser::LambdaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambda(this);
}

std::any PrestoParser::LambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpression(this);
}
void PrestoParser::ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpression(this);
}

std::any PrestoParser::ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParameterContext ------------------------------------------------------------------

PrestoParser::ParameterContext::ParameterContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}
void PrestoParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

std::any PrestoParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NormalizeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NormalizeContext::NORMALIZE() {
  return getToken(PrestoParser::NORMALIZE, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::NormalizeContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::NormalFormContext* PrestoParser::NormalizeContext::normalForm() {
  return getRuleContext<PrestoParser::NormalFormContext>(0);
}

PrestoParser::NormalizeContext::NormalizeContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NormalizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalize(this);
}
void PrestoParser::NormalizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalize(this);
}

std::any PrestoParser::NormalizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNormalize(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntervalLiteralContext ------------------------------------------------------------------

PrestoParser::IntervalContext* PrestoParser::IntervalLiteralContext::interval() {
  return getRuleContext<PrestoParser::IntervalContext>(0);
}

PrestoParser::IntervalLiteralContext::IntervalLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::IntervalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalLiteral(this);
}
void PrestoParser::IntervalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalLiteral(this);
}

std::any PrestoParser::IntervalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntervalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumericLiteralContext ------------------------------------------------------------------

PrestoParser::NumberContext* PrestoParser::NumericLiteralContext::number() {
  return getRuleContext<PrestoParser::NumberContext>(0);
}

PrestoParser::NumericLiteralContext::NumericLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}
void PrestoParser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

std::any PrestoParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanLiteralContext ------------------------------------------------------------------

PrestoParser::BooleanValueContext* PrestoParser::BooleanLiteralContext::booleanValue() {
  return getRuleContext<PrestoParser::BooleanValueContext>(0);
}

PrestoParser::BooleanLiteralContext::BooleanLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}
void PrestoParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

std::any PrestoParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleCaseContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SimpleCaseContext::CASE() {
  return getToken(PrestoParser::CASE, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::SimpleCaseContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::SimpleCaseContext::END() {
  return getToken(PrestoParser::END, 0);
}

std::vector<PrestoParser::WhenClauseContext *> PrestoParser::SimpleCaseContext::whenClause() {
  return getRuleContexts<PrestoParser::WhenClauseContext>();
}

PrestoParser::WhenClauseContext* PrestoParser::SimpleCaseContext::whenClause(size_t i) {
  return getRuleContext<PrestoParser::WhenClauseContext>(i);
}

tree::TerminalNode* PrestoParser::SimpleCaseContext::ELSE() {
  return getToken(PrestoParser::ELSE, 0);
}

PrestoParser::ExpressionContext* PrestoParser::SimpleCaseContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::SimpleCaseContext::SimpleCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SimpleCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleCase(this);
}
void PrestoParser::SimpleCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleCase(this);
}

std::any PrestoParser::SimpleCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSimpleCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnReferenceContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::ColumnReferenceContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ColumnReferenceContext::ColumnReferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ColumnReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnReference(this);
}
void PrestoParser::ColumnReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnReference(this);
}

std::any PrestoParser::ColumnReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NullLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NullLiteralContext::NULLTOKEN() {
  return getToken(PrestoParser::NULLTOKEN, 0);
}

PrestoParser::NullLiteralContext::NullLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NullLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullLiteral(this);
}
void PrestoParser::NullLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullLiteral(this);
}

std::any PrestoParser::NullLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNullLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RowConstructorContext ------------------------------------------------------------------

std::vector<PrestoParser::ExpressionContext *> PrestoParser::RowConstructorContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::RowConstructorContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::RowConstructorContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

PrestoParser::RowConstructorContext::RowConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::RowConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRowConstructor(this);
}
void PrestoParser::RowConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRowConstructor(this);
}

std::any PrestoParser::RowConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRowConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::SubscriptContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::SubscriptContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::SubscriptContext::SubscriptContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}
void PrestoParser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}

std::any PrestoParser::SubscriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubscript(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubqueryExpressionContext ------------------------------------------------------------------

PrestoParser::QueryContext* PrestoParser::SubqueryExpressionContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::SubqueryExpressionContext::SubqueryExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryExpression(this);
}
void PrestoParser::SubqueryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryExpression(this);
}

std::any PrestoParser::SubqueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubqueryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BinaryLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BinaryLiteralContext::BINARY_LITERAL() {
  return getToken(PrestoParser::BINARY_LITERAL, 0);
}

PrestoParser::BinaryLiteralContext::BinaryLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BinaryLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryLiteral(this);
}
void PrestoParser::BinaryLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryLiteral(this);
}

std::any PrestoParser::BinaryLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBinaryLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExtractContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExtractContext::EXTRACT() {
  return getToken(PrestoParser::EXTRACT, 0);
}

PrestoParser::IdentifierContext* PrestoParser::ExtractContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::ExtractContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::ExtractContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::ExtractContext::ExtractContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExtractContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtract(this);
}
void PrestoParser::ExtractContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtract(this);
}

std::any PrestoParser::ExtractContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExtract(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::StringLiteralContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

PrestoParser::StringLiteralContext::StringLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}
void PrestoParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

std::any PrestoParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayConstructorContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ArrayConstructorContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::ArrayConstructorContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::ArrayConstructorContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::ArrayConstructorContext::ArrayConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArrayConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayConstructor(this);
}
void PrestoParser::ArrayConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayConstructor(this);
}

std::any PrestoParser::ArrayConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArrayConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionCallContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::FunctionCallContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::FunctionCallContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

PrestoParser::FilterContext* PrestoParser::FunctionCallContext::filter() {
  return getRuleContext<PrestoParser::FilterContext>(0);
}

PrestoParser::OverContext* PrestoParser::FunctionCallContext::over() {
  return getRuleContext<PrestoParser::OverContext>(0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::FunctionCallContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::FunctionCallContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::FunctionCallContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

PrestoParser::FunctionCallContext::FunctionCallContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::FunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionCall(this);
}
void PrestoParser::FunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionCall(this);
}

std::any PrestoParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExistsContext::EXISTS() {
  return getToken(PrestoParser::EXISTS, 0);
}

PrestoParser::QueryContext* PrestoParser::ExistsContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::ExistsContext::ExistsContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExistsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExists(this);
}
void PrestoParser::ExistsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExists(this);
}

std::any PrestoParser::ExistsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExists(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositionContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::PositionContext::POSITION() {
  return getToken(PrestoParser::POSITION, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::PositionContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::PositionContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::PositionContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

PrestoParser::PositionContext::PositionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::PositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPosition(this);
}
void PrestoParser::PositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPosition(this);
}

std::any PrestoParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SearchedCaseContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SearchedCaseContext::CASE() {
  return getToken(PrestoParser::CASE, 0);
}

tree::TerminalNode* PrestoParser::SearchedCaseContext::END() {
  return getToken(PrestoParser::END, 0);
}

std::vector<PrestoParser::WhenClauseContext *> PrestoParser::SearchedCaseContext::whenClause() {
  return getRuleContexts<PrestoParser::WhenClauseContext>();
}

PrestoParser::WhenClauseContext* PrestoParser::SearchedCaseContext::whenClause(size_t i) {
  return getRuleContext<PrestoParser::WhenClauseContext>(i);
}

tree::TerminalNode* PrestoParser::SearchedCaseContext::ELSE() {
  return getToken(PrestoParser::ELSE, 0);
}

PrestoParser::ExpressionContext* PrestoParser::SearchedCaseContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::SearchedCaseContext::SearchedCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SearchedCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearchedCase(this);
}
void PrestoParser::SearchedCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearchedCase(this);
}

std::any PrestoParser::SearchedCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSearchedCase(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PrimaryExpressionContext* PrestoParser::primaryExpression() {
   return primaryExpression(0);
}

PrestoParser::PrimaryExpressionContext* PrestoParser::primaryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, parentState);
  PrestoParser::PrimaryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 66;
  enterRecursionRule(_localctx, 66, PrestoParser::RulePrimaryExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(809);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NullLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(601);
      match(PrestoParser::NULLTOKEN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<IntervalLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(602);
      interval();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TypeConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(603);
      identifier();
      setState(604);
      match(PrestoParser::STRING);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TypeConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(606);
      match(PrestoParser::DOUBLE_PRECISION);
      setState(607);
      match(PrestoParser::STRING);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<NumericLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(608);
      number();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<BooleanLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(609);
      booleanValue();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<StringLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(610);
      match(PrestoParser::STRING);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<BinaryLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(611);
      match(PrestoParser::BINARY_LITERAL);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ParameterContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(612);
      match(PrestoParser::T__4);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<PositionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(613);
      match(PrestoParser::POSITION);
      setState(614);
      match(PrestoParser::T__1);
      setState(615);
      valueExpression(0);
      setState(616);
      match(PrestoParser::IN);
      setState(617);
      valueExpression(0);
      setState(618);
      match(PrestoParser::T__2);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(620);
      match(PrestoParser::T__1);
      setState(621);
      expression();
      setState(624); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(622);
        match(PrestoParser::T__0);
        setState(623);
        expression();
        setState(626); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::T__0);
      setState(628);
      match(PrestoParser::T__2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(630);
      match(PrestoParser::ROW);
      setState(631);
      match(PrestoParser::T__1);
      setState(632);
      expression();
      setState(637);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(633);
        match(PrestoParser::T__0);
        setState(634);
        expression();
        setState(639);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(640);
      match(PrestoParser::T__2);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(642);
      qualifiedName();
      setState(643);
      match(PrestoParser::T__1);
      setState(644);
      match(PrestoParser::ASTERISK);
      setState(645);
      match(PrestoParser::T__2);
      setState(647);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
      case 1: {
        setState(646);
        filter();
        break;
      }

      default:
        break;
      }
      setState(650);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(649);
        over();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(652);
      qualifiedName();
      setState(653);
      match(PrestoParser::T__1);
      setState(665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::DISTINCT)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(655);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
        case 1: {
          setState(654);
          setQuantifier();
          break;
        }

        default:
          break;
        }
        setState(657);
        expression();
        setState(662);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(658);
          match(PrestoParser::T__0);
          setState(659);
          expression();
          setState(664);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(667);
      match(PrestoParser::T__2);
      setState(669);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(668);
        filter();
        break;
      }

      default:
        break;
      }
      setState(672);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(671);
        over();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(674);
      identifier();
      setState(675);
      match(PrestoParser::T__5);
      setState(676);
      expression();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(678);
      match(PrestoParser::T__1);
      setState(679);
      identifier();
      setState(684);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(680);
        match(PrestoParser::T__0);
        setState(681);
        identifier();
        setState(686);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(687);
      match(PrestoParser::T__2);
      setState(688);
      match(PrestoParser::T__5);
      setState(689);
      expression();
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<SubqueryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(691);
      match(PrestoParser::T__1);
      setState(692);
      query();
      setState(693);
      match(PrestoParser::T__2);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ExistsContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(695);
      match(PrestoParser::EXISTS);
      setState(696);
      match(PrestoParser::T__1);
      setState(697);
      query();
      setState(698);
      match(PrestoParser::T__2);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<SimpleCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(700);
      match(PrestoParser::CASE);
      setState(701);
      valueExpression(0);
      setState(703); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(702);
        whenClause();
        setState(705); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::WHEN);
      setState(709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::ELSE) {
        setState(707);
        match(PrestoParser::ELSE);
        setState(708);
        antlrcpp::downCast<SimpleCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(711);
      match(PrestoParser::END);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<SearchedCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(713);
      match(PrestoParser::CASE);
      setState(715); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(714);
        whenClause();
        setState(717); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::WHEN);
      setState(721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::ELSE) {
        setState(719);
        match(PrestoParser::ELSE);
        setState(720);
        antlrcpp::downCast<SearchedCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(723);
      match(PrestoParser::END);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(725);
      match(PrestoParser::CAST);
      setState(726);
      match(PrestoParser::T__1);
      setState(727);
      expression();
      setState(728);
      match(PrestoParser::AS);
      setState(729);
      type(0);
      setState(730);
      match(PrestoParser::T__2);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(732);
      match(PrestoParser::TRY_CAST);
      setState(733);
      match(PrestoParser::T__1);
      setState(734);
      expression();
      setState(735);
      match(PrestoParser::AS);
      setState(736);
      type(0);
      setState(737);
      match(PrestoParser::T__2);
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<ArrayConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(739);
      match(PrestoParser::ARRAY);
      setState(740);
      match(PrestoParser::T__6);
      setState(749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(741);
        expression();
        setState(746);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(742);
          match(PrestoParser::T__0);
          setState(743);
          expression();
          setState(748);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(751);
      match(PrestoParser::T__7);
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<ColumnReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(752);
      identifier();
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(753);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_DATE);
      break;
    }

    case 26: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(754);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_TIME);
      setState(758);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
      case 1: {
        setState(755);
        match(PrestoParser::T__1);
        setState(756);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(757);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 27: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(760);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_TIMESTAMP);
      setState(764);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
      case 1: {
        setState(761);
        match(PrestoParser::T__1);
        setState(762);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(763);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 28: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(766);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::LOCALTIME);
      setState(770);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(767);
        match(PrestoParser::T__1);
        setState(768);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(769);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 29: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(772);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::LOCALTIMESTAMP);
      setState(776);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
      case 1: {
        setState(773);
        match(PrestoParser::T__1);
        setState(774);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(775);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 30: {
      _localctx = _tracker.createInstance<SubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(778);
      match(PrestoParser::SUBSTRING);
      setState(779);
      match(PrestoParser::T__1);
      setState(780);
      valueExpression(0);
      setState(781);
      match(PrestoParser::FROM);
      setState(782);
      valueExpression(0);
      setState(785);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::FOR) {
        setState(783);
        match(PrestoParser::FOR);
        setState(784);
        valueExpression(0);
      }
      setState(787);
      match(PrestoParser::T__2);
      break;
    }

    case 31: {
      _localctx = _tracker.createInstance<NormalizeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(789);
      match(PrestoParser::NORMALIZE);
      setState(790);
      match(PrestoParser::T__1);
      setState(791);
      valueExpression(0);
      setState(794);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::T__0) {
        setState(792);
        match(PrestoParser::T__0);
        setState(793);
        normalForm();
      }
      setState(796);
      match(PrestoParser::T__2);
      break;
    }

    case 32: {
      _localctx = _tracker.createInstance<ExtractContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(798);
      match(PrestoParser::EXTRACT);
      setState(799);
      match(PrestoParser::T__1);
      setState(800);
      identifier();
      setState(801);
      match(PrestoParser::FROM);
      setState(802);
      valueExpression(0);
      setState(803);
      match(PrestoParser::T__2);
      break;
    }

    case 33: {
      _localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(805);
      match(PrestoParser::T__1);
      setState(806);
      expression();
      setState(807);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(821);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(819);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SubscriptContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->value = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(811);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(812);
          match(PrestoParser::T__6);
          setState(813);
          antlrcpp::downCast<SubscriptContext *>(_localctx)->index = valueExpression(0);
          setState(814);
          match(PrestoParser::T__7);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DereferenceContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->base = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(816);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(817);
          match(PrestoParser::T__3);
          setState(818);
          antlrcpp::downCast<DereferenceContext *>(_localctx)->fieldName = identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(823);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TimeZoneSpecifierContext ------------------------------------------------------------------

PrestoParser::TimeZoneSpecifierContext::TimeZoneSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::TimeZoneSpecifierContext::getRuleIndex() const {
  return PrestoParser::RuleTimeZoneSpecifier;
}

void PrestoParser::TimeZoneSpecifierContext::copyFrom(TimeZoneSpecifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TimeZoneIntervalContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TimeZoneIntervalContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneIntervalContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

PrestoParser::IntervalContext* PrestoParser::TimeZoneIntervalContext::interval() {
  return getRuleContext<PrestoParser::IntervalContext>(0);
}

PrestoParser::TimeZoneIntervalContext::TimeZoneIntervalContext(TimeZoneSpecifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::TimeZoneIntervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeZoneInterval(this);
}
void PrestoParser::TimeZoneIntervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeZoneInterval(this);
}

std::any PrestoParser::TimeZoneIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTimeZoneInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TimeZoneStringContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TimeZoneStringContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneStringContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneStringContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

PrestoParser::TimeZoneStringContext::TimeZoneStringContext(TimeZoneSpecifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::TimeZoneStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeZoneString(this);
}
void PrestoParser::TimeZoneStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeZoneString(this);
}

std::any PrestoParser::TimeZoneStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTimeZoneString(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::TimeZoneSpecifierContext* PrestoParser::timeZoneSpecifier() {
  TimeZoneSpecifierContext *_localctx = _tracker.createInstance<TimeZoneSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 68, PrestoParser::RuleTimeZoneSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(830);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::TimeZoneIntervalContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(824);
      match(PrestoParser::TIME);
      setState(825);
      match(PrestoParser::ZONE);
      setState(826);
      interval();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::TimeZoneStringContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(827);
      match(PrestoParser::TIME);
      setState(828);
      match(PrestoParser::ZONE);
      setState(829);
      match(PrestoParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::EQ() {
  return getToken(PrestoParser::EQ, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::NEQ() {
  return getToken(PrestoParser::NEQ, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::LT() {
  return getToken(PrestoParser::LT, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::LTE() {
  return getToken(PrestoParser::LTE, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::GT() {
  return getToken(PrestoParser::GT, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::GTE() {
  return getToken(PrestoParser::GTE, 0);
}


size_t PrestoParser::ComparisonOperatorContext::getRuleIndex() const {
  return PrestoParser::RuleComparisonOperator;
}

void PrestoParser::ComparisonOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonOperator(this);
}

void PrestoParser::ComparisonOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonOperator(this);
}


std::any PrestoParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ComparisonOperatorContext* PrestoParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 70, PrestoParser::RuleComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(832);
    _la = _input->LA(1);
    if (!(((((_la - 186) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 186)) & ((1ULL << (PrestoParser::EQ - 186))
      | (1ULL << (PrestoParser::NEQ - 186))
      | (1ULL << (PrestoParser::LT - 186))
      | (1ULL << (PrestoParser::LTE - 186))
      | (1ULL << (PrestoParser::GT - 186))
      | (1ULL << (PrestoParser::GTE - 186)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonQuantifierContext ------------------------------------------------------------------

PrestoParser::ComparisonQuantifierContext::ComparisonQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::SOME() {
  return getToken(PrestoParser::SOME, 0);
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::ANY() {
  return getToken(PrestoParser::ANY, 0);
}


size_t PrestoParser::ComparisonQuantifierContext::getRuleIndex() const {
  return PrestoParser::RuleComparisonQuantifier;
}

void PrestoParser::ComparisonQuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonQuantifier(this);
}

void PrestoParser::ComparisonQuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonQuantifier(this);
}


std::any PrestoParser::ComparisonQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparisonQuantifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ComparisonQuantifierContext* PrestoParser::comparisonQuantifier() {
  ComparisonQuantifierContext *_localctx = _tracker.createInstance<ComparisonQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 72, PrestoParser::RuleComparisonQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << PrestoParser::ALL)
      | (1ULL << PrestoParser::SOME)
      | (1ULL << PrestoParser::ANY))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanValueContext ------------------------------------------------------------------

PrestoParser::BooleanValueContext::BooleanValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::BooleanValueContext::TRUE() {
  return getToken(PrestoParser::TRUE, 0);
}

tree::TerminalNode* PrestoParser::BooleanValueContext::FALSE() {
  return getToken(PrestoParser::FALSE, 0);
}


size_t PrestoParser::BooleanValueContext::getRuleIndex() const {
  return PrestoParser::RuleBooleanValue;
}

void PrestoParser::BooleanValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanValue(this);
}

void PrestoParser::BooleanValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanValue(this);
}


std::any PrestoParser::BooleanValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanValue(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BooleanValueContext* PrestoParser::booleanValue() {
  BooleanValueContext *_localctx = _tracker.createInstance<BooleanValueContext>(_ctx, getState());
  enterRule(_localctx, 74, PrestoParser::RuleBooleanValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(836);
    _la = _input->LA(1);
    if (!(_la == PrestoParser::TRUE

    || _la == PrestoParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

PrestoParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::IntervalContext::INTERVAL() {
  return getToken(PrestoParser::INTERVAL, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

std::vector<PrestoParser::IntervalFieldContext *> PrestoParser::IntervalContext::intervalField() {
  return getRuleContexts<PrestoParser::IntervalFieldContext>();
}

PrestoParser::IntervalFieldContext* PrestoParser::IntervalContext::intervalField(size_t i) {
  return getRuleContext<PrestoParser::IntervalFieldContext>(i);
}

tree::TerminalNode* PrestoParser::IntervalContext::TO() {
  return getToken(PrestoParser::TO, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}


size_t PrestoParser::IntervalContext::getRuleIndex() const {
  return PrestoParser::RuleInterval;
}

void PrestoParser::IntervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval(this);
}

void PrestoParser::IntervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval(this);
}


std::any PrestoParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::IntervalContext* PrestoParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 76, PrestoParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(838);
    match(PrestoParser::INTERVAL);
    setState(840);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::PLUS

    || _la == PrestoParser::MINUS) {
      setState(839);
      antlrcpp::downCast<IntervalContext *>(_localctx)->sign = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::PLUS

      || _la == PrestoParser::MINUS)) {
        antlrcpp::downCast<IntervalContext *>(_localctx)->sign = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(842);
    match(PrestoParser::STRING);
    setState(843);
    antlrcpp::downCast<IntervalContext *>(_localctx)->from = intervalField();
    setState(846);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(844);
      match(PrestoParser::TO);
      setState(845);
      antlrcpp::downCast<IntervalContext *>(_localctx)->to = intervalField();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalFieldContext ------------------------------------------------------------------

PrestoParser::IntervalFieldContext::IntervalFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::YEAR() {
  return getToken(PrestoParser::YEAR, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::MONTH() {
  return getToken(PrestoParser::MONTH, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::DAY() {
  return getToken(PrestoParser::DAY, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::HOUR() {
  return getToken(PrestoParser::HOUR, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::MINUTE() {
  return getToken(PrestoParser::MINUTE, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::SECOND() {
  return getToken(PrestoParser::SECOND, 0);
}


size_t PrestoParser::IntervalFieldContext::getRuleIndex() const {
  return PrestoParser::RuleIntervalField;
}

void PrestoParser::IntervalFieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalField(this);
}

void PrestoParser::IntervalFieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalField(this);
}


std::any PrestoParser::IntervalFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntervalField(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::IntervalFieldContext* PrestoParser::intervalField() {
  IntervalFieldContext *_localctx = _tracker.createInstance<IntervalFieldContext>(_ctx, getState());
  enterRule(_localctx, 78, PrestoParser::RuleIntervalField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(848);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << PrestoParser::YEAR)
      | (1ULL << PrestoParser::MONTH)
      | (1ULL << PrestoParser::DAY)
      | (1ULL << PrestoParser::HOUR)
      | (1ULL << PrestoParser::MINUTE)
      | (1ULL << PrestoParser::SECOND))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

PrestoParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::TypeContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::LT() {
  return getToken(PrestoParser::LT, 0);
}

std::vector<PrestoParser::TypeContext *> PrestoParser::TypeContext::type() {
  return getRuleContexts<PrestoParser::TypeContext>();
}

PrestoParser::TypeContext* PrestoParser::TypeContext::type(size_t i) {
  return getRuleContext<PrestoParser::TypeContext>(i);
}

tree::TerminalNode* PrestoParser::TypeContext::GT() {
  return getToken(PrestoParser::GT, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::MAP() {
  return getToken(PrestoParser::MAP, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::TypeContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::TypeContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}

PrestoParser::BaseTypeContext* PrestoParser::TypeContext::baseType() {
  return getRuleContext<PrestoParser::BaseTypeContext>(0);
}

std::vector<PrestoParser::TypeParameterContext *> PrestoParser::TypeContext::typeParameter() {
  return getRuleContexts<PrestoParser::TypeParameterContext>();
}

PrestoParser::TypeParameterContext* PrestoParser::TypeContext::typeParameter(size_t i) {
  return getRuleContext<PrestoParser::TypeParameterContext>(i);
}


size_t PrestoParser::TypeContext::getRuleIndex() const {
  return PrestoParser::RuleType;
}

void PrestoParser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void PrestoParser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}


std::any PrestoParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}


PrestoParser::TypeContext* PrestoParser::type() {
   return type(0);
}

PrestoParser::TypeContext* PrestoParser::type(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, parentState);
  PrestoParser::TypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 80;
  enterRecursionRule(_localctx, 80, PrestoParser::RuleType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(892);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(851);
      match(PrestoParser::ARRAY);
      setState(852);
      match(PrestoParser::LT);
      setState(853);
      type(0);
      setState(854);
      match(PrestoParser::GT);
      break;
    }

    case 2: {
      setState(856);
      match(PrestoParser::MAP);
      setState(857);
      match(PrestoParser::LT);
      setState(858);
      type(0);
      setState(859);
      match(PrestoParser::T__0);
      setState(860);
      type(0);
      setState(861);
      match(PrestoParser::GT);
      break;
    }

    case 3: {
      setState(863);
      match(PrestoParser::ROW);
      setState(864);
      match(PrestoParser::T__1);
      setState(865);
      identifier();
      setState(866);
      type(0);
      setState(873);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(867);
        match(PrestoParser::T__0);
        setState(868);
        identifier();
        setState(869);
        type(0);
        setState(875);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(876);
      match(PrestoParser::T__2);
      break;
    }

    case 4: {
      setState(878);
      baseType();
      setState(890);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
      case 1: {
        setState(879);
        match(PrestoParser::T__1);
        setState(880);
        typeParameter();
        setState(885);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(881);
          match(PrestoParser::T__0);
          setState(882);
          typeParameter();
          setState(887);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(888);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(898);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleType);
        setState(894);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(895);
        match(PrestoParser::ARRAY); 
      }
      setState(900);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

PrestoParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::TypeParameterContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

PrestoParser::TypeContext* PrestoParser::TypeParameterContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}


size_t PrestoParser::TypeParameterContext::getRuleIndex() const {
  return PrestoParser::RuleTypeParameter;
}

void PrestoParser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void PrestoParser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}


std::any PrestoParser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TypeParameterContext* PrestoParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 82, PrestoParser::RuleTypeParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(903);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::INTEGER_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(901);
        match(PrestoParser::INTEGER_VALUE);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::TIME_WITH_TIME_ZONE:
      case PrestoParser::TIMESTAMP_WITH_TIME_ZONE:
      case PrestoParser::DOUBLE_PRECISION: {
        enterOuterAlt(_localctx, 2);
        setState(902);
        type(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeContext ------------------------------------------------------------------

PrestoParser::BaseTypeContext::BaseTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::BaseTypeContext::TIME_WITH_TIME_ZONE() {
  return getToken(PrestoParser::TIME_WITH_TIME_ZONE, 0);
}

tree::TerminalNode* PrestoParser::BaseTypeContext::TIMESTAMP_WITH_TIME_ZONE() {
  return getToken(PrestoParser::TIMESTAMP_WITH_TIME_ZONE, 0);
}

tree::TerminalNode* PrestoParser::BaseTypeContext::DOUBLE_PRECISION() {
  return getToken(PrestoParser::DOUBLE_PRECISION, 0);
}

PrestoParser::IdentifierContext* PrestoParser::BaseTypeContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}


size_t PrestoParser::BaseTypeContext::getRuleIndex() const {
  return PrestoParser::RuleBaseType;
}

void PrestoParser::BaseTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseType(this);
}

void PrestoParser::BaseTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseType(this);
}


std::any PrestoParser::BaseTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBaseType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BaseTypeContext* PrestoParser::baseType() {
  BaseTypeContext *_localctx = _tracker.createInstance<BaseTypeContext>(_ctx, getState());
  enterRule(_localctx, 84, PrestoParser::RuleBaseType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(909);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::TIME_WITH_TIME_ZONE: {
        enterOuterAlt(_localctx, 1);
        setState(905);
        match(PrestoParser::TIME_WITH_TIME_ZONE);
        break;
      }

      case PrestoParser::TIMESTAMP_WITH_TIME_ZONE: {
        enterOuterAlt(_localctx, 2);
        setState(906);
        match(PrestoParser::TIMESTAMP_WITH_TIME_ZONE);
        break;
      }

      case PrestoParser::DOUBLE_PRECISION: {
        enterOuterAlt(_localctx, 3);
        setState(907);
        match(PrestoParser::DOUBLE_PRECISION);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 4);
        setState(908);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenClauseContext ------------------------------------------------------------------

PrestoParser::WhenClauseContext::WhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WhenClauseContext::WHEN() {
  return getToken(PrestoParser::WHEN, 0);
}

tree::TerminalNode* PrestoParser::WhenClauseContext::THEN() {
  return getToken(PrestoParser::THEN, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::WhenClauseContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::WhenClauseContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::WhenClauseContext::getRuleIndex() const {
  return PrestoParser::RuleWhenClause;
}

void PrestoParser::WhenClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhenClause(this);
}

void PrestoParser::WhenClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhenClause(this);
}


std::any PrestoParser::WhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWhenClause(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WhenClauseContext* PrestoParser::whenClause() {
  WhenClauseContext *_localctx = _tracker.createInstance<WhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 86, PrestoParser::RuleWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(911);
    match(PrestoParser::WHEN);
    setState(912);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->condition = expression();
    setState(913);
    match(PrestoParser::THEN);
    setState(914);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->result = expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterContext ------------------------------------------------------------------

PrestoParser::FilterContext::FilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::FilterContext::FILTER() {
  return getToken(PrestoParser::FILTER, 0);
}

tree::TerminalNode* PrestoParser::FilterContext::WHERE() {
  return getToken(PrestoParser::WHERE, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::FilterContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}


size_t PrestoParser::FilterContext::getRuleIndex() const {
  return PrestoParser::RuleFilter;
}

void PrestoParser::FilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter(this);
}

void PrestoParser::FilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter(this);
}


std::any PrestoParser::FilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitFilter(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::FilterContext* PrestoParser::filter() {
  FilterContext *_localctx = _tracker.createInstance<FilterContext>(_ctx, getState());
  enterRule(_localctx, 88, PrestoParser::RuleFilter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(916);
    match(PrestoParser::FILTER);
    setState(917);
    match(PrestoParser::T__1);
    setState(918);
    match(PrestoParser::WHERE);
    setState(919);
    booleanExpression(0);
    setState(920);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverContext ------------------------------------------------------------------

PrestoParser::OverContext::OverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::OverContext::OVER() {
  return getToken(PrestoParser::OVER, 0);
}

tree::TerminalNode* PrestoParser::OverContext::PARTITION() {
  return getToken(PrestoParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> PrestoParser::OverContext::BY() {
  return getTokens(PrestoParser::BY);
}

tree::TerminalNode* PrestoParser::OverContext::BY(size_t i) {
  return getToken(PrestoParser::BY, i);
}

tree::TerminalNode* PrestoParser::OverContext::ORDER() {
  return getToken(PrestoParser::ORDER, 0);
}

std::vector<PrestoParser::SortItemContext *> PrestoParser::OverContext::sortItem() {
  return getRuleContexts<PrestoParser::SortItemContext>();
}

PrestoParser::SortItemContext* PrestoParser::OverContext::sortItem(size_t i) {
  return getRuleContext<PrestoParser::SortItemContext>(i);
}

PrestoParser::WindowFrameContext* PrestoParser::OverContext::windowFrame() {
  return getRuleContext<PrestoParser::WindowFrameContext>(0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::OverContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::OverContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::OverContext::getRuleIndex() const {
  return PrestoParser::RuleOver;
}

void PrestoParser::OverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOver(this);
}

void PrestoParser::OverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOver(this);
}


std::any PrestoParser::OverContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitOver(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::OverContext* PrestoParser::over() {
  OverContext *_localctx = _tracker.createInstance<OverContext>(_ctx, getState());
  enterRule(_localctx, 90, PrestoParser::RuleOver);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(922);
    match(PrestoParser::OVER);
    setState(923);
    match(PrestoParser::T__1);
    setState(934);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::PARTITION) {
      setState(924);
      match(PrestoParser::PARTITION);
      setState(925);
      match(PrestoParser::BY);
      setState(926);
      antlrcpp::downCast<OverContext *>(_localctx)->expressionContext = expression();
      antlrcpp::downCast<OverContext *>(_localctx)->partition.push_back(antlrcpp::downCast<OverContext *>(_localctx)->expressionContext);
      setState(931);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(927);
        match(PrestoParser::T__0);
        setState(928);
        antlrcpp::downCast<OverContext *>(_localctx)->expressionContext = expression();
        antlrcpp::downCast<OverContext *>(_localctx)->partition.push_back(antlrcpp::downCast<OverContext *>(_localctx)->expressionContext);
        setState(933);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(946);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ORDER) {
      setState(936);
      match(PrestoParser::ORDER);
      setState(937);
      match(PrestoParser::BY);
      setState(938);
      sortItem();
      setState(943);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(939);
        match(PrestoParser::T__0);
        setState(940);
        sortItem();
        setState(945);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(949);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::RANGE

    || _la == PrestoParser::ROWS) {
      setState(948);
      windowFrame();
    }
    setState(951);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowFrameContext ------------------------------------------------------------------

PrestoParser::WindowFrameContext::WindowFrameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WindowFrameContext::RANGE() {
  return getToken(PrestoParser::RANGE, 0);
}

std::vector<PrestoParser::FrameBoundContext *> PrestoParser::WindowFrameContext::frameBound() {
  return getRuleContexts<PrestoParser::FrameBoundContext>();
}

PrestoParser::FrameBoundContext* PrestoParser::WindowFrameContext::frameBound(size_t i) {
  return getRuleContext<PrestoParser::FrameBoundContext>(i);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::ROWS() {
  return getToken(PrestoParser::ROWS, 0);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::BETWEEN() {
  return getToken(PrestoParser::BETWEEN, 0);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::AND() {
  return getToken(PrestoParser::AND, 0);
}


size_t PrestoParser::WindowFrameContext::getRuleIndex() const {
  return PrestoParser::RuleWindowFrame;
}

void PrestoParser::WindowFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindowFrame(this);
}

void PrestoParser::WindowFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindowFrame(this);
}


std::any PrestoParser::WindowFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWindowFrame(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WindowFrameContext* PrestoParser::windowFrame() {
  WindowFrameContext *_localctx = _tracker.createInstance<WindowFrameContext>(_ctx, getState());
  enterRule(_localctx, 92, PrestoParser::RuleWindowFrame);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(969);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(953);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::RANGE);
      setState(954);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(955);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::ROWS);
      setState(956);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(957);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::RANGE);
      setState(958);
      match(PrestoParser::BETWEEN);
      setState(959);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(960);
      match(PrestoParser::AND);
      setState(961);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(963);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::ROWS);
      setState(964);
      match(PrestoParser::BETWEEN);
      setState(965);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(966);
      match(PrestoParser::AND);
      setState(967);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FrameBoundContext ------------------------------------------------------------------

PrestoParser::FrameBoundContext::FrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::FrameBoundContext::getRuleIndex() const {
  return PrestoParser::RuleFrameBound;
}

void PrestoParser::FrameBoundContext::copyFrom(FrameBoundContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BoundedFrameContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::BoundedFrameContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::BoundedFrameContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::BoundedFrameContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

PrestoParser::BoundedFrameContext::BoundedFrameContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::BoundedFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoundedFrame(this);
}
void PrestoParser::BoundedFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoundedFrame(this);
}

std::any PrestoParser::BoundedFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBoundedFrame(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnboundedFrameContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnboundedFrameContext::UNBOUNDED() {
  return getToken(PrestoParser::UNBOUNDED, 0);
}

tree::TerminalNode* PrestoParser::UnboundedFrameContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::UnboundedFrameContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

PrestoParser::UnboundedFrameContext::UnboundedFrameContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnboundedFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnboundedFrame(this);
}
void PrestoParser::UnboundedFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnboundedFrame(this);
}

std::any PrestoParser::UnboundedFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnboundedFrame(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CurrentRowBoundContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CurrentRowBoundContext::CURRENT() {
  return getToken(PrestoParser::CURRENT, 0);
}

tree::TerminalNode* PrestoParser::CurrentRowBoundContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

PrestoParser::CurrentRowBoundContext::CurrentRowBoundContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::CurrentRowBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCurrentRowBound(this);
}
void PrestoParser::CurrentRowBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCurrentRowBound(this);
}

std::any PrestoParser::CurrentRowBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCurrentRowBound(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::FrameBoundContext* PrestoParser::frameBound() {
  FrameBoundContext *_localctx = _tracker.createInstance<FrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 94, PrestoParser::RuleFrameBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(980);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::UnboundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(971);
      match(PrestoParser::UNBOUNDED);
      setState(972);
      antlrcpp::downCast<UnboundedFrameContext *>(_localctx)->boundType = match(PrestoParser::PRECEDING);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::UnboundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(973);
      match(PrestoParser::UNBOUNDED);
      setState(974);
      antlrcpp::downCast<UnboundedFrameContext *>(_localctx)->boundType = match(PrestoParser::FOLLOWING);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::CurrentRowBoundContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(975);
      match(PrestoParser::CURRENT);
      setState(976);
      match(PrestoParser::ROW);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::BoundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(977);
      expression();
      setState(978);
      antlrcpp::downCast<BoundedFrameContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::PRECEDING

      || _la == PrestoParser::FOLLOWING)) {
        antlrcpp::downCast<BoundedFrameContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplainOptionContext ------------------------------------------------------------------

PrestoParser::ExplainOptionContext::ExplainOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::ExplainOptionContext::getRuleIndex() const {
  return PrestoParser::RuleExplainOption;
}

void PrestoParser::ExplainOptionContext::copyFrom(ExplainOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExplainFormatContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExplainFormatContext::FORMAT() {
  return getToken(PrestoParser::FORMAT, 0);
}

tree::TerminalNode* PrestoParser::ExplainFormatContext::TEXT() {
  return getToken(PrestoParser::TEXT, 0);
}

tree::TerminalNode* PrestoParser::ExplainFormatContext::GRAPHVIZ() {
  return getToken(PrestoParser::GRAPHVIZ, 0);
}

PrestoParser::ExplainFormatContext::ExplainFormatContext(ExplainOptionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExplainFormatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplainFormat(this);
}
void PrestoParser::ExplainFormatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplainFormat(this);
}

std::any PrestoParser::ExplainFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExplainFormat(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExplainTypeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExplainTypeContext::TYPE() {
  return getToken(PrestoParser::TYPE, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::LOGICAL() {
  return getToken(PrestoParser::LOGICAL, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::DISTRIBUTED() {
  return getToken(PrestoParser::DISTRIBUTED, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::VALIDATE() {
  return getToken(PrestoParser::VALIDATE, 0);
}

PrestoParser::ExplainTypeContext::ExplainTypeContext(ExplainOptionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExplainTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplainType(this);
}
void PrestoParser::ExplainTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplainType(this);
}

std::any PrestoParser::ExplainTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExplainType(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::ExplainOptionContext* PrestoParser::explainOption() {
  ExplainOptionContext *_localctx = _tracker.createInstance<ExplainOptionContext>(_ctx, getState());
  enterRule(_localctx, 96, PrestoParser::RuleExplainOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(986);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::FORMAT: {
        _localctx = _tracker.createInstance<PrestoParser::ExplainFormatContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(982);
        match(PrestoParser::FORMAT);
        setState(983);
        antlrcpp::downCast<ExplainFormatContext *>(_localctx)->value = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::TEXT

        || _la == PrestoParser::GRAPHVIZ)) {
          antlrcpp::downCast<ExplainFormatContext *>(_localctx)->value = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case PrestoParser::TYPE: {
        _localctx = _tracker.createInstance<PrestoParser::ExplainTypeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(984);
        match(PrestoParser::TYPE);
        setState(985);
        antlrcpp::downCast<ExplainTypeContext *>(_localctx)->value = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 120) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 120)) & ((1ULL << (PrestoParser::LOGICAL - 120))
          | (1ULL << (PrestoParser::DISTRIBUTED - 120))
          | (1ULL << (PrestoParser::VALIDATE - 120)))) != 0))) {
          antlrcpp::downCast<ExplainTypeContext *>(_localctx)->value = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

PrestoParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::TransactionModeContext::getRuleIndex() const {
  return PrestoParser::RuleTransactionMode;
}

void PrestoParser::TransactionModeContext::copyFrom(TransactionModeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TransactionAccessModeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::ONLY() {
  return getToken(PrestoParser::ONLY, 0);
}

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::WRITE() {
  return getToken(PrestoParser::WRITE, 0);
}

PrestoParser::TransactionAccessModeContext::TransactionAccessModeContext(TransactionModeContext *ctx) { copyFrom(ctx); }

void PrestoParser::TransactionAccessModeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionAccessMode(this);
}
void PrestoParser::TransactionAccessModeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionAccessMode(this);
}

std::any PrestoParser::TransactionAccessModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTransactionAccessMode(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IsolationLevelContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::IsolationLevelContext::ISOLATION() {
  return getToken(PrestoParser::ISOLATION, 0);
}

tree::TerminalNode* PrestoParser::IsolationLevelContext::LEVEL() {
  return getToken(PrestoParser::LEVEL, 0);
}

PrestoParser::LevelOfIsolationContext* PrestoParser::IsolationLevelContext::levelOfIsolation() {
  return getRuleContext<PrestoParser::LevelOfIsolationContext>(0);
}

PrestoParser::IsolationLevelContext::IsolationLevelContext(TransactionModeContext *ctx) { copyFrom(ctx); }

void PrestoParser::IsolationLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsolationLevel(this);
}
void PrestoParser::IsolationLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsolationLevel(this);
}

std::any PrestoParser::IsolationLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIsolationLevel(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::TransactionModeContext* PrestoParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 98, PrestoParser::RuleTransactionMode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(993);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ISOLATION: {
        _localctx = _tracker.createInstance<PrestoParser::IsolationLevelContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(988);
        match(PrestoParser::ISOLATION);
        setState(989);
        match(PrestoParser::LEVEL);
        setState(990);
        levelOfIsolation();
        break;
      }

      case PrestoParser::READ: {
        _localctx = _tracker.createInstance<PrestoParser::TransactionAccessModeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(991);
        match(PrestoParser::READ);
        setState(992);
        antlrcpp::downCast<TransactionAccessModeContext *>(_localctx)->accessMode = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::WRITE

        || _la == PrestoParser::ONLY)) {
          antlrcpp::downCast<TransactionAccessModeContext *>(_localctx)->accessMode = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelOfIsolationContext ------------------------------------------------------------------

PrestoParser::LevelOfIsolationContext::LevelOfIsolationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::LevelOfIsolationContext::getRuleIndex() const {
  return PrestoParser::RuleLevelOfIsolation;
}

void PrestoParser::LevelOfIsolationContext::copyFrom(LevelOfIsolationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ReadUncommittedContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ReadUncommittedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::ReadUncommittedContext::UNCOMMITTED() {
  return getToken(PrestoParser::UNCOMMITTED, 0);
}

PrestoParser::ReadUncommittedContext::ReadUncommittedContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::ReadUncommittedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadUncommitted(this);
}
void PrestoParser::ReadUncommittedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadUncommitted(this);
}

std::any PrestoParser::ReadUncommittedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitReadUncommitted(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SerializableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SerializableContext::SERIALIZABLE() {
  return getToken(PrestoParser::SERIALIZABLE, 0);
}

PrestoParser::SerializableContext::SerializableContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::SerializableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSerializable(this);
}
void PrestoParser::SerializableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSerializable(this);
}

std::any PrestoParser::SerializableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSerializable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReadCommittedContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ReadCommittedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::ReadCommittedContext::COMMITTED() {
  return getToken(PrestoParser::COMMITTED, 0);
}

PrestoParser::ReadCommittedContext::ReadCommittedContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::ReadCommittedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadCommitted(this);
}
void PrestoParser::ReadCommittedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadCommitted(this);
}

std::any PrestoParser::ReadCommittedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitReadCommitted(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RepeatableReadContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::RepeatableReadContext::REPEATABLE() {
  return getToken(PrestoParser::REPEATABLE, 0);
}

tree::TerminalNode* PrestoParser::RepeatableReadContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

PrestoParser::RepeatableReadContext::RepeatableReadContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::RepeatableReadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeatableRead(this);
}
void PrestoParser::RepeatableReadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeatableRead(this);
}

std::any PrestoParser::RepeatableReadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRepeatableRead(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::LevelOfIsolationContext* PrestoParser::levelOfIsolation() {
  LevelOfIsolationContext *_localctx = _tracker.createInstance<LevelOfIsolationContext>(_ctx, getState());
  enterRule(_localctx, 100, PrestoParser::RuleLevelOfIsolation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1002);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::ReadUncommittedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(995);
      match(PrestoParser::READ);
      setState(996);
      match(PrestoParser::UNCOMMITTED);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::ReadCommittedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(997);
      match(PrestoParser::READ);
      setState(998);
      match(PrestoParser::COMMITTED);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::RepeatableReadContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(999);
      match(PrestoParser::REPEATABLE);
      setState(1000);
      match(PrestoParser::READ);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::SerializableContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(1001);
      match(PrestoParser::SERIALIZABLE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallArgumentContext ------------------------------------------------------------------

PrestoParser::CallArgumentContext::CallArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::CallArgumentContext::getRuleIndex() const {
  return PrestoParser::RuleCallArgument;
}

void PrestoParser::CallArgumentContext::copyFrom(CallArgumentContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PositionalArgumentContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::PositionalArgumentContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::PositionalArgumentContext::PositionalArgumentContext(CallArgumentContext *ctx) { copyFrom(ctx); }

void PrestoParser::PositionalArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionalArgument(this);
}
void PrestoParser::PositionalArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionalArgument(this);
}

std::any PrestoParser::PositionalArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPositionalArgument(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NamedArgumentContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::NamedArgumentContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ExpressionContext* PrestoParser::NamedArgumentContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::NamedArgumentContext::NamedArgumentContext(CallArgumentContext *ctx) { copyFrom(ctx); }

void PrestoParser::NamedArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedArgument(this);
}
void PrestoParser::NamedArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedArgument(this);
}

std::any PrestoParser::NamedArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNamedArgument(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::CallArgumentContext* PrestoParser::callArgument() {
  CallArgumentContext *_localctx = _tracker.createInstance<CallArgumentContext>(_ctx, getState());
  enterRule(_localctx, 102, PrestoParser::RuleCallArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1009);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::PositionalArgumentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1004);
      expression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::NamedArgumentContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1005);
      identifier();
      setState(1006);
      match(PrestoParser::T__8);
      setState(1007);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeContext ------------------------------------------------------------------

PrestoParser::PrivilegeContext::PrivilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::PrivilegeContext::SELECT() {
  return getToken(PrestoParser::SELECT, 0);
}

tree::TerminalNode* PrestoParser::PrivilegeContext::DELETE() {
  return getToken(PrestoParser::DELETE, 0);
}

tree::TerminalNode* PrestoParser::PrivilegeContext::INSERT() {
  return getToken(PrestoParser::INSERT, 0);
}

PrestoParser::IdentifierContext* PrestoParser::PrivilegeContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}


size_t PrestoParser::PrivilegeContext::getRuleIndex() const {
  return PrestoParser::RulePrivilege;
}

void PrestoParser::PrivilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege(this);
}

void PrestoParser::PrivilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege(this);
}


std::any PrestoParser::PrivilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPrivilege(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PrivilegeContext* PrestoParser::privilege() {
  PrivilegeContext *_localctx = _tracker.createInstance<PrivilegeContext>(_ctx, getState());
  enterRule(_localctx, 104, PrestoParser::RulePrivilege);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1015);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SELECT: {
        enterOuterAlt(_localctx, 1);
        setState(1011);
        match(PrestoParser::SELECT);
        break;
      }

      case PrestoParser::DELETE: {
        enterOuterAlt(_localctx, 2);
        setState(1012);
        match(PrestoParser::DELETE);
        break;
      }

      case PrestoParser::INSERT: {
        enterOuterAlt(_localctx, 3);
        setState(1013);
        match(PrestoParser::INSERT);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 4);
        setState(1014);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::QualifiedNameContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::QualifiedNameContext::getRuleIndex() const {
  return PrestoParser::RuleQualifiedName;
}

void PrestoParser::QualifiedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedName(this);
}

void PrestoParser::QualifiedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedName(this);
}


std::any PrestoParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QualifiedNameContext* PrestoParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 106, PrestoParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1017);
    identifier();
    setState(1022);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1018);
        match(PrestoParser::T__3);
        setState(1019);
        identifier(); 
      }
      setState(1024);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

PrestoParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::IdentifierContext::getRuleIndex() const {
  return PrestoParser::RuleIdentifier;
}

void PrestoParser::IdentifierContext::copyFrom(IdentifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BackQuotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BackQuotedIdentifierContext::BACKQUOTED_IDENTIFIER() {
  return getToken(PrestoParser::BACKQUOTED_IDENTIFIER, 0);
}

PrestoParser::BackQuotedIdentifierContext::BackQuotedIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::BackQuotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBackQuotedIdentifier(this);
}
void PrestoParser::BackQuotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBackQuotedIdentifier(this);
}

std::any PrestoParser::BackQuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBackQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QuotedIdentifierAlternativeContext ------------------------------------------------------------------

PrestoParser::QuotedIdentifierContext* PrestoParser::QuotedIdentifierAlternativeContext::quotedIdentifier() {
  return getRuleContext<PrestoParser::QuotedIdentifierContext>(0);
}

PrestoParser::QuotedIdentifierAlternativeContext::QuotedIdentifierAlternativeContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::QuotedIdentifierAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuotedIdentifierAlternative(this);
}
void PrestoParser::QuotedIdentifierAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuotedIdentifierAlternative(this);
}

std::any PrestoParser::QuotedIdentifierAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifierAlternative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DigitIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DigitIdentifierContext::DIGIT_IDENTIFIER() {
  return getToken(PrestoParser::DIGIT_IDENTIFIER, 0);
}

PrestoParser::DigitIdentifierContext::DigitIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::DigitIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDigitIdentifier(this);
}
void PrestoParser::DigitIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDigitIdentifier(this);
}

std::any PrestoParser::DigitIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDigitIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnquotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnquotedIdentifierContext::IDENTIFIER() {
  return getToken(PrestoParser::IDENTIFIER, 0);
}

PrestoParser::NonReservedContext* PrestoParser::UnquotedIdentifierContext::nonReserved() {
  return getRuleContext<PrestoParser::NonReservedContext>(0);
}

PrestoParser::UnquotedIdentifierContext::UnquotedIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnquotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnquotedIdentifier(this);
}
void PrestoParser::UnquotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnquotedIdentifier(this);
}

std::any PrestoParser::UnquotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnquotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::IdentifierContext* PrestoParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 108, PrestoParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1030);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1025);
        match(PrestoParser::IDENTIFIER);
        break;
      }

      case PrestoParser::QUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::QuotedIdentifierAlternativeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1026);
        quotedIdentifier();
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE: {
        _localctx = _tracker.createInstance<PrestoParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1027);
        nonReserved();
        break;
      }

      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::BackQuotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1028);
        match(PrestoParser::BACKQUOTED_IDENTIFIER);
        break;
      }

      case PrestoParser::DIGIT_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::DigitIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1029);
        match(PrestoParser::DIGIT_IDENTIFIER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotedIdentifierContext ------------------------------------------------------------------

PrestoParser::QuotedIdentifierContext::QuotedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::QuotedIdentifierContext::QUOTED_IDENTIFIER() {
  return getToken(PrestoParser::QUOTED_IDENTIFIER, 0);
}


size_t PrestoParser::QuotedIdentifierContext::getRuleIndex() const {
  return PrestoParser::RuleQuotedIdentifier;
}

void PrestoParser::QuotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuotedIdentifier(this);
}

void PrestoParser::QuotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuotedIdentifier(this);
}


std::any PrestoParser::QuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QuotedIdentifierContext* PrestoParser::quotedIdentifier() {
  QuotedIdentifierContext *_localctx = _tracker.createInstance<QuotedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 110, PrestoParser::RuleQuotedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1032);
    match(PrestoParser::QUOTED_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

PrestoParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::NumberContext::getRuleIndex() const {
  return PrestoParser::RuleNumber;
}

void PrestoParser::NumberContext::copyFrom(NumberContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DecimalLiteralContext::DECIMAL_VALUE() {
  return getToken(PrestoParser::DECIMAL_VALUE, 0);
}

PrestoParser::DecimalLiteralContext::DecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }

void PrestoParser::DecimalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimalLiteral(this);
}
void PrestoParser::DecimalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimalLiteral(this);
}

std::any PrestoParser::DecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntegerLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::IntegerLiteralContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

PrestoParser::IntegerLiteralContext::IntegerLiteralContext(NumberContext *ctx) { copyFrom(ctx); }

void PrestoParser::IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegerLiteral(this);
}
void PrestoParser::IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegerLiteral(this);
}

std::any PrestoParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::NumberContext* PrestoParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 112, PrestoParser::RuleNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1036);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::DECIMAL_VALUE: {
        _localctx = _tracker.createInstance<PrestoParser::DecimalLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1034);
        match(PrestoParser::DECIMAL_VALUE);
        break;
      }

      case PrestoParser::INTEGER_VALUE: {
        _localctx = _tracker.createInstance<PrestoParser::IntegerLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1035);
        match(PrestoParser::INTEGER_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonReservedContext ------------------------------------------------------------------

PrestoParser::NonReservedContext::NonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NonReservedContext::SHOW() {
  return getToken(PrestoParser::SHOW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TABLES() {
  return getToken(PrestoParser::TABLES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COLUMNS() {
  return getToken(PrestoParser::COLUMNS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COLUMN() {
  return getToken(PrestoParser::COLUMN, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PARTITIONS() {
  return getToken(PrestoParser::PARTITIONS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FUNCTIONS() {
  return getToken(PrestoParser::FUNCTIONS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SCHEMAS() {
  return getToken(PrestoParser::SCHEMAS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CATALOGS() {
  return getToken(PrestoParser::CATALOGS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SESSION() {
  return getToken(PrestoParser::SESSION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ADD() {
  return getToken(PrestoParser::ADD, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FILTER() {
  return getToken(PrestoParser::FILTER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::AT() {
  return getToken(PrestoParser::AT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OVER() {
  return getToken(PrestoParser::OVER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PARTITION() {
  return getToken(PrestoParser::PARTITION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RANGE() {
  return getToken(PrestoParser::RANGE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROWS() {
  return getToken(PrestoParser::ROWS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CURRENT() {
  return getToken(PrestoParser::CURRENT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MAP() {
  return getToken(PrestoParser::MAP, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TINYINT() {
  return getToken(PrestoParser::TINYINT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SMALLINT() {
  return getToken(PrestoParser::SMALLINT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INTEGER() {
  return getToken(PrestoParser::INTEGER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DATE() {
  return getToken(PrestoParser::DATE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TIMESTAMP() {
  return getToken(PrestoParser::TIMESTAMP, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INTERVAL() {
  return getToken(PrestoParser::INTERVAL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::YEAR() {
  return getToken(PrestoParser::YEAR, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MONTH() {
  return getToken(PrestoParser::MONTH, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DAY() {
  return getToken(PrestoParser::DAY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::HOUR() {
  return getToken(PrestoParser::HOUR, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MINUTE() {
  return getToken(PrestoParser::MINUTE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SECOND() {
  return getToken(PrestoParser::SECOND, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::EXPLAIN() {
  return getToken(PrestoParser::EXPLAIN, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ANALYZE() {
  return getToken(PrestoParser::ANALYZE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FORMAT() {
  return getToken(PrestoParser::FORMAT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TYPE() {
  return getToken(PrestoParser::TYPE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TEXT() {
  return getToken(PrestoParser::TEXT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::GRAPHVIZ() {
  return getToken(PrestoParser::GRAPHVIZ, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::LOGICAL() {
  return getToken(PrestoParser::LOGICAL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DISTRIBUTED() {
  return getToken(PrestoParser::DISTRIBUTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::VALIDATE() {
  return getToken(PrestoParser::VALIDATE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TABLESAMPLE() {
  return getToken(PrestoParser::TABLESAMPLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SYSTEM() {
  return getToken(PrestoParser::SYSTEM, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::BERNOULLI() {
  return getToken(PrestoParser::BERNOULLI, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::POISSONIZED() {
  return getToken(PrestoParser::POISSONIZED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::USE() {
  return getToken(PrestoParser::USE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TO() {
  return getToken(PrestoParser::TO, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SET() {
  return getToken(PrestoParser::SET, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RESET() {
  return getToken(PrestoParser::RESET, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::VIEW() {
  return getToken(PrestoParser::VIEW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REPLACE() {
  return getToken(PrestoParser::REPLACE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::IF() {
  return getToken(PrestoParser::IF, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::NULLIF() {
  return getToken(PrestoParser::NULLIF, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COALESCE() {
  return getToken(PrestoParser::COALESCE, 0);
}

PrestoParser::NormalFormContext* PrestoParser::NonReservedContext::normalForm() {
  return getRuleContext<PrestoParser::NormalFormContext>(0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::POSITION() {
  return getToken(PrestoParser::POSITION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::NO() {
  return getToken(PrestoParser::NO, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DATA() {
  return getToken(PrestoParser::DATA, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::START() {
  return getToken(PrestoParser::START, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TRANSACTION() {
  return getToken(PrestoParser::TRANSACTION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMIT() {
  return getToken(PrestoParser::COMMIT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROLLBACK() {
  return getToken(PrestoParser::ROLLBACK, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::WORK() {
  return getToken(PrestoParser::WORK, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ISOLATION() {
  return getToken(PrestoParser::ISOLATION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::LEVEL() {
  return getToken(PrestoParser::LEVEL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SERIALIZABLE() {
  return getToken(PrestoParser::SERIALIZABLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REPEATABLE() {
  return getToken(PrestoParser::REPEATABLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMITTED() {
  return getToken(PrestoParser::COMMITTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::UNCOMMITTED() {
  return getToken(PrestoParser::UNCOMMITTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::WRITE() {
  return getToken(PrestoParser::WRITE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ONLY() {
  return getToken(PrestoParser::ONLY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMENT() {
  return getToken(PrestoParser::COMMENT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CALL() {
  return getToken(PrestoParser::CALL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::GRANT() {
  return getToken(PrestoParser::GRANT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REVOKE() {
  return getToken(PrestoParser::REVOKE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PRIVILEGES() {
  return getToken(PrestoParser::PRIVILEGES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PUBLIC() {
  return getToken(PrestoParser::PUBLIC, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OPTION() {
  return getToken(PrestoParser::OPTION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SUBSTRING() {
  return getToken(PrestoParser::SUBSTRING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SCHEMA() {
  return getToken(PrestoParser::SCHEMA, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CASCADE() {
  return getToken(PrestoParser::CASCADE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RESTRICT() {
  return getToken(PrestoParser::RESTRICT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INPUT() {
  return getToken(PrestoParser::INPUT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OUTPUT() {
  return getToken(PrestoParser::OUTPUT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INCLUDING() {
  return getToken(PrestoParser::INCLUDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::EXCLUDING() {
  return getToken(PrestoParser::EXCLUDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PROPERTIES() {
  return getToken(PrestoParser::PROPERTIES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SOME() {
  return getToken(PrestoParser::SOME, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ANY() {
  return getToken(PrestoParser::ANY, 0);
}


size_t PrestoParser::NonReservedContext::getRuleIndex() const {
  return PrestoParser::RuleNonReserved;
}

void PrestoParser::NonReservedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonReserved(this);
}

void PrestoParser::NonReservedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonReserved(this);
}


std::any PrestoParser::NonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNonReserved(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NonReservedContext* PrestoParser::nonReserved() {
  NonReservedContext *_localctx = _tracker.createInstance<NonReservedContext>(_ctx, getState());
  enterRule(_localctx, 114, PrestoParser::RuleNonReserved);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1133);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SHOW: {
        enterOuterAlt(_localctx, 1);
        setState(1038);
        match(PrestoParser::SHOW);
        break;
      }

      case PrestoParser::TABLES: {
        enterOuterAlt(_localctx, 2);
        setState(1039);
        match(PrestoParser::TABLES);
        break;
      }

      case PrestoParser::COLUMNS: {
        enterOuterAlt(_localctx, 3);
        setState(1040);
        match(PrestoParser::COLUMNS);
        break;
      }

      case PrestoParser::COLUMN: {
        enterOuterAlt(_localctx, 4);
        setState(1041);
        match(PrestoParser::COLUMN);
        break;
      }

      case PrestoParser::PARTITIONS: {
        enterOuterAlt(_localctx, 5);
        setState(1042);
        match(PrestoParser::PARTITIONS);
        break;
      }

      case PrestoParser::FUNCTIONS: {
        enterOuterAlt(_localctx, 6);
        setState(1043);
        match(PrestoParser::FUNCTIONS);
        break;
      }

      case PrestoParser::SCHEMAS: {
        enterOuterAlt(_localctx, 7);
        setState(1044);
        match(PrestoParser::SCHEMAS);
        break;
      }

      case PrestoParser::CATALOGS: {
        enterOuterAlt(_localctx, 8);
        setState(1045);
        match(PrestoParser::CATALOGS);
        break;
      }

      case PrestoParser::SESSION: {
        enterOuterAlt(_localctx, 9);
        setState(1046);
        match(PrestoParser::SESSION);
        break;
      }

      case PrestoParser::ADD: {
        enterOuterAlt(_localctx, 10);
        setState(1047);
        match(PrestoParser::ADD);
        break;
      }

      case PrestoParser::FILTER: {
        enterOuterAlt(_localctx, 11);
        setState(1048);
        match(PrestoParser::FILTER);
        break;
      }

      case PrestoParser::AT: {
        enterOuterAlt(_localctx, 12);
        setState(1049);
        match(PrestoParser::AT);
        break;
      }

      case PrestoParser::OVER: {
        enterOuterAlt(_localctx, 13);
        setState(1050);
        match(PrestoParser::OVER);
        break;
      }

      case PrestoParser::PARTITION: {
        enterOuterAlt(_localctx, 14);
        setState(1051);
        match(PrestoParser::PARTITION);
        break;
      }

      case PrestoParser::RANGE: {
        enterOuterAlt(_localctx, 15);
        setState(1052);
        match(PrestoParser::RANGE);
        break;
      }

      case PrestoParser::ROWS: {
        enterOuterAlt(_localctx, 16);
        setState(1053);
        match(PrestoParser::ROWS);
        break;
      }

      case PrestoParser::PRECEDING: {
        enterOuterAlt(_localctx, 17);
        setState(1054);
        match(PrestoParser::PRECEDING);
        break;
      }

      case PrestoParser::FOLLOWING: {
        enterOuterAlt(_localctx, 18);
        setState(1055);
        match(PrestoParser::FOLLOWING);
        break;
      }

      case PrestoParser::CURRENT: {
        enterOuterAlt(_localctx, 19);
        setState(1056);
        match(PrestoParser::CURRENT);
        break;
      }

      case PrestoParser::ROW: {
        enterOuterAlt(_localctx, 20);
        setState(1057);
        match(PrestoParser::ROW);
        break;
      }

      case PrestoParser::MAP: {
        enterOuterAlt(_localctx, 21);
        setState(1058);
        match(PrestoParser::MAP);
        break;
      }

      case PrestoParser::ARRAY: {
        enterOuterAlt(_localctx, 22);
        setState(1059);
        match(PrestoParser::ARRAY);
        break;
      }

      case PrestoParser::TINYINT: {
        enterOuterAlt(_localctx, 23);
        setState(1060);
        match(PrestoParser::TINYINT);
        break;
      }

      case PrestoParser::SMALLINT: {
        enterOuterAlt(_localctx, 24);
        setState(1061);
        match(PrestoParser::SMALLINT);
        break;
      }

      case PrestoParser::INTEGER: {
        enterOuterAlt(_localctx, 25);
        setState(1062);
        match(PrestoParser::INTEGER);
        break;
      }

      case PrestoParser::DATE: {
        enterOuterAlt(_localctx, 26);
        setState(1063);
        match(PrestoParser::DATE);
        break;
      }

      case PrestoParser::TIME: {
        enterOuterAlt(_localctx, 27);
        setState(1064);
        match(PrestoParser::TIME);
        break;
      }

      case PrestoParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 28);
        setState(1065);
        match(PrestoParser::TIMESTAMP);
        break;
      }

      case PrestoParser::INTERVAL: {
        enterOuterAlt(_localctx, 29);
        setState(1066);
        match(PrestoParser::INTERVAL);
        break;
      }

      case PrestoParser::ZONE: {
        enterOuterAlt(_localctx, 30);
        setState(1067);
        match(PrestoParser::ZONE);
        break;
      }

      case PrestoParser::YEAR: {
        enterOuterAlt(_localctx, 31);
        setState(1068);
        match(PrestoParser::YEAR);
        break;
      }

      case PrestoParser::MONTH: {
        enterOuterAlt(_localctx, 32);
        setState(1069);
        match(PrestoParser::MONTH);
        break;
      }

      case PrestoParser::DAY: {
        enterOuterAlt(_localctx, 33);
        setState(1070);
        match(PrestoParser::DAY);
        break;
      }

      case PrestoParser::HOUR: {
        enterOuterAlt(_localctx, 34);
        setState(1071);
        match(PrestoParser::HOUR);
        break;
      }

      case PrestoParser::MINUTE: {
        enterOuterAlt(_localctx, 35);
        setState(1072);
        match(PrestoParser::MINUTE);
        break;
      }

      case PrestoParser::SECOND: {
        enterOuterAlt(_localctx, 36);
        setState(1073);
        match(PrestoParser::SECOND);
        break;
      }

      case PrestoParser::EXPLAIN: {
        enterOuterAlt(_localctx, 37);
        setState(1074);
        match(PrestoParser::EXPLAIN);
        break;
      }

      case PrestoParser::ANALYZE: {
        enterOuterAlt(_localctx, 38);
        setState(1075);
        match(PrestoParser::ANALYZE);
        break;
      }

      case PrestoParser::FORMAT: {
        enterOuterAlt(_localctx, 39);
        setState(1076);
        match(PrestoParser::FORMAT);
        break;
      }

      case PrestoParser::TYPE: {
        enterOuterAlt(_localctx, 40);
        setState(1077);
        match(PrestoParser::TYPE);
        break;
      }

      case PrestoParser::TEXT: {
        enterOuterAlt(_localctx, 41);
        setState(1078);
        match(PrestoParser::TEXT);
        break;
      }

      case PrestoParser::GRAPHVIZ: {
        enterOuterAlt(_localctx, 42);
        setState(1079);
        match(PrestoParser::GRAPHVIZ);
        break;
      }

      case PrestoParser::LOGICAL: {
        enterOuterAlt(_localctx, 43);
        setState(1080);
        match(PrestoParser::LOGICAL);
        break;
      }

      case PrestoParser::DISTRIBUTED: {
        enterOuterAlt(_localctx, 44);
        setState(1081);
        match(PrestoParser::DISTRIBUTED);
        break;
      }

      case PrestoParser::VALIDATE: {
        enterOuterAlt(_localctx, 45);
        setState(1082);
        match(PrestoParser::VALIDATE);
        break;
      }

      case PrestoParser::TABLESAMPLE: {
        enterOuterAlt(_localctx, 46);
        setState(1083);
        match(PrestoParser::TABLESAMPLE);
        break;
      }

      case PrestoParser::SYSTEM: {
        enterOuterAlt(_localctx, 47);
        setState(1084);
        match(PrestoParser::SYSTEM);
        break;
      }

      case PrestoParser::BERNOULLI: {
        enterOuterAlt(_localctx, 48);
        setState(1085);
        match(PrestoParser::BERNOULLI);
        break;
      }

      case PrestoParser::POISSONIZED: {
        enterOuterAlt(_localctx, 49);
        setState(1086);
        match(PrestoParser::POISSONIZED);
        break;
      }

      case PrestoParser::USE: {
        enterOuterAlt(_localctx, 50);
        setState(1087);
        match(PrestoParser::USE);
        break;
      }

      case PrestoParser::TO: {
        enterOuterAlt(_localctx, 51);
        setState(1088);
        match(PrestoParser::TO);
        break;
      }

      case PrestoParser::SET: {
        enterOuterAlt(_localctx, 52);
        setState(1089);
        match(PrestoParser::SET);
        break;
      }

      case PrestoParser::RESET: {
        enterOuterAlt(_localctx, 53);
        setState(1090);
        match(PrestoParser::RESET);
        break;
      }

      case PrestoParser::VIEW: {
        enterOuterAlt(_localctx, 54);
        setState(1091);
        match(PrestoParser::VIEW);
        break;
      }

      case PrestoParser::REPLACE: {
        enterOuterAlt(_localctx, 55);
        setState(1092);
        match(PrestoParser::REPLACE);
        break;
      }

      case PrestoParser::IF: {
        enterOuterAlt(_localctx, 56);
        setState(1093);
        match(PrestoParser::IF);
        break;
      }

      case PrestoParser::NULLIF: {
        enterOuterAlt(_localctx, 57);
        setState(1094);
        match(PrestoParser::NULLIF);
        break;
      }

      case PrestoParser::COALESCE: {
        enterOuterAlt(_localctx, 58);
        setState(1095);
        match(PrestoParser::COALESCE);
        break;
      }

      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC: {
        enterOuterAlt(_localctx, 59);
        setState(1096);
        normalForm();
        break;
      }

      case PrestoParser::POSITION: {
        enterOuterAlt(_localctx, 60);
        setState(1097);
        match(PrestoParser::POSITION);
        break;
      }

      case PrestoParser::NO: {
        enterOuterAlt(_localctx, 61);
        setState(1098);
        match(PrestoParser::NO);
        break;
      }

      case PrestoParser::DATA: {
        enterOuterAlt(_localctx, 62);
        setState(1099);
        match(PrestoParser::DATA);
        break;
      }

      case PrestoParser::START: {
        enterOuterAlt(_localctx, 63);
        setState(1100);
        match(PrestoParser::START);
        break;
      }

      case PrestoParser::TRANSACTION: {
        enterOuterAlt(_localctx, 64);
        setState(1101);
        match(PrestoParser::TRANSACTION);
        break;
      }

      case PrestoParser::COMMIT: {
        enterOuterAlt(_localctx, 65);
        setState(1102);
        match(PrestoParser::COMMIT);
        break;
      }

      case PrestoParser::ROLLBACK: {
        enterOuterAlt(_localctx, 66);
        setState(1103);
        match(PrestoParser::ROLLBACK);
        break;
      }

      case PrestoParser::WORK: {
        enterOuterAlt(_localctx, 67);
        setState(1104);
        match(PrestoParser::WORK);
        break;
      }

      case PrestoParser::ISOLATION: {
        enterOuterAlt(_localctx, 68);
        setState(1105);
        match(PrestoParser::ISOLATION);
        break;
      }

      case PrestoParser::LEVEL: {
        enterOuterAlt(_localctx, 69);
        setState(1106);
        match(PrestoParser::LEVEL);
        break;
      }

      case PrestoParser::SERIALIZABLE: {
        enterOuterAlt(_localctx, 70);
        setState(1107);
        match(PrestoParser::SERIALIZABLE);
        break;
      }

      case PrestoParser::REPEATABLE: {
        enterOuterAlt(_localctx, 71);
        setState(1108);
        match(PrestoParser::REPEATABLE);
        break;
      }

      case PrestoParser::COMMITTED: {
        enterOuterAlt(_localctx, 72);
        setState(1109);
        match(PrestoParser::COMMITTED);
        break;
      }

      case PrestoParser::UNCOMMITTED: {
        enterOuterAlt(_localctx, 73);
        setState(1110);
        match(PrestoParser::UNCOMMITTED);
        break;
      }

      case PrestoParser::READ: {
        enterOuterAlt(_localctx, 74);
        setState(1111);
        match(PrestoParser::READ);
        break;
      }

      case PrestoParser::WRITE: {
        enterOuterAlt(_localctx, 75);
        setState(1112);
        match(PrestoParser::WRITE);
        break;
      }

      case PrestoParser::ONLY: {
        enterOuterAlt(_localctx, 76);
        setState(1113);
        match(PrestoParser::ONLY);
        break;
      }

      case PrestoParser::COMMENT: {
        enterOuterAlt(_localctx, 77);
        setState(1114);
        match(PrestoParser::COMMENT);
        break;
      }

      case PrestoParser::CALL: {
        enterOuterAlt(_localctx, 78);
        setState(1115);
        match(PrestoParser::CALL);
        break;
      }

      case PrestoParser::GRANT: {
        enterOuterAlt(_localctx, 79);
        setState(1116);
        match(PrestoParser::GRANT);
        break;
      }

      case PrestoParser::REVOKE: {
        enterOuterAlt(_localctx, 80);
        setState(1117);
        match(PrestoParser::REVOKE);
        break;
      }

      case PrestoParser::PRIVILEGES: {
        enterOuterAlt(_localctx, 81);
        setState(1118);
        match(PrestoParser::PRIVILEGES);
        break;
      }

      case PrestoParser::PUBLIC: {
        enterOuterAlt(_localctx, 82);
        setState(1119);
        match(PrestoParser::PUBLIC);
        break;
      }

      case PrestoParser::OPTION: {
        enterOuterAlt(_localctx, 83);
        setState(1120);
        match(PrestoParser::OPTION);
        break;
      }

      case PrestoParser::SUBSTRING: {
        enterOuterAlt(_localctx, 84);
        setState(1121);
        match(PrestoParser::SUBSTRING);
        break;
      }

      case PrestoParser::SCHEMA: {
        enterOuterAlt(_localctx, 85);
        setState(1122);
        match(PrestoParser::SCHEMA);
        break;
      }

      case PrestoParser::CASCADE: {
        enterOuterAlt(_localctx, 86);
        setState(1123);
        match(PrestoParser::CASCADE);
        break;
      }

      case PrestoParser::RESTRICT: {
        enterOuterAlt(_localctx, 87);
        setState(1124);
        match(PrestoParser::RESTRICT);
        break;
      }

      case PrestoParser::INPUT: {
        enterOuterAlt(_localctx, 88);
        setState(1125);
        match(PrestoParser::INPUT);
        break;
      }

      case PrestoParser::OUTPUT: {
        enterOuterAlt(_localctx, 89);
        setState(1126);
        match(PrestoParser::OUTPUT);
        break;
      }

      case PrestoParser::INCLUDING: {
        enterOuterAlt(_localctx, 90);
        setState(1127);
        match(PrestoParser::INCLUDING);
        break;
      }

      case PrestoParser::EXCLUDING: {
        enterOuterAlt(_localctx, 91);
        setState(1128);
        match(PrestoParser::EXCLUDING);
        break;
      }

      case PrestoParser::PROPERTIES: {
        enterOuterAlt(_localctx, 92);
        setState(1129);
        match(PrestoParser::PROPERTIES);
        break;
      }

      case PrestoParser::ALL: {
        enterOuterAlt(_localctx, 93);
        setState(1130);
        match(PrestoParser::ALL);
        break;
      }

      case PrestoParser::SOME: {
        enterOuterAlt(_localctx, 94);
        setState(1131);
        match(PrestoParser::SOME);
        break;
      }

      case PrestoParser::ANY: {
        enterOuterAlt(_localctx, 95);
        setState(1132);
        match(PrestoParser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormContext ------------------------------------------------------------------

PrestoParser::NormalFormContext::NormalFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFD() {
  return getToken(PrestoParser::NFD, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFC() {
  return getToken(PrestoParser::NFC, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFKD() {
  return getToken(PrestoParser::NFKD, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFKC() {
  return getToken(PrestoParser::NFKC, 0);
}


size_t PrestoParser::NormalFormContext::getRuleIndex() const {
  return PrestoParser::RuleNormalForm;
}

void PrestoParser::NormalFormContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalForm(this);
}

void PrestoParser::NormalFormContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalForm(this);
}


std::any PrestoParser::NormalFormContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNormalForm(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NormalFormContext* PrestoParser::normalForm() {
  NormalFormContext *_localctx = _tracker.createInstance<NormalFormContext>(_ctx, getState());
  enterRule(_localctx, 116, PrestoParser::RuleNormalForm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);
    _la = _input->LA(1);
    if (!(((((_la - 179) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 179)) & ((1ULL << (PrestoParser::NFD - 179))
      | (1ULL << (PrestoParser::NFC - 179))
      | (1ULL << (PrestoParser::NFKD - 179))
      | (1ULL << (PrestoParser::NFKC - 179)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool PrestoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 9: return queryTermSempred(antlrcpp::downCast<QueryTermContext *>(context), predicateIndex);
    case 20: return relationSempred(antlrcpp::downCast<RelationContext *>(context), predicateIndex);
    case 29: return booleanExpressionSempred(antlrcpp::downCast<BooleanExpressionContext *>(context), predicateIndex);
    case 32: return valueExpressionSempred(antlrcpp::downCast<ValueExpressionContext *>(context), predicateIndex);
    case 33: return primaryExpressionSempred(antlrcpp::downCast<PrimaryExpressionContext *>(context), predicateIndex);
    case 40: return typeSempred(antlrcpp::downCast<TypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool PrestoParser::queryTermSempred(QueryTermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool PrestoParser::relationSempred(RelationContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool PrestoParser::booleanExpressionSempred(BooleanExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 2);
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool PrestoParser::valueExpressionSempred(ValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 3);
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);
    case 8: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool PrestoParser::primaryExpressionSempred(PrimaryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 12);
    case 10: return precpred(_ctx, 10);

  default:
    break;
  }
  return true;
}

bool PrestoParser::typeSempred(TypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

void PrestoParser::initialize() {
  std::call_once(prestoParserOnceFlag, prestoParserInitialize);
}
