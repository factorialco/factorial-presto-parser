
// Generated from ./Presto.g4 by ANTLR 4.10.1


#include "PrestoListener.h"
#include "PrestoVisitor.h"

#include "PrestoParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct PrestoParserStaticData final {
  PrestoParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PrestoParserStaticData(const PrestoParserStaticData&) = delete;
  PrestoParserStaticData(PrestoParserStaticData&&) = delete;
  PrestoParserStaticData& operator=(const PrestoParserStaticData&) = delete;
  PrestoParserStaticData& operator=(PrestoParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

std::once_flag prestoParserOnceFlag;
PrestoParserStaticData *prestoParserStaticData = nullptr;

void prestoParserInitialize() {
  assert(prestoParserStaticData == nullptr);
  auto staticData = std::make_unique<PrestoParserStaticData>(
    std::vector<std::string>{
      "query", "with", "tableElement", "columnDefinition", "likeClause", 
      "tableProperties", "tableProperty", "queryNoWith", "queryTerm", "queryPrimary", 
      "sortItem", "querySpecification", "groupBy", "groupingElement", "groupingExpressions", 
      "groupingSet", "namedQuery", "setQuantifier", "selectItem", "relation", 
      "joinType", "joinCriteria", "sampledRelation", "sampleType", "aliasedRelation", 
      "columnAliases", "relationPrimary", "expression", "booleanExpression", 
      "predicated", "predicate", "valueExpression", "primaryExpression", 
      "timeZoneSpecifier", "comparisonOperator", "comparisonQuantifier", 
      "booleanValue", "interval", "intervalField", "type", "typeParameter", 
      "baseType", "whenClause", "filter", "over", "windowFrame", "frameBound", 
      "explainOption", "transactionMode", "levelOfIsolation", "callArgument", 
      "privilege", "qualifiedName", "identifier", "quotedIdentifier", "number", 
      "nonReserved", "normalForm"
    },
    std::vector<std::string>{
      "", "','", "'('", "')'", "'.'", "'\\u003F'", "'->'", "'['", "']'", 
      "'=>'", "'SELECT'", "'FROM'", "'ADD'", "'AS'", "'ALL'", "'SOME'", 
      "'ANY'", "'DISTINCT'", "'WHERE'", "'GROUP'", "'BY'", "'GROUPING'", 
      "'SETS'", "'CUBE'", "'ROLLUP'", "'ORDER'", "'HAVING'", "'LIMIT'", 
      "'AT'", "'OR'", "'AND'", "'IN'", "'NOT'", "'NO'", "'EXISTS'", "'BETWEEN'", 
      "'LIKE'", "'IS'", "'NULL'", "'TRUE'", "'FALSE'", "'NULLS'", "'FIRST'", 
      "'LAST'", "'ESCAPE'", "'ASC'", "'DESC'", "'SUBSTRING'", "'POSITION'", 
      "'FOR'", "'TINYINT'", "'SMALLINT'", "'INTEGER'", "'DATE'", "'TIME'", 
      "'TIMESTAMP'", "'INTERVAL'", "'YEAR'", "'MONTH'", "'DAY'", "'HOUR'", 
      "'MINUTE'", "'SECOND'", "'ZONE'", "'CURRENT_DATE'", "'CURRENT_TIME'", 
      "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'LOCALTIMESTAMP'", "'EXTRACT'", 
      "'CASE'", "'WHEN'", "'THEN'", "'ELSE'", "'END'", "'JOIN'", "'CROSS'", 
      "'OUTER'", "'INNER'", "'LEFT'", "'RIGHT'", "'FULL'", "'NATURAL'", 
      "'USING'", "'ON'", "'FILTER'", "'OVER'", "'PARTITION'", "'RANGE'", 
      "'ROWS'", "'UNBOUNDED'", "'PRECEDING'", "'FOLLOWING'", "'CURRENT'", 
      "'ROW'", "'WITH'", "'RECURSIVE'", "'VALUES'", "'CREATE'", "'SCHEMA'", 
      "'TABLE'", "'COMMENT'", "'VIEW'", "'REPLACE'", "'INSERT'", "'DELETE'", 
      "'INTO'", "'CONSTRAINT'", "'DESCRIBE'", "'GRANT'", "'REVOKE'", "'PRIVILEGES'", 
      "'PUBLIC'", "'OPTION'", "'EXPLAIN'", "'ANALYZE'", "'FORMAT'", "'TYPE'", 
      "'TEXT'", "'GRAPHVIZ'", "'LOGICAL'", "'DISTRIBUTED'", "'VALIDATE'", 
      "'CAST'", "'TRY_CAST'", "'SHOW'", "'TABLES'", "'SCHEMAS'", "'CATALOGS'", 
      "'COLUMNS'", "'COLUMN'", "'USE'", "'PARTITIONS'", "'FUNCTIONS'", "'DROP'", 
      "'UNION'", "'EXCEPT'", "'INTERSECT'", "'TO'", "'SYSTEM'", "'BERNOULLI'", 
      "'POISSONIZED'", "'TABLESAMPLE'", "'ALTER'", "'RENAME'", "'UNNEST'", 
      "'ORDINALITY'", "'ARRAY'", "'MAP'", "'SET'", "'RESET'", "'SESSION'", 
      "'DATA'", "'START'", "'TRANSACTION'", "'COMMIT'", "'ROLLBACK'", "'WORK'", 
      "'ISOLATION'", "'LEVEL'", "'SERIALIZABLE'", "'REPEATABLE'", "'COMMITTED'", 
      "'UNCOMMITTED'", "'READ'", "'WRITE'", "'ONLY'", "'CALL'", "'PREPARE'", 
      "'DEALLOCATE'", "'EXECUTE'", "'INPUT'", "'OUTPUT'", "'CASCADE'", "'RESTRICT'", 
      "'INCLUDING'", "'EXCLUDING'", "'PROPERTIES'", "'NORMALIZE'", "'NFD'", 
      "'NFC'", "'NFKD'", "'NFKC'", "'IF'", "'NULLIF'", "'COALESCE'", "'='", 
      "", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'%'", 
      "'||'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "SELECT", "FROM", "ADD", "AS", 
      "ALL", "SOME", "ANY", "DISTINCT", "WHERE", "GROUP", "BY", "GROUPING", 
      "SETS", "CUBE", "ROLLUP", "ORDER", "HAVING", "LIMIT", "AT", "OR", 
      "AND", "IN", "NOT", "NO", "EXISTS", "BETWEEN", "LIKE", "IS", "NULLTOKEN", 
      "TRUE", "FALSE", "NULLS", "FIRST", "LAST", "ESCAPE", "ASC", "DESC", 
      "SUBSTRING", "POSITION", "FOR", "TINYINT", "SMALLINT", "INTEGER", 
      "DATE", "TIME", "TIMESTAMP", "INTERVAL", "YEAR", "MONTH", "DAY", "HOUR", 
      "MINUTE", "SECOND", "ZONE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
      "LOCALTIME", "LOCALTIMESTAMP", "EXTRACT", "CASE", "WHEN", "THEN", 
      "ELSE", "END", "JOIN", "CROSS", "OUTER", "INNER", "LEFT", "RIGHT", 
      "FULL", "NATURAL", "USING", "ON", "FILTER", "OVER", "PARTITION", "RANGE", 
      "ROWS", "UNBOUNDED", "PRECEDING", "FOLLOWING", "CURRENT", "ROW", "WITH", 
      "RECURSIVE", "VALUES", "CREATE", "SCHEMA", "TABLE", "COMMENT", "VIEW", 
      "REPLACE", "INSERT", "DELETE", "INTO", "CONSTRAINT", "DESCRIBE", "GRANT", 
      "REVOKE", "PRIVILEGES", "PUBLIC", "OPTION", "EXPLAIN", "ANALYZE", 
      "FORMAT", "TYPE", "TEXT", "GRAPHVIZ", "LOGICAL", "DISTRIBUTED", "VALIDATE", 
      "CAST", "TRY_CAST", "SHOW", "TABLES", "SCHEMAS", "CATALOGS", "COLUMNS", 
      "COLUMN", "USE", "PARTITIONS", "FUNCTIONS", "DROP", "UNION", "EXCEPT", 
      "INTERSECT", "TO", "SYSTEM", "BERNOULLI", "POISSONIZED", "TABLESAMPLE", 
      "ALTER", "RENAME", "UNNEST", "ORDINALITY", "ARRAY", "MAP", "SET", 
      "RESET", "SESSION", "DATA", "START", "TRANSACTION", "COMMIT", "ROLLBACK", 
      "WORK", "ISOLATION", "LEVEL", "SERIALIZABLE", "REPEATABLE", "COMMITTED", 
      "UNCOMMITTED", "READ", "WRITE", "ONLY", "CALL", "PREPARE", "DEALLOCATE", 
      "EXECUTE", "INPUT", "OUTPUT", "CASCADE", "RESTRICT", "INCLUDING", 
      "EXCLUDING", "PROPERTIES", "NORMALIZE", "NFD", "NFC", "NFKD", "NFKC", 
      "IF", "NULLIF", "COALESCE", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
      "PLUS", "MINUS", "ASTERISK", "SLASH", "PERCENT", "CONCAT", "STRING", 
      "BINARY_LITERAL", "INTEGER_VALUE", "DECIMAL_VALUE", "IDENTIFIER", 
      "DIGIT_IDENTIFIER", "QUOTED_IDENTIFIER", "BACKQUOTED_IDENTIFIER", 
      "TIME_WITH_TIME_ZONE", "TIMESTAMP_WITH_TIME_ZONE", "DOUBLE_PRECISION", 
      "SIMPLE_COMMENT", "BRACKETED_COMMENT", "WS", "UNRECOGNIZED", "DELIMITER"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,213,1134,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,1,0,3,0,118,8,0,1,0,1,0,1,0,1,1,1,1,3,1,125,8,1,1,1,1,
  	1,1,1,5,1,130,8,1,10,1,12,1,133,9,1,1,2,1,2,3,2,137,8,2,1,3,1,3,1,3,1,
  	3,3,3,143,8,3,1,4,1,4,1,4,1,4,3,4,149,8,4,1,5,1,5,1,5,1,5,5,5,155,8,5,
  	10,5,12,5,158,9,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,
  	172,8,7,10,7,12,7,175,9,7,3,7,177,8,7,1,7,1,7,3,7,181,8,7,1,8,1,8,1,8,
  	1,8,1,8,1,8,3,8,189,8,8,1,8,1,8,1,8,1,8,3,8,195,8,8,1,8,5,8,198,8,8,10,
  	8,12,8,201,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,210,8,9,10,9,12,9,213,
  	9,9,1,9,1,9,1,9,1,9,3,9,219,8,9,1,10,1,10,3,10,223,8,10,1,10,1,10,3,10,
  	227,8,10,1,11,1,11,3,11,231,8,11,1,11,1,11,1,11,5,11,236,8,11,10,11,12,
  	11,239,9,11,1,11,1,11,1,11,1,11,5,11,245,8,11,10,11,12,11,248,9,11,3,
  	11,250,8,11,1,11,1,11,3,11,254,8,11,1,11,1,11,1,11,3,11,259,8,11,1,11,
  	1,11,3,11,263,8,11,1,12,3,12,266,8,12,1,12,1,12,1,12,5,12,271,8,12,10,
  	12,12,12,274,9,12,1,13,1,13,1,13,1,13,1,13,1,13,5,13,282,8,13,10,13,12,
  	13,285,9,13,3,13,287,8,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,295,8,13,
  	10,13,12,13,298,9,13,3,13,300,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
  	5,13,309,8,13,10,13,12,13,312,9,13,1,13,1,13,3,13,316,8,13,1,14,1,14,
  	1,14,1,14,5,14,322,8,14,10,14,12,14,325,9,14,3,14,327,8,14,1,14,1,14,
  	3,14,331,8,14,1,15,1,15,1,15,1,15,5,15,337,8,15,10,15,12,15,340,9,15,
  	3,15,342,8,15,1,15,1,15,3,15,346,8,15,1,16,1,16,3,16,350,8,16,1,16,1,
  	16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,3,18,361,8,18,1,18,3,18,364,8,18,
  	1,18,1,18,1,18,1,18,1,18,3,18,371,8,18,1,19,1,19,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,390,8,19,
  	5,19,392,8,19,10,19,12,19,395,9,19,1,20,3,20,398,8,20,1,20,1,20,3,20,
  	402,8,20,1,20,1,20,3,20,406,8,20,1,20,1,20,3,20,410,8,20,3,20,412,8,20,
  	1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,421,8,21,10,21,12,21,424,9,21,
  	1,21,1,21,3,21,428,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,437,8,
  	22,1,23,1,23,1,24,1,24,3,24,443,8,24,1,24,1,24,3,24,447,8,24,3,24,449,
  	8,24,1,25,1,25,1,25,1,25,5,25,455,8,25,10,25,12,25,458,9,25,1,25,1,25,
  	1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,5,26,472,8,26,10,26,
  	12,26,475,9,26,1,26,1,26,1,26,3,26,480,8,26,1,26,1,26,1,26,1,26,3,26,
  	486,8,26,1,27,1,27,1,28,1,28,1,28,1,28,3,28,494,8,28,1,28,1,28,1,28,1,
  	28,1,28,1,28,5,28,502,8,28,10,28,12,28,505,9,28,1,29,1,29,3,29,509,8,
  	29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,521,8,30,1,
  	30,1,30,1,30,1,30,1,30,1,30,3,30,529,8,30,1,30,1,30,1,30,1,30,1,30,5,
  	30,536,8,30,10,30,12,30,539,9,30,1,30,1,30,1,30,3,30,544,8,30,1,30,1,
  	30,1,30,1,30,1,30,1,30,3,30,552,8,30,1,30,1,30,1,30,1,30,3,30,558,8,30,
  	1,30,1,30,3,30,562,8,30,1,30,1,30,1,30,3,30,567,8,30,1,30,1,30,1,30,3,
  	30,572,8,30,1,31,1,31,1,31,1,31,3,31,578,8,31,1,31,1,31,1,31,1,31,1,31,
  	1,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,592,8,31,10,31,12,31,595,9,31,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,4,32,621,8,32,11,32,
  	12,32,622,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,632,8,32,10,32,12,32,
  	635,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,644,8,32,1,32,3,32,647,
  	8,32,1,32,1,32,1,32,3,32,652,8,32,1,32,1,32,1,32,5,32,657,8,32,10,32,
  	12,32,660,9,32,3,32,662,8,32,1,32,1,32,3,32,666,8,32,1,32,3,32,669,8,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,679,8,32,10,32,12,32,
  	682,9,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,4,32,700,8,32,11,32,12,32,701,1,32,1,32,3,32,706,
  	8,32,1,32,1,32,1,32,1,32,4,32,712,8,32,11,32,12,32,713,1,32,1,32,3,32,
  	718,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,741,8,32,10,32,12,32,
  	744,9,32,3,32,746,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,755,8,
  	32,1,32,1,32,1,32,1,32,3,32,761,8,32,1,32,1,32,1,32,1,32,3,32,767,8,32,
  	1,32,1,32,1,32,1,32,3,32,773,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
  	3,32,782,8,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,791,8,32,1,32,1,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,806,8,
  	32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,5,32,816,8,32,10,32,12,32,
  	819,9,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,827,8,33,1,34,1,34,1,35,1,
  	35,1,36,1,36,1,37,1,37,3,37,837,8,37,1,37,1,37,1,37,1,37,3,37,843,8,37,
  	1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,868,8,39,10,39,12,39,
  	871,9,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,880,8,39,10,39,12,39,
  	883,9,39,1,39,1,39,3,39,887,8,39,3,39,889,8,39,1,39,1,39,5,39,893,8,39,
  	10,39,12,39,896,9,39,1,40,1,40,3,40,900,8,40,1,41,1,41,1,41,1,41,3,41,
  	906,8,41,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,
  	1,44,1,44,1,44,1,44,1,44,1,44,5,44,926,8,44,10,44,12,44,929,9,44,3,44,
  	931,8,44,1,44,1,44,1,44,1,44,1,44,5,44,938,8,44,10,44,12,44,941,9,44,
  	3,44,943,8,44,1,44,3,44,946,8,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,
  	45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,966,8,45,1,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,977,8,46,1,47,1,47,1,
  	47,1,47,3,47,983,8,47,1,48,1,48,1,48,1,48,1,48,3,48,990,8,48,1,49,1,49,
  	1,49,1,49,1,49,1,49,1,49,3,49,999,8,49,1,50,1,50,1,50,1,50,1,50,3,50,
  	1006,8,50,1,51,1,51,1,51,1,51,3,51,1012,8,51,1,52,1,52,1,52,5,52,1017,
  	8,52,10,52,12,52,1020,9,52,1,53,1,53,1,53,1,53,1,53,3,53,1027,8,53,1,
  	54,1,54,1,55,1,55,3,55,1033,8,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
  	56,1,56,1,56,1,56,3,56,1130,8,56,1,57,1,57,1,57,0,6,16,38,56,62,64,78,
  	58,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
  	48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
  	94,96,98,100,102,104,106,108,110,112,114,0,18,1,0,175,176,2,0,14,14,200,
  	200,1,0,135,136,1,0,45,46,1,0,42,43,2,0,14,14,17,17,1,0,139,141,1,0,192,
  	193,1,0,194,196,1,0,186,191,1,0,14,16,1,0,39,40,1,0,57,62,1,0,91,92,1,
  	0,118,119,1,0,120,122,1,0,165,166,1,0,179,182,1359,0,117,1,0,0,0,2,122,
  	1,0,0,0,4,136,1,0,0,0,6,138,1,0,0,0,8,144,1,0,0,0,10,150,1,0,0,0,12,161,
  	1,0,0,0,14,165,1,0,0,0,16,182,1,0,0,0,18,218,1,0,0,0,20,220,1,0,0,0,22,
  	228,1,0,0,0,24,265,1,0,0,0,26,315,1,0,0,0,28,330,1,0,0,0,30,345,1,0,0,
  	0,32,347,1,0,0,0,34,356,1,0,0,0,36,370,1,0,0,0,38,372,1,0,0,0,40,411,
  	1,0,0,0,42,427,1,0,0,0,44,429,1,0,0,0,46,438,1,0,0,0,48,440,1,0,0,0,50,
  	450,1,0,0,0,52,485,1,0,0,0,54,487,1,0,0,0,56,493,1,0,0,0,58,506,1,0,0,
  	0,60,571,1,0,0,0,62,577,1,0,0,0,64,805,1,0,0,0,66,826,1,0,0,0,68,828,
  	1,0,0,0,70,830,1,0,0,0,72,832,1,0,0,0,74,834,1,0,0,0,76,844,1,0,0,0,78,
  	888,1,0,0,0,80,899,1,0,0,0,82,905,1,0,0,0,84,907,1,0,0,0,86,912,1,0,0,
  	0,88,918,1,0,0,0,90,965,1,0,0,0,92,976,1,0,0,0,94,982,1,0,0,0,96,989,
  	1,0,0,0,98,998,1,0,0,0,100,1005,1,0,0,0,102,1011,1,0,0,0,104,1013,1,0,
  	0,0,106,1026,1,0,0,0,108,1028,1,0,0,0,110,1032,1,0,0,0,112,1129,1,0,0,
  	0,114,1131,1,0,0,0,116,118,3,2,1,0,117,116,1,0,0,0,117,118,1,0,0,0,118,
  	119,1,0,0,0,119,120,3,14,7,0,120,121,5,0,0,1,121,1,1,0,0,0,122,124,5,
  	95,0,0,123,125,5,96,0,0,124,123,1,0,0,0,124,125,1,0,0,0,125,126,1,0,0,
  	0,126,131,3,32,16,0,127,128,5,1,0,0,128,130,3,32,16,0,129,127,1,0,0,0,
  	130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,3,1,0,0,0,133,131,
  	1,0,0,0,134,137,3,6,3,0,135,137,3,8,4,0,136,134,1,0,0,0,136,135,1,0,0,
  	0,137,5,1,0,0,0,138,139,3,106,53,0,139,142,3,78,39,0,140,141,5,101,0,
  	0,141,143,5,198,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,7,1,0,0,0,144,
  	145,5,36,0,0,145,148,3,104,52,0,146,147,7,0,0,0,147,149,5,177,0,0,148,
  	146,1,0,0,0,148,149,1,0,0,0,149,9,1,0,0,0,150,151,5,2,0,0,151,156,3,12,
  	6,0,152,153,5,1,0,0,153,155,3,12,6,0,154,152,1,0,0,0,155,158,1,0,0,0,
  	156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,
  	5,3,0,0,160,11,1,0,0,0,161,162,3,106,53,0,162,163,5,186,0,0,163,164,3,
  	54,27,0,164,13,1,0,0,0,165,176,3,16,8,0,166,167,5,25,0,0,167,168,5,20,
  	0,0,168,173,3,20,10,0,169,170,5,1,0,0,170,172,3,20,10,0,171,169,1,0,0,
  	0,172,175,1,0,0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,177,1,0,0,0,175,
  	173,1,0,0,0,176,166,1,0,0,0,176,177,1,0,0,0,177,180,1,0,0,0,178,179,5,
  	27,0,0,179,181,7,1,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,15,1,0,0,0,
  	182,183,6,8,-1,0,183,184,3,18,9,0,184,199,1,0,0,0,185,186,10,2,0,0,186,
  	188,5,137,0,0,187,189,3,34,17,0,188,187,1,0,0,0,188,189,1,0,0,0,189,190,
  	1,0,0,0,190,198,3,16,8,3,191,192,10,1,0,0,192,194,7,2,0,0,193,195,3,34,
  	17,0,194,193,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,198,3,16,8,2,
  	197,185,1,0,0,0,197,191,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,
  	1,0,0,0,200,17,1,0,0,0,201,199,1,0,0,0,202,219,3,22,11,0,203,204,5,100,
  	0,0,204,219,3,104,52,0,205,206,5,97,0,0,206,211,3,54,27,0,207,208,5,1,
  	0,0,208,210,3,54,27,0,209,207,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,
  	211,212,1,0,0,0,212,219,1,0,0,0,213,211,1,0,0,0,214,215,5,2,0,0,215,216,
  	3,14,7,0,216,217,5,3,0,0,217,219,1,0,0,0,218,202,1,0,0,0,218,203,1,0,
  	0,0,218,205,1,0,0,0,218,214,1,0,0,0,219,19,1,0,0,0,220,222,3,54,27,0,
  	221,223,7,3,0,0,222,221,1,0,0,0,222,223,1,0,0,0,223,226,1,0,0,0,224,225,
  	5,41,0,0,225,227,7,4,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,21,1,0,0,
  	0,228,230,5,10,0,0,229,231,3,34,17,0,230,229,1,0,0,0,230,231,1,0,0,0,
  	231,232,1,0,0,0,232,237,3,36,18,0,233,234,5,1,0,0,234,236,3,36,18,0,235,
  	233,1,0,0,0,236,239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,249,1,
  	0,0,0,239,237,1,0,0,0,240,241,5,11,0,0,241,246,3,38,19,0,242,243,5,1,
  	0,0,243,245,3,38,19,0,244,242,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,
  	246,247,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,249,240,1,0,0,0,249,250,
  	1,0,0,0,250,253,1,0,0,0,251,252,5,18,0,0,252,254,3,56,28,0,253,251,1,
  	0,0,0,253,254,1,0,0,0,254,258,1,0,0,0,255,256,5,19,0,0,256,257,5,20,0,
  	0,257,259,3,24,12,0,258,255,1,0,0,0,258,259,1,0,0,0,259,262,1,0,0,0,260,
  	261,5,26,0,0,261,263,3,56,28,0,262,260,1,0,0,0,262,263,1,0,0,0,263,23,
  	1,0,0,0,264,266,3,34,17,0,265,264,1,0,0,0,265,266,1,0,0,0,266,267,1,0,
  	0,0,267,272,3,26,13,0,268,269,5,1,0,0,269,271,3,26,13,0,270,268,1,0,0,
  	0,271,274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,25,1,0,0,0,274,
  	272,1,0,0,0,275,316,3,28,14,0,276,277,5,24,0,0,277,286,5,2,0,0,278,283,
  	3,104,52,0,279,280,5,1,0,0,280,282,3,104,52,0,281,279,1,0,0,0,282,285,
  	1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,287,1,0,0,0,285,283,1,0,0,
  	0,286,278,1,0,0,0,286,287,1,0,0,0,287,288,1,0,0,0,288,316,5,3,0,0,289,
  	290,5,23,0,0,290,299,5,2,0,0,291,296,3,104,52,0,292,293,5,1,0,0,293,295,
  	3,104,52,0,294,292,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,
  	0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,299,291,1,0,0,0,299,300,1,0,0,0,
  	300,301,1,0,0,0,301,316,5,3,0,0,302,303,5,21,0,0,303,304,5,22,0,0,304,
  	305,5,2,0,0,305,310,3,30,15,0,306,307,5,1,0,0,307,309,3,30,15,0,308,306,
  	1,0,0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,313,1,0,0,
  	0,312,310,1,0,0,0,313,314,5,3,0,0,314,316,1,0,0,0,315,275,1,0,0,0,315,
  	276,1,0,0,0,315,289,1,0,0,0,315,302,1,0,0,0,316,27,1,0,0,0,317,326,5,
  	2,0,0,318,323,3,54,27,0,319,320,5,1,0,0,320,322,3,54,27,0,321,319,1,0,
  	0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,327,1,0,0,0,325,
  	323,1,0,0,0,326,318,1,0,0,0,326,327,1,0,0,0,327,328,1,0,0,0,328,331,5,
  	3,0,0,329,331,3,54,27,0,330,317,1,0,0,0,330,329,1,0,0,0,331,29,1,0,0,
  	0,332,341,5,2,0,0,333,338,3,104,52,0,334,335,5,1,0,0,335,337,3,104,52,
  	0,336,334,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,
  	342,1,0,0,0,340,338,1,0,0,0,341,333,1,0,0,0,341,342,1,0,0,0,342,343,1,
  	0,0,0,343,346,5,3,0,0,344,346,3,104,52,0,345,332,1,0,0,0,345,344,1,0,
  	0,0,346,31,1,0,0,0,347,349,3,106,53,0,348,350,3,50,25,0,349,348,1,0,0,
  	0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,5,13,0,0,352,353,5,2,0,0,353,
  	354,3,0,0,0,354,355,5,3,0,0,355,33,1,0,0,0,356,357,7,5,0,0,357,35,1,0,
  	0,0,358,363,3,54,27,0,359,361,5,13,0,0,360,359,1,0,0,0,360,361,1,0,0,
  	0,361,362,1,0,0,0,362,364,3,106,53,0,363,360,1,0,0,0,363,364,1,0,0,0,
  	364,371,1,0,0,0,365,366,3,104,52,0,366,367,5,4,0,0,367,368,5,194,0,0,
  	368,371,1,0,0,0,369,371,5,194,0,0,370,358,1,0,0,0,370,365,1,0,0,0,370,
  	369,1,0,0,0,371,37,1,0,0,0,372,373,6,19,-1,0,373,374,3,44,22,0,374,393,
  	1,0,0,0,375,389,10,2,0,0,376,377,5,76,0,0,377,378,5,75,0,0,378,390,3,
  	44,22,0,379,380,3,40,20,0,380,381,5,75,0,0,381,382,3,38,19,0,382,383,
  	3,42,21,0,383,390,1,0,0,0,384,385,5,82,0,0,385,386,3,40,20,0,386,387,
  	5,75,0,0,387,388,3,44,22,0,388,390,1,0,0,0,389,376,1,0,0,0,389,379,1,
  	0,0,0,389,384,1,0,0,0,390,392,1,0,0,0,391,375,1,0,0,0,392,395,1,0,0,0,
  	393,391,1,0,0,0,393,394,1,0,0,0,394,39,1,0,0,0,395,393,1,0,0,0,396,398,
  	5,78,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,412,1,0,0,0,399,401,5,79,
  	0,0,400,402,5,77,0,0,401,400,1,0,0,0,401,402,1,0,0,0,402,412,1,0,0,0,
  	403,405,5,80,0,0,404,406,5,77,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,
  	412,1,0,0,0,407,409,5,81,0,0,408,410,5,77,0,0,409,408,1,0,0,0,409,410,
  	1,0,0,0,410,412,1,0,0,0,411,397,1,0,0,0,411,399,1,0,0,0,411,403,1,0,0,
  	0,411,407,1,0,0,0,412,41,1,0,0,0,413,414,5,84,0,0,414,428,3,56,28,0,415,
  	416,5,83,0,0,416,417,5,2,0,0,417,422,3,106,53,0,418,419,5,1,0,0,419,421,
  	3,106,53,0,420,418,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,
  	0,0,0,423,425,1,0,0,0,424,422,1,0,0,0,425,426,5,3,0,0,426,428,1,0,0,0,
  	427,413,1,0,0,0,427,415,1,0,0,0,428,43,1,0,0,0,429,436,3,48,24,0,430,
  	431,5,142,0,0,431,432,3,46,23,0,432,433,5,2,0,0,433,434,3,54,27,0,434,
  	435,5,3,0,0,435,437,1,0,0,0,436,430,1,0,0,0,436,437,1,0,0,0,437,45,1,
  	0,0,0,438,439,7,6,0,0,439,47,1,0,0,0,440,448,3,52,26,0,441,443,5,13,0,
  	0,442,441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,446,3,106,53,0,
  	445,447,3,50,25,0,446,445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,
  	442,1,0,0,0,448,449,1,0,0,0,449,49,1,0,0,0,450,451,5,2,0,0,451,456,3,
  	106,53,0,452,453,5,1,0,0,453,455,3,106,53,0,454,452,1,0,0,0,455,458,1,
  	0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,456,1,0,0,0,
  	459,460,5,3,0,0,460,51,1,0,0,0,461,486,3,104,52,0,462,463,5,2,0,0,463,
  	464,3,0,0,0,464,465,5,3,0,0,465,486,1,0,0,0,466,467,5,145,0,0,467,468,
  	5,2,0,0,468,473,3,54,27,0,469,470,5,1,0,0,470,472,3,54,27,0,471,469,1,
  	0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,
  	475,473,1,0,0,0,476,479,5,3,0,0,477,478,5,95,0,0,478,480,5,146,0,0,479,
  	477,1,0,0,0,479,480,1,0,0,0,480,486,1,0,0,0,481,482,5,2,0,0,482,483,3,
  	38,19,0,483,484,5,3,0,0,484,486,1,0,0,0,485,461,1,0,0,0,485,462,1,0,0,
  	0,485,466,1,0,0,0,485,481,1,0,0,0,486,53,1,0,0,0,487,488,3,56,28,0,488,
  	55,1,0,0,0,489,490,6,28,-1,0,490,494,3,58,29,0,491,492,5,32,0,0,492,494,
  	3,56,28,3,493,489,1,0,0,0,493,491,1,0,0,0,494,503,1,0,0,0,495,496,10,
  	2,0,0,496,497,5,30,0,0,497,502,3,56,28,3,498,499,10,1,0,0,499,500,5,29,
  	0,0,500,502,3,56,28,2,501,495,1,0,0,0,501,498,1,0,0,0,502,505,1,0,0,0,
  	503,501,1,0,0,0,503,504,1,0,0,0,504,57,1,0,0,0,505,503,1,0,0,0,506,508,
  	3,62,31,0,507,509,3,60,30,0,508,507,1,0,0,0,508,509,1,0,0,0,509,59,1,
  	0,0,0,510,511,3,68,34,0,511,512,3,62,31,0,512,572,1,0,0,0,513,514,3,68,
  	34,0,514,515,3,70,35,0,515,516,5,2,0,0,516,517,3,0,0,0,517,518,5,3,0,
  	0,518,572,1,0,0,0,519,521,5,32,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,
  	522,1,0,0,0,522,523,5,35,0,0,523,524,3,62,31,0,524,525,5,30,0,0,525,526,
  	3,62,31,0,526,572,1,0,0,0,527,529,5,32,0,0,528,527,1,0,0,0,528,529,1,
  	0,0,0,529,530,1,0,0,0,530,531,5,31,0,0,531,532,5,2,0,0,532,537,3,54,27,
  	0,533,534,5,1,0,0,534,536,3,54,27,0,535,533,1,0,0,0,536,539,1,0,0,0,537,
  	535,1,0,0,0,537,538,1,0,0,0,538,540,1,0,0,0,539,537,1,0,0,0,540,541,5,
  	3,0,0,541,572,1,0,0,0,542,544,5,32,0,0,543,542,1,0,0,0,543,544,1,0,0,
  	0,544,545,1,0,0,0,545,546,5,31,0,0,546,547,5,2,0,0,547,548,3,0,0,0,548,
  	549,5,3,0,0,549,572,1,0,0,0,550,552,5,32,0,0,551,550,1,0,0,0,551,552,
  	1,0,0,0,552,553,1,0,0,0,553,554,5,36,0,0,554,557,3,62,31,0,555,556,5,
  	44,0,0,556,558,3,62,31,0,557,555,1,0,0,0,557,558,1,0,0,0,558,572,1,0,
  	0,0,559,561,5,37,0,0,560,562,5,32,0,0,561,560,1,0,0,0,561,562,1,0,0,0,
  	562,563,1,0,0,0,563,572,5,38,0,0,564,566,5,37,0,0,565,567,5,32,0,0,566,
  	565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,569,5,17,0,0,569,570,
  	5,11,0,0,570,572,3,62,31,0,571,510,1,0,0,0,571,513,1,0,0,0,571,520,1,
  	0,0,0,571,528,1,0,0,0,571,543,1,0,0,0,571,551,1,0,0,0,571,559,1,0,0,0,
  	571,564,1,0,0,0,572,61,1,0,0,0,573,574,6,31,-1,0,574,578,3,64,32,0,575,
  	576,7,7,0,0,576,578,3,62,31,4,577,573,1,0,0,0,577,575,1,0,0,0,578,593,
  	1,0,0,0,579,580,10,3,0,0,580,581,7,8,0,0,581,592,3,62,31,4,582,583,10,
  	2,0,0,583,584,7,7,0,0,584,592,3,62,31,3,585,586,10,1,0,0,586,587,5,197,
  	0,0,587,592,3,62,31,2,588,589,10,5,0,0,589,590,5,28,0,0,590,592,3,66,
  	33,0,591,579,1,0,0,0,591,582,1,0,0,0,591,585,1,0,0,0,591,588,1,0,0,0,
  	592,595,1,0,0,0,593,591,1,0,0,0,593,594,1,0,0,0,594,63,1,0,0,0,595,593,
  	1,0,0,0,596,597,6,32,-1,0,597,806,5,38,0,0,598,806,3,74,37,0,599,600,
  	3,106,53,0,600,601,5,198,0,0,601,806,1,0,0,0,602,603,5,208,0,0,603,806,
  	5,198,0,0,604,806,3,110,55,0,605,806,3,72,36,0,606,806,5,198,0,0,607,
  	806,5,199,0,0,608,806,5,5,0,0,609,610,5,48,0,0,610,611,5,2,0,0,611,612,
  	3,62,31,0,612,613,5,31,0,0,613,614,3,62,31,0,614,615,5,3,0,0,615,806,
  	1,0,0,0,616,617,5,2,0,0,617,620,3,54,27,0,618,619,5,1,0,0,619,621,3,54,
  	27,0,620,618,1,0,0,0,621,622,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,
  	623,624,1,0,0,0,624,625,5,3,0,0,625,806,1,0,0,0,626,627,5,94,0,0,627,
  	628,5,2,0,0,628,633,3,54,27,0,629,630,5,1,0,0,630,632,3,54,27,0,631,629,
  	1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,
  	0,635,633,1,0,0,0,636,637,5,3,0,0,637,806,1,0,0,0,638,639,3,104,52,0,
  	639,640,5,2,0,0,640,641,5,194,0,0,641,643,5,3,0,0,642,644,3,86,43,0,643,
  	642,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,647,3,88,44,0,646,645,
  	1,0,0,0,646,647,1,0,0,0,647,806,1,0,0,0,648,649,3,104,52,0,649,661,5,
  	2,0,0,650,652,3,34,17,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,
  	0,653,658,3,54,27,0,654,655,5,1,0,0,655,657,3,54,27,0,656,654,1,0,0,0,
  	657,660,1,0,0,0,658,656,1,0,0,0,658,659,1,0,0,0,659,662,1,0,0,0,660,658,
  	1,0,0,0,661,651,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,665,5,3,0,
  	0,664,666,3,86,43,0,665,664,1,0,0,0,665,666,1,0,0,0,666,668,1,0,0,0,667,
  	669,3,88,44,0,668,667,1,0,0,0,668,669,1,0,0,0,669,806,1,0,0,0,670,671,
  	3,106,53,0,671,672,5,6,0,0,672,673,3,54,27,0,673,806,1,0,0,0,674,675,
  	5,2,0,0,675,680,3,106,53,0,676,677,5,1,0,0,677,679,3,106,53,0,678,676,
  	1,0,0,0,679,682,1,0,0,0,680,678,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,
  	0,682,680,1,0,0,0,683,684,5,3,0,0,684,685,5,6,0,0,685,686,3,54,27,0,686,
  	806,1,0,0,0,687,688,5,2,0,0,688,689,3,0,0,0,689,690,5,3,0,0,690,806,1,
  	0,0,0,691,692,5,34,0,0,692,693,5,2,0,0,693,694,3,0,0,0,694,695,5,3,0,
  	0,695,806,1,0,0,0,696,697,5,70,0,0,697,699,3,62,31,0,698,700,3,84,42,
  	0,699,698,1,0,0,0,700,701,1,0,0,0,701,699,1,0,0,0,701,702,1,0,0,0,702,
  	705,1,0,0,0,703,704,5,73,0,0,704,706,3,54,27,0,705,703,1,0,0,0,705,706,
  	1,0,0,0,706,707,1,0,0,0,707,708,5,74,0,0,708,806,1,0,0,0,709,711,5,70,
  	0,0,710,712,3,84,42,0,711,710,1,0,0,0,712,713,1,0,0,0,713,711,1,0,0,0,
  	713,714,1,0,0,0,714,717,1,0,0,0,715,716,5,73,0,0,716,718,3,54,27,0,717,
  	715,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,5,74,0,0,720,806,
  	1,0,0,0,721,722,5,123,0,0,722,723,5,2,0,0,723,724,3,54,27,0,724,725,5,
  	13,0,0,725,726,3,78,39,0,726,727,5,3,0,0,727,806,1,0,0,0,728,729,5,124,
  	0,0,729,730,5,2,0,0,730,731,3,54,27,0,731,732,5,13,0,0,732,733,3,78,39,
  	0,733,734,5,3,0,0,734,806,1,0,0,0,735,736,5,147,0,0,736,745,5,7,0,0,737,
  	742,3,54,27,0,738,739,5,1,0,0,739,741,3,54,27,0,740,738,1,0,0,0,741,744,
  	1,0,0,0,742,740,1,0,0,0,742,743,1,0,0,0,743,746,1,0,0,0,744,742,1,0,0,
  	0,745,737,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,0,747,806,5,8,0,0,748,
  	806,3,106,53,0,749,806,5,64,0,0,750,754,5,65,0,0,751,752,5,2,0,0,752,
  	753,5,200,0,0,753,755,5,3,0,0,754,751,1,0,0,0,754,755,1,0,0,0,755,806,
  	1,0,0,0,756,760,5,66,0,0,757,758,5,2,0,0,758,759,5,200,0,0,759,761,5,
  	3,0,0,760,757,1,0,0,0,760,761,1,0,0,0,761,806,1,0,0,0,762,766,5,67,0,
  	0,763,764,5,2,0,0,764,765,5,200,0,0,765,767,5,3,0,0,766,763,1,0,0,0,766,
  	767,1,0,0,0,767,806,1,0,0,0,768,772,5,68,0,0,769,770,5,2,0,0,770,771,
  	5,200,0,0,771,773,5,3,0,0,772,769,1,0,0,0,772,773,1,0,0,0,773,806,1,0,
  	0,0,774,775,5,47,0,0,775,776,5,2,0,0,776,777,3,62,31,0,777,778,5,11,0,
  	0,778,781,3,62,31,0,779,780,5,49,0,0,780,782,3,62,31,0,781,779,1,0,0,
  	0,781,782,1,0,0,0,782,783,1,0,0,0,783,784,5,3,0,0,784,806,1,0,0,0,785,
  	786,5,178,0,0,786,787,5,2,0,0,787,790,3,62,31,0,788,789,5,1,0,0,789,791,
  	3,114,57,0,790,788,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,793,5,
  	3,0,0,793,806,1,0,0,0,794,795,5,69,0,0,795,796,5,2,0,0,796,797,3,106,
  	53,0,797,798,5,11,0,0,798,799,3,62,31,0,799,800,5,3,0,0,800,806,1,0,0,
  	0,801,802,5,2,0,0,802,803,3,54,27,0,803,804,5,3,0,0,804,806,1,0,0,0,805,
  	596,1,0,0,0,805,598,1,0,0,0,805,599,1,0,0,0,805,602,1,0,0,0,805,604,1,
  	0,0,0,805,605,1,0,0,0,805,606,1,0,0,0,805,607,1,0,0,0,805,608,1,0,0,0,
  	805,609,1,0,0,0,805,616,1,0,0,0,805,626,1,0,0,0,805,638,1,0,0,0,805,648,
  	1,0,0,0,805,670,1,0,0,0,805,674,1,0,0,0,805,687,1,0,0,0,805,691,1,0,0,
  	0,805,696,1,0,0,0,805,709,1,0,0,0,805,721,1,0,0,0,805,728,1,0,0,0,805,
  	735,1,0,0,0,805,748,1,0,0,0,805,749,1,0,0,0,805,750,1,0,0,0,805,756,1,
  	0,0,0,805,762,1,0,0,0,805,768,1,0,0,0,805,774,1,0,0,0,805,785,1,0,0,0,
  	805,794,1,0,0,0,805,801,1,0,0,0,806,817,1,0,0,0,807,808,10,12,0,0,808,
  	809,5,7,0,0,809,810,3,62,31,0,810,811,5,8,0,0,811,816,1,0,0,0,812,813,
  	10,10,0,0,813,814,5,4,0,0,814,816,3,106,53,0,815,807,1,0,0,0,815,812,
  	1,0,0,0,816,819,1,0,0,0,817,815,1,0,0,0,817,818,1,0,0,0,818,65,1,0,0,
  	0,819,817,1,0,0,0,820,821,5,54,0,0,821,822,5,63,0,0,822,827,3,74,37,0,
  	823,824,5,54,0,0,824,825,5,63,0,0,825,827,5,198,0,0,826,820,1,0,0,0,826,
  	823,1,0,0,0,827,67,1,0,0,0,828,829,7,9,0,0,829,69,1,0,0,0,830,831,7,10,
  	0,0,831,71,1,0,0,0,832,833,7,11,0,0,833,73,1,0,0,0,834,836,5,56,0,0,835,
  	837,7,7,0,0,836,835,1,0,0,0,836,837,1,0,0,0,837,838,1,0,0,0,838,839,5,
  	198,0,0,839,842,3,76,38,0,840,841,5,138,0,0,841,843,3,76,38,0,842,840,
  	1,0,0,0,842,843,1,0,0,0,843,75,1,0,0,0,844,845,7,12,0,0,845,77,1,0,0,
  	0,846,847,6,39,-1,0,847,848,5,147,0,0,848,849,5,188,0,0,849,850,3,78,
  	39,0,850,851,5,190,0,0,851,889,1,0,0,0,852,853,5,148,0,0,853,854,5,188,
  	0,0,854,855,3,78,39,0,855,856,5,1,0,0,856,857,3,78,39,0,857,858,5,190,
  	0,0,858,889,1,0,0,0,859,860,5,94,0,0,860,861,5,2,0,0,861,862,3,106,53,
  	0,862,869,3,78,39,0,863,864,5,1,0,0,864,865,3,106,53,0,865,866,3,78,39,
  	0,866,868,1,0,0,0,867,863,1,0,0,0,868,871,1,0,0,0,869,867,1,0,0,0,869,
  	870,1,0,0,0,870,872,1,0,0,0,871,869,1,0,0,0,872,873,5,3,0,0,873,889,1,
  	0,0,0,874,886,3,82,41,0,875,876,5,2,0,0,876,881,3,80,40,0,877,878,5,1,
  	0,0,878,880,3,80,40,0,879,877,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,
  	881,882,1,0,0,0,882,884,1,0,0,0,883,881,1,0,0,0,884,885,5,3,0,0,885,887,
  	1,0,0,0,886,875,1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,846,1,0,0,
  	0,888,852,1,0,0,0,888,859,1,0,0,0,888,874,1,0,0,0,889,894,1,0,0,0,890,
  	891,10,5,0,0,891,893,5,147,0,0,892,890,1,0,0,0,893,896,1,0,0,0,894,892,
  	1,0,0,0,894,895,1,0,0,0,895,79,1,0,0,0,896,894,1,0,0,0,897,900,5,200,
  	0,0,898,900,3,78,39,0,899,897,1,0,0,0,899,898,1,0,0,0,900,81,1,0,0,0,
  	901,906,5,206,0,0,902,906,5,207,0,0,903,906,5,208,0,0,904,906,3,106,53,
  	0,905,901,1,0,0,0,905,902,1,0,0,0,905,903,1,0,0,0,905,904,1,0,0,0,906,
  	83,1,0,0,0,907,908,5,71,0,0,908,909,3,54,27,0,909,910,5,72,0,0,910,911,
  	3,54,27,0,911,85,1,0,0,0,912,913,5,85,0,0,913,914,5,2,0,0,914,915,5,18,
  	0,0,915,916,3,56,28,0,916,917,5,3,0,0,917,87,1,0,0,0,918,919,5,86,0,0,
  	919,930,5,2,0,0,920,921,5,87,0,0,921,922,5,20,0,0,922,927,3,54,27,0,923,
  	924,5,1,0,0,924,926,3,54,27,0,925,923,1,0,0,0,926,929,1,0,0,0,927,925,
  	1,0,0,0,927,928,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,930,920,1,0,0,
  	0,930,931,1,0,0,0,931,942,1,0,0,0,932,933,5,25,0,0,933,934,5,20,0,0,934,
  	939,3,20,10,0,935,936,5,1,0,0,936,938,3,20,10,0,937,935,1,0,0,0,938,941,
  	1,0,0,0,939,937,1,0,0,0,939,940,1,0,0,0,940,943,1,0,0,0,941,939,1,0,0,
  	0,942,932,1,0,0,0,942,943,1,0,0,0,943,945,1,0,0,0,944,946,3,90,45,0,945,
  	944,1,0,0,0,945,946,1,0,0,0,946,947,1,0,0,0,947,948,5,3,0,0,948,89,1,
  	0,0,0,949,950,5,88,0,0,950,966,3,92,46,0,951,952,5,89,0,0,952,966,3,92,
  	46,0,953,954,5,88,0,0,954,955,5,35,0,0,955,956,3,92,46,0,956,957,5,30,
  	0,0,957,958,3,92,46,0,958,966,1,0,0,0,959,960,5,89,0,0,960,961,5,35,0,
  	0,961,962,3,92,46,0,962,963,5,30,0,0,963,964,3,92,46,0,964,966,1,0,0,
  	0,965,949,1,0,0,0,965,951,1,0,0,0,965,953,1,0,0,0,965,959,1,0,0,0,966,
  	91,1,0,0,0,967,968,5,90,0,0,968,977,5,91,0,0,969,970,5,90,0,0,970,977,
  	5,92,0,0,971,972,5,93,0,0,972,977,5,94,0,0,973,974,3,54,27,0,974,975,
  	7,13,0,0,975,977,1,0,0,0,976,967,1,0,0,0,976,969,1,0,0,0,976,971,1,0,
  	0,0,976,973,1,0,0,0,977,93,1,0,0,0,978,979,5,116,0,0,979,983,7,14,0,0,
  	980,981,5,117,0,0,981,983,7,15,0,0,982,978,1,0,0,0,982,980,1,0,0,0,983,
  	95,1,0,0,0,984,985,5,158,0,0,985,986,5,159,0,0,986,990,3,98,49,0,987,
  	988,5,164,0,0,988,990,7,16,0,0,989,984,1,0,0,0,989,987,1,0,0,0,990,97,
  	1,0,0,0,991,992,5,164,0,0,992,999,5,163,0,0,993,994,5,164,0,0,994,999,
  	5,162,0,0,995,996,5,161,0,0,996,999,5,164,0,0,997,999,5,160,0,0,998,991,
  	1,0,0,0,998,993,1,0,0,0,998,995,1,0,0,0,998,997,1,0,0,0,999,99,1,0,0,
  	0,1000,1006,3,54,27,0,1001,1002,3,106,53,0,1002,1003,5,9,0,0,1003,1004,
  	3,54,27,0,1004,1006,1,0,0,0,1005,1000,1,0,0,0,1005,1001,1,0,0,0,1006,
  	101,1,0,0,0,1007,1012,5,10,0,0,1008,1012,5,105,0,0,1009,1012,5,104,0,
  	0,1010,1012,3,106,53,0,1011,1007,1,0,0,0,1011,1008,1,0,0,0,1011,1009,
  	1,0,0,0,1011,1010,1,0,0,0,1012,103,1,0,0,0,1013,1018,3,106,53,0,1014,
  	1015,5,4,0,0,1015,1017,3,106,53,0,1016,1014,1,0,0,0,1017,1020,1,0,0,0,
  	1018,1016,1,0,0,0,1018,1019,1,0,0,0,1019,105,1,0,0,0,1020,1018,1,0,0,
  	0,1021,1027,5,202,0,0,1022,1027,3,108,54,0,1023,1027,3,112,56,0,1024,
  	1027,5,205,0,0,1025,1027,5,203,0,0,1026,1021,1,0,0,0,1026,1022,1,0,0,
  	0,1026,1023,1,0,0,0,1026,1024,1,0,0,0,1026,1025,1,0,0,0,1027,107,1,0,
  	0,0,1028,1029,5,204,0,0,1029,109,1,0,0,0,1030,1033,5,201,0,0,1031,1033,
  	5,200,0,0,1032,1030,1,0,0,0,1032,1031,1,0,0,0,1033,111,1,0,0,0,1034,1130,
  	5,125,0,0,1035,1130,5,126,0,0,1036,1130,5,129,0,0,1037,1130,5,130,0,0,
  	1038,1130,5,132,0,0,1039,1130,5,133,0,0,1040,1130,5,127,0,0,1041,1130,
  	5,128,0,0,1042,1130,5,151,0,0,1043,1130,5,12,0,0,1044,1130,5,85,0,0,1045,
  	1130,5,28,0,0,1046,1130,5,86,0,0,1047,1130,5,87,0,0,1048,1130,5,88,0,
  	0,1049,1130,5,89,0,0,1050,1130,5,91,0,0,1051,1130,5,92,0,0,1052,1130,
  	5,93,0,0,1053,1130,5,94,0,0,1054,1130,5,148,0,0,1055,1130,5,147,0,0,1056,
  	1130,5,50,0,0,1057,1130,5,51,0,0,1058,1130,5,52,0,0,1059,1130,5,53,0,
  	0,1060,1130,5,54,0,0,1061,1130,5,55,0,0,1062,1130,5,56,0,0,1063,1130,
  	5,63,0,0,1064,1130,5,57,0,0,1065,1130,5,58,0,0,1066,1130,5,59,0,0,1067,
  	1130,5,60,0,0,1068,1130,5,61,0,0,1069,1130,5,62,0,0,1070,1130,5,114,0,
  	0,1071,1130,5,115,0,0,1072,1130,5,116,0,0,1073,1130,5,117,0,0,1074,1130,
  	5,118,0,0,1075,1130,5,119,0,0,1076,1130,5,120,0,0,1077,1130,5,121,0,0,
  	1078,1130,5,122,0,0,1079,1130,5,142,0,0,1080,1130,5,139,0,0,1081,1130,
  	5,140,0,0,1082,1130,5,141,0,0,1083,1130,5,131,0,0,1084,1130,5,138,0,0,
  	1085,1130,5,149,0,0,1086,1130,5,150,0,0,1087,1130,5,102,0,0,1088,1130,
  	5,103,0,0,1089,1130,5,183,0,0,1090,1130,5,184,0,0,1091,1130,5,185,0,0,
  	1092,1130,3,114,57,0,1093,1130,5,48,0,0,1094,1130,5,33,0,0,1095,1130,
  	5,152,0,0,1096,1130,5,153,0,0,1097,1130,5,154,0,0,1098,1130,5,155,0,0,
  	1099,1130,5,156,0,0,1100,1130,5,157,0,0,1101,1130,5,158,0,0,1102,1130,
  	5,159,0,0,1103,1130,5,160,0,0,1104,1130,5,161,0,0,1105,1130,5,162,0,0,
  	1106,1130,5,163,0,0,1107,1130,5,164,0,0,1108,1130,5,165,0,0,1109,1130,
  	5,166,0,0,1110,1130,5,101,0,0,1111,1130,5,167,0,0,1112,1130,5,109,0,0,
  	1113,1130,5,110,0,0,1114,1130,5,111,0,0,1115,1130,5,112,0,0,1116,1130,
  	5,113,0,0,1117,1130,5,47,0,0,1118,1130,5,99,0,0,1119,1130,5,173,0,0,1120,
  	1130,5,174,0,0,1121,1130,5,171,0,0,1122,1130,5,172,0,0,1123,1130,5,175,
  	0,0,1124,1130,5,176,0,0,1125,1130,5,177,0,0,1126,1130,5,14,0,0,1127,1130,
  	5,15,0,0,1128,1130,5,16,0,0,1129,1034,1,0,0,0,1129,1035,1,0,0,0,1129,
  	1036,1,0,0,0,1129,1037,1,0,0,0,1129,1038,1,0,0,0,1129,1039,1,0,0,0,1129,
  	1040,1,0,0,0,1129,1041,1,0,0,0,1129,1042,1,0,0,0,1129,1043,1,0,0,0,1129,
  	1044,1,0,0,0,1129,1045,1,0,0,0,1129,1046,1,0,0,0,1129,1047,1,0,0,0,1129,
  	1048,1,0,0,0,1129,1049,1,0,0,0,1129,1050,1,0,0,0,1129,1051,1,0,0,0,1129,
  	1052,1,0,0,0,1129,1053,1,0,0,0,1129,1054,1,0,0,0,1129,1055,1,0,0,0,1129,
  	1056,1,0,0,0,1129,1057,1,0,0,0,1129,1058,1,0,0,0,1129,1059,1,0,0,0,1129,
  	1060,1,0,0,0,1129,1061,1,0,0,0,1129,1062,1,0,0,0,1129,1063,1,0,0,0,1129,
  	1064,1,0,0,0,1129,1065,1,0,0,0,1129,1066,1,0,0,0,1129,1067,1,0,0,0,1129,
  	1068,1,0,0,0,1129,1069,1,0,0,0,1129,1070,1,0,0,0,1129,1071,1,0,0,0,1129,
  	1072,1,0,0,0,1129,1073,1,0,0,0,1129,1074,1,0,0,0,1129,1075,1,0,0,0,1129,
  	1076,1,0,0,0,1129,1077,1,0,0,0,1129,1078,1,0,0,0,1129,1079,1,0,0,0,1129,
  	1080,1,0,0,0,1129,1081,1,0,0,0,1129,1082,1,0,0,0,1129,1083,1,0,0,0,1129,
  	1084,1,0,0,0,1129,1085,1,0,0,0,1129,1086,1,0,0,0,1129,1087,1,0,0,0,1129,
  	1088,1,0,0,0,1129,1089,1,0,0,0,1129,1090,1,0,0,0,1129,1091,1,0,0,0,1129,
  	1092,1,0,0,0,1129,1093,1,0,0,0,1129,1094,1,0,0,0,1129,1095,1,0,0,0,1129,
  	1096,1,0,0,0,1129,1097,1,0,0,0,1129,1098,1,0,0,0,1129,1099,1,0,0,0,1129,
  	1100,1,0,0,0,1129,1101,1,0,0,0,1129,1102,1,0,0,0,1129,1103,1,0,0,0,1129,
  	1104,1,0,0,0,1129,1105,1,0,0,0,1129,1106,1,0,0,0,1129,1107,1,0,0,0,1129,
  	1108,1,0,0,0,1129,1109,1,0,0,0,1129,1110,1,0,0,0,1129,1111,1,0,0,0,1129,
  	1112,1,0,0,0,1129,1113,1,0,0,0,1129,1114,1,0,0,0,1129,1115,1,0,0,0,1129,
  	1116,1,0,0,0,1129,1117,1,0,0,0,1129,1118,1,0,0,0,1129,1119,1,0,0,0,1129,
  	1120,1,0,0,0,1129,1121,1,0,0,0,1129,1122,1,0,0,0,1129,1123,1,0,0,0,1129,
  	1124,1,0,0,0,1129,1125,1,0,0,0,1129,1126,1,0,0,0,1129,1127,1,0,0,0,1129,
  	1128,1,0,0,0,1130,113,1,0,0,0,1131,1132,7,17,0,0,1132,115,1,0,0,0,127,
  	117,124,131,136,142,148,156,173,176,180,188,194,197,199,211,218,222,226,
  	230,237,246,249,253,258,262,265,272,283,286,296,299,310,315,323,326,330,
  	338,341,345,349,360,363,370,389,393,397,401,405,409,411,422,427,436,442,
  	446,448,456,473,479,485,493,501,503,508,520,528,537,543,551,557,561,566,
  	571,577,591,593,622,633,643,646,651,658,661,665,668,680,701,705,713,717,
  	742,745,754,760,766,772,781,790,805,815,817,826,836,842,869,881,886,888,
  	894,899,905,927,930,939,942,945,965,976,982,989,998,1005,1011,1018,1026,
  	1032,1129
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  prestoParserStaticData = staticData.release();
}

}

PrestoParser::PrestoParser(TokenStream *input) : PrestoParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

PrestoParser::PrestoParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  PrestoParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *prestoParserStaticData->atn, prestoParserStaticData->decisionToDFA, prestoParserStaticData->sharedContextCache, options);
}

PrestoParser::~PrestoParser() {
  delete _interpreter;
}

const atn::ATN& PrestoParser::getATN() const {
  return *prestoParserStaticData->atn;
}

std::string PrestoParser::getGrammarFileName() const {
  return "Presto.g4";
}

const std::vector<std::string>& PrestoParser::getRuleNames() const {
  return prestoParserStaticData->ruleNames;
}

const dfa::Vocabulary& PrestoParser::getVocabulary() const {
  return prestoParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PrestoParser::getSerializedATN() const {
  return prestoParserStaticData->serializedATN;
}


//----------------- QueryContext ------------------------------------------------------------------

PrestoParser::QueryContext::QueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::QueryNoWithContext* PrestoParser::QueryContext::queryNoWith() {
  return getRuleContext<PrestoParser::QueryNoWithContext>(0);
}

tree::TerminalNode* PrestoParser::QueryContext::EOF() {
  return getToken(PrestoParser::EOF, 0);
}

PrestoParser::WithContext* PrestoParser::QueryContext::with() {
  return getRuleContext<PrestoParser::WithContext>(0);
}


size_t PrestoParser::QueryContext::getRuleIndex() const {
  return PrestoParser::RuleQuery;
}

void PrestoParser::QueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuery(this);
}

void PrestoParser::QueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuery(this);
}


std::any PrestoParser::QueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuery(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryContext* PrestoParser::query() {
  QueryContext *_localctx = _tracker.createInstance<QueryContext>(_ctx, getState());
  enterRule(_localctx, 0, PrestoParser::RuleQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(117);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::WITH) {
      setState(116);
      with();
    }
    setState(119);
    queryNoWith();
    setState(120);
    match(PrestoParser::EOF);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WithContext ------------------------------------------------------------------

PrestoParser::WithContext::WithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WithContext::WITH() {
  return getToken(PrestoParser::WITH, 0);
}

std::vector<PrestoParser::NamedQueryContext *> PrestoParser::WithContext::namedQuery() {
  return getRuleContexts<PrestoParser::NamedQueryContext>();
}

PrestoParser::NamedQueryContext* PrestoParser::WithContext::namedQuery(size_t i) {
  return getRuleContext<PrestoParser::NamedQueryContext>(i);
}

tree::TerminalNode* PrestoParser::WithContext::RECURSIVE() {
  return getToken(PrestoParser::RECURSIVE, 0);
}


size_t PrestoParser::WithContext::getRuleIndex() const {
  return PrestoParser::RuleWith;
}

void PrestoParser::WithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWith(this);
}

void PrestoParser::WithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWith(this);
}


std::any PrestoParser::WithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWith(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WithContext* PrestoParser::with() {
  WithContext *_localctx = _tracker.createInstance<WithContext>(_ctx, getState());
  enterRule(_localctx, 2, PrestoParser::RuleWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(122);
    match(PrestoParser::WITH);
    setState(124);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::RECURSIVE) {
      setState(123);
      match(PrestoParser::RECURSIVE);
    }
    setState(126);
    namedQuery();
    setState(131);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(127);
      match(PrestoParser::T__0);
      setState(128);
      namedQuery();
      setState(133);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableElementContext ------------------------------------------------------------------

PrestoParser::TableElementContext::TableElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ColumnDefinitionContext* PrestoParser::TableElementContext::columnDefinition() {
  return getRuleContext<PrestoParser::ColumnDefinitionContext>(0);
}

PrestoParser::LikeClauseContext* PrestoParser::TableElementContext::likeClause() {
  return getRuleContext<PrestoParser::LikeClauseContext>(0);
}


size_t PrestoParser::TableElementContext::getRuleIndex() const {
  return PrestoParser::RuleTableElement;
}

void PrestoParser::TableElementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableElement(this);
}

void PrestoParser::TableElementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableElement(this);
}


std::any PrestoParser::TableElementContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableElement(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TableElementContext* PrestoParser::tableElement() {
  TableElementContext *_localctx = _tracker.createInstance<TableElementContext>(_ctx, getState());
  enterRule(_localctx, 4, PrestoParser::RuleTableElement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(136);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 1);
        setState(134);
        columnDefinition();
        break;
      }

      case PrestoParser::LIKE: {
        enterOuterAlt(_localctx, 2);
        setState(135);
        likeClause();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnDefinitionContext ------------------------------------------------------------------

PrestoParser::ColumnDefinitionContext::ColumnDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::IdentifierContext* PrestoParser::ColumnDefinitionContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::TypeContext* PrestoParser::ColumnDefinitionContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}

tree::TerminalNode* PrestoParser::ColumnDefinitionContext::COMMENT() {
  return getToken(PrestoParser::COMMENT, 0);
}

tree::TerminalNode* PrestoParser::ColumnDefinitionContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}


size_t PrestoParser::ColumnDefinitionContext::getRuleIndex() const {
  return PrestoParser::RuleColumnDefinition;
}

void PrestoParser::ColumnDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnDefinition(this);
}

void PrestoParser::ColumnDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnDefinition(this);
}


std::any PrestoParser::ColumnDefinitionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnDefinition(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ColumnDefinitionContext* PrestoParser::columnDefinition() {
  ColumnDefinitionContext *_localctx = _tracker.createInstance<ColumnDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 6, PrestoParser::RuleColumnDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(138);
    identifier();
    setState(139);
    type(0);
    setState(142);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::COMMENT) {
      setState(140);
      match(PrestoParser::COMMENT);
      setState(141);
      match(PrestoParser::STRING);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LikeClauseContext ------------------------------------------------------------------

PrestoParser::LikeClauseContext::LikeClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::LikeClauseContext::LIKE() {
  return getToken(PrestoParser::LIKE, 0);
}

PrestoParser::QualifiedNameContext* PrestoParser::LikeClauseContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::PROPERTIES() {
  return getToken(PrestoParser::PROPERTIES, 0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::INCLUDING() {
  return getToken(PrestoParser::INCLUDING, 0);
}

tree::TerminalNode* PrestoParser::LikeClauseContext::EXCLUDING() {
  return getToken(PrestoParser::EXCLUDING, 0);
}


size_t PrestoParser::LikeClauseContext::getRuleIndex() const {
  return PrestoParser::RuleLikeClause;
}

void PrestoParser::LikeClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLikeClause(this);
}

void PrestoParser::LikeClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLikeClause(this);
}


std::any PrestoParser::LikeClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLikeClause(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::LikeClauseContext* PrestoParser::likeClause() {
  LikeClauseContext *_localctx = _tracker.createInstance<LikeClauseContext>(_ctx, getState());
  enterRule(_localctx, 8, PrestoParser::RuleLikeClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(144);
    match(PrestoParser::LIKE);
    setState(145);
    qualifiedName();
    setState(148);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::INCLUDING

    || _la == PrestoParser::EXCLUDING) {
      setState(146);
      antlrcpp::downCast<LikeClauseContext *>(_localctx)->optionType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::INCLUDING

      || _la == PrestoParser::EXCLUDING)) {
        antlrcpp::downCast<LikeClauseContext *>(_localctx)->optionType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(147);
      match(PrestoParser::PROPERTIES);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertiesContext ------------------------------------------------------------------

PrestoParser::TablePropertiesContext::TablePropertiesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::TablePropertyContext *> PrestoParser::TablePropertiesContext::tableProperty() {
  return getRuleContexts<PrestoParser::TablePropertyContext>();
}

PrestoParser::TablePropertyContext* PrestoParser::TablePropertiesContext::tableProperty(size_t i) {
  return getRuleContext<PrestoParser::TablePropertyContext>(i);
}


size_t PrestoParser::TablePropertiesContext::getRuleIndex() const {
  return PrestoParser::RuleTableProperties;
}

void PrestoParser::TablePropertiesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableProperties(this);
}

void PrestoParser::TablePropertiesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableProperties(this);
}


std::any PrestoParser::TablePropertiesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableProperties(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TablePropertiesContext* PrestoParser::tableProperties() {
  TablePropertiesContext *_localctx = _tracker.createInstance<TablePropertiesContext>(_ctx, getState());
  enterRule(_localctx, 10, PrestoParser::RuleTableProperties);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(150);
    match(PrestoParser::T__1);
    setState(151);
    tableProperty();
    setState(156);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(152);
      match(PrestoParser::T__0);
      setState(153);
      tableProperty();
      setState(158);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(159);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TablePropertyContext ------------------------------------------------------------------

PrestoParser::TablePropertyContext::TablePropertyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::IdentifierContext* PrestoParser::TablePropertyContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::TablePropertyContext::EQ() {
  return getToken(PrestoParser::EQ, 0);
}

PrestoParser::ExpressionContext* PrestoParser::TablePropertyContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}


size_t PrestoParser::TablePropertyContext::getRuleIndex() const {
  return PrestoParser::RuleTableProperty;
}

void PrestoParser::TablePropertyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableProperty(this);
}

void PrestoParser::TablePropertyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableProperty(this);
}


std::any PrestoParser::TablePropertyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableProperty(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TablePropertyContext* PrestoParser::tableProperty() {
  TablePropertyContext *_localctx = _tracker.createInstance<TablePropertyContext>(_ctx, getState());
  enterRule(_localctx, 12, PrestoParser::RuleTableProperty);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(161);
    identifier();
    setState(162);
    match(PrestoParser::EQ);
    setState(163);
    expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryNoWithContext ------------------------------------------------------------------

PrestoParser::QueryNoWithContext::QueryNoWithContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::QueryTermContext* PrestoParser::QueryNoWithContext::queryTerm() {
  return getRuleContext<PrestoParser::QueryTermContext>(0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::ORDER() {
  return getToken(PrestoParser::ORDER, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::BY() {
  return getToken(PrestoParser::BY, 0);
}

std::vector<PrestoParser::SortItemContext *> PrestoParser::QueryNoWithContext::sortItem() {
  return getRuleContexts<PrestoParser::SortItemContext>();
}

PrestoParser::SortItemContext* PrestoParser::QueryNoWithContext::sortItem(size_t i) {
  return getRuleContext<PrestoParser::SortItemContext>(i);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::LIMIT() {
  return getToken(PrestoParser::LIMIT, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* PrestoParser::QueryNoWithContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}


size_t PrestoParser::QueryNoWithContext::getRuleIndex() const {
  return PrestoParser::RuleQueryNoWith;
}

void PrestoParser::QueryNoWithContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryNoWith(this);
}

void PrestoParser::QueryNoWithContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryNoWith(this);
}


std::any PrestoParser::QueryNoWithContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryNoWith(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryNoWithContext* PrestoParser::queryNoWith() {
  QueryNoWithContext *_localctx = _tracker.createInstance<QueryNoWithContext>(_ctx, getState());
  enterRule(_localctx, 14, PrestoParser::RuleQueryNoWith);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(165);
    queryTerm(0);
    setState(176);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ORDER) {
      setState(166);
      match(PrestoParser::ORDER);
      setState(167);
      match(PrestoParser::BY);
      setState(168);
      sortItem();
      setState(173);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(169);
        match(PrestoParser::T__0);
        setState(170);
        sortItem();
        setState(175);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(180);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::LIMIT) {
      setState(178);
      match(PrestoParser::LIMIT);
      setState(179);
      antlrcpp::downCast<QueryNoWithContext *>(_localctx)->limit = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::ALL || _la == PrestoParser::INTEGER_VALUE)) {
        antlrcpp::downCast<QueryNoWithContext *>(_localctx)->limit = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QueryTermContext ------------------------------------------------------------------

PrestoParser::QueryTermContext::QueryTermContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::QueryTermContext::getRuleIndex() const {
  return PrestoParser::RuleQueryTerm;
}

void PrestoParser::QueryTermContext::copyFrom(QueryTermContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- QueryTermDefaultContext ------------------------------------------------------------------

PrestoParser::QueryPrimaryContext* PrestoParser::QueryTermDefaultContext::queryPrimary() {
  return getRuleContext<PrestoParser::QueryPrimaryContext>(0);
}

PrestoParser::QueryTermDefaultContext::QueryTermDefaultContext(QueryTermContext *ctx) { copyFrom(ctx); }

void PrestoParser::QueryTermDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryTermDefault(this);
}
void PrestoParser::QueryTermDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryTermDefault(this);
}

std::any PrestoParser::QueryTermDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryTermDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SetOperationContext ------------------------------------------------------------------

std::vector<PrestoParser::QueryTermContext *> PrestoParser::SetOperationContext::queryTerm() {
  return getRuleContexts<PrestoParser::QueryTermContext>();
}

PrestoParser::QueryTermContext* PrestoParser::SetOperationContext::queryTerm(size_t i) {
  return getRuleContext<PrestoParser::QueryTermContext>(i);
}

tree::TerminalNode* PrestoParser::SetOperationContext::INTERSECT() {
  return getToken(PrestoParser::INTERSECT, 0);
}

PrestoParser::SetQuantifierContext* PrestoParser::SetOperationContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

tree::TerminalNode* PrestoParser::SetOperationContext::UNION() {
  return getToken(PrestoParser::UNION, 0);
}

tree::TerminalNode* PrestoParser::SetOperationContext::EXCEPT() {
  return getToken(PrestoParser::EXCEPT, 0);
}

PrestoParser::SetOperationContext::SetOperationContext(QueryTermContext *ctx) { copyFrom(ctx); }

void PrestoParser::SetOperationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetOperation(this);
}
void PrestoParser::SetOperationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetOperation(this);
}

std::any PrestoParser::SetOperationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSetOperation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QueryTermContext* PrestoParser::queryTerm() {
   return queryTerm(0);
}

PrestoParser::QueryTermContext* PrestoParser::queryTerm(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::QueryTermContext *_localctx = _tracker.createInstance<QueryTermContext>(_ctx, parentState);
  PrestoParser::QueryTermContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 16;
  enterRecursionRule(_localctx, 16, PrestoParser::RuleQueryTerm, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<QueryTermDefaultContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(183);
    queryPrimary();
    _ctx->stop = _input->LT(-1);
    setState(199);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(197);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(185);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(186);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = match(PrestoParser::INTERSECT);
          setState(188);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == PrestoParser::ALL

          || _la == PrestoParser::DISTINCT) {
            setState(187);
            setQuantifier();
          }
          setState(190);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<SetOperationContext>(_tracker.createInstance<QueryTermContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleQueryTerm);
          setState(191);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(192);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == PrestoParser::UNION

          || _la == PrestoParser::EXCEPT)) {
            antlrcpp::downCast<SetOperationContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(194);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == PrestoParser::ALL

          || _la == PrestoParser::DISTINCT) {
            setState(193);
            setQuantifier();
          }
          setState(196);
          antlrcpp::downCast<SetOperationContext *>(_localctx)->right = queryTerm(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(201);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 13, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- QueryPrimaryContext ------------------------------------------------------------------

PrestoParser::QueryPrimaryContext::QueryPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::QueryPrimaryContext::getRuleIndex() const {
  return PrestoParser::RuleQueryPrimary;
}

void PrestoParser::QueryPrimaryContext::copyFrom(QueryPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryContext ------------------------------------------------------------------

PrestoParser::QueryNoWithContext* PrestoParser::SubqueryContext::queryNoWith() {
  return getRuleContext<PrestoParser::QueryNoWithContext>(0);
}

PrestoParser::SubqueryContext::SubqueryContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubquery(this);
}
void PrestoParser::SubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubquery(this);
}

std::any PrestoParser::SubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QueryPrimaryDefaultContext ------------------------------------------------------------------

PrestoParser::QuerySpecificationContext* PrestoParser::QueryPrimaryDefaultContext::querySpecification() {
  return getRuleContext<PrestoParser::QuerySpecificationContext>(0);
}

PrestoParser::QueryPrimaryDefaultContext::QueryPrimaryDefaultContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::QueryPrimaryDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQueryPrimaryDefault(this);
}
void PrestoParser::QueryPrimaryDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQueryPrimaryDefault(this);
}

std::any PrestoParser::QueryPrimaryDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQueryPrimaryDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TableContext::TABLE() {
  return getToken(PrestoParser::TABLE, 0);
}

PrestoParser::QualifiedNameContext* PrestoParser::TableContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

PrestoParser::TableContext::TableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::TableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable(this);
}
void PrestoParser::TableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable(this);
}

std::any PrestoParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InlineTableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InlineTableContext::VALUES() {
  return getToken(PrestoParser::VALUES, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::InlineTableContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::InlineTableContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::InlineTableContext::InlineTableContext(QueryPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::InlineTableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInlineTable(this);
}
void PrestoParser::InlineTableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInlineTable(this);
}

std::any PrestoParser::InlineTableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInlineTable(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::QueryPrimaryContext* PrestoParser::queryPrimary() {
  QueryPrimaryContext *_localctx = _tracker.createInstance<QueryPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 18, PrestoParser::RuleQueryPrimary);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(218);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SELECT: {
        _localctx = _tracker.createInstance<PrestoParser::QueryPrimaryDefaultContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(202);
        querySpecification();
        break;
      }

      case PrestoParser::TABLE: {
        _localctx = _tracker.createInstance<PrestoParser::TableContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(203);
        match(PrestoParser::TABLE);
        setState(204);
        qualifiedName();
        break;
      }

      case PrestoParser::VALUES: {
        _localctx = _tracker.createInstance<PrestoParser::InlineTableContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(205);
        match(PrestoParser::VALUES);
        setState(206);
        expression();
        setState(211);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
        while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
          if (alt == 1) {
            setState(207);
            match(PrestoParser::T__0);
            setState(208);
            expression(); 
          }
          setState(213);
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx);
        }
        break;
      }

      case PrestoParser::T__1: {
        _localctx = _tracker.createInstance<PrestoParser::SubqueryContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(214);
        match(PrestoParser::T__1);
        setState(215);
        queryNoWith();
        setState(216);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SortItemContext ------------------------------------------------------------------

PrestoParser::SortItemContext::SortItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ExpressionContext* PrestoParser::SortItemContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::SortItemContext::NULLS() {
  return getToken(PrestoParser::NULLS, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::ASC() {
  return getToken(PrestoParser::ASC, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::DESC() {
  return getToken(PrestoParser::DESC, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::FIRST() {
  return getToken(PrestoParser::FIRST, 0);
}

tree::TerminalNode* PrestoParser::SortItemContext::LAST() {
  return getToken(PrestoParser::LAST, 0);
}


size_t PrestoParser::SortItemContext::getRuleIndex() const {
  return PrestoParser::RuleSortItem;
}

void PrestoParser::SortItemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSortItem(this);
}

void PrestoParser::SortItemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSortItem(this);
}


std::any PrestoParser::SortItemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSortItem(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SortItemContext* PrestoParser::sortItem() {
  SortItemContext *_localctx = _tracker.createInstance<SortItemContext>(_ctx, getState());
  enterRule(_localctx, 20, PrestoParser::RuleSortItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(220);
    expression();
    setState(222);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ASC

    || _la == PrestoParser::DESC) {
      setState(221);
      antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::ASC

      || _la == PrestoParser::DESC)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->ordering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(226);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::NULLS) {
      setState(224);
      match(PrestoParser::NULLS);
      setState(225);
      antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrdering = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::FIRST

      || _la == PrestoParser::LAST)) {
        antlrcpp::downCast<SortItemContext *>(_localctx)->nullOrdering = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuerySpecificationContext ------------------------------------------------------------------

PrestoParser::QuerySpecificationContext::QuerySpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::SELECT() {
  return getToken(PrestoParser::SELECT, 0);
}

std::vector<PrestoParser::SelectItemContext *> PrestoParser::QuerySpecificationContext::selectItem() {
  return getRuleContexts<PrestoParser::SelectItemContext>();
}

PrestoParser::SelectItemContext* PrestoParser::QuerySpecificationContext::selectItem(size_t i) {
  return getRuleContext<PrestoParser::SelectItemContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::QuerySpecificationContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

std::vector<PrestoParser::RelationContext *> PrestoParser::QuerySpecificationContext::relation() {
  return getRuleContexts<PrestoParser::RelationContext>();
}

PrestoParser::RelationContext* PrestoParser::QuerySpecificationContext::relation(size_t i) {
  return getRuleContext<PrestoParser::RelationContext>(i);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::WHERE() {
  return getToken(PrestoParser::WHERE, 0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::GROUP() {
  return getToken(PrestoParser::GROUP, 0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::BY() {
  return getToken(PrestoParser::BY, 0);
}

PrestoParser::GroupByContext* PrestoParser::QuerySpecificationContext::groupBy() {
  return getRuleContext<PrestoParser::GroupByContext>(0);
}

tree::TerminalNode* PrestoParser::QuerySpecificationContext::HAVING() {
  return getToken(PrestoParser::HAVING, 0);
}

std::vector<PrestoParser::BooleanExpressionContext *> PrestoParser::QuerySpecificationContext::booleanExpression() {
  return getRuleContexts<PrestoParser::BooleanExpressionContext>();
}

PrestoParser::BooleanExpressionContext* PrestoParser::QuerySpecificationContext::booleanExpression(size_t i) {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(i);
}


size_t PrestoParser::QuerySpecificationContext::getRuleIndex() const {
  return PrestoParser::RuleQuerySpecification;
}

void PrestoParser::QuerySpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuerySpecification(this);
}

void PrestoParser::QuerySpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuerySpecification(this);
}


std::any PrestoParser::QuerySpecificationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuerySpecification(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QuerySpecificationContext* PrestoParser::querySpecification() {
  QuerySpecificationContext *_localctx = _tracker.createInstance<QuerySpecificationContext>(_ctx, getState());
  enterRule(_localctx, 22, PrestoParser::RuleQuerySpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(228);
    match(PrestoParser::SELECT);
    setState(230);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 18, _ctx)) {
    case 1: {
      setState(229);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(232);
    selectItem();
    setState(237);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(233);
        match(PrestoParser::T__0);
        setState(234);
        selectItem(); 
      }
      setState(239);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 19, _ctx);
    }
    setState(249);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx)) {
    case 1: {
      setState(240);
      match(PrestoParser::FROM);
      setState(241);
      relation(0);
      setState(246);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(242);
          match(PrestoParser::T__0);
          setState(243);
          relation(0); 
        }
        setState(248);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
      }
      break;
    }

    default:
      break;
    }
    setState(253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 22, _ctx)) {
    case 1: {
      setState(251);
      match(PrestoParser::WHERE);
      setState(252);
      antlrcpp::downCast<QuerySpecificationContext *>(_localctx)->where = booleanExpression(0);
      break;
    }

    default:
      break;
    }
    setState(258);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(255);
      match(PrestoParser::GROUP);
      setState(256);
      match(PrestoParser::BY);
      setState(257);
      groupBy();
      break;
    }

    default:
      break;
    }
    setState(262);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(260);
      match(PrestoParser::HAVING);
      setState(261);
      antlrcpp::downCast<QuerySpecificationContext *>(_localctx)->having = booleanExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupByContext ------------------------------------------------------------------

PrestoParser::GroupByContext::GroupByContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::GroupingElementContext *> PrestoParser::GroupByContext::groupingElement() {
  return getRuleContexts<PrestoParser::GroupingElementContext>();
}

PrestoParser::GroupingElementContext* PrestoParser::GroupByContext::groupingElement(size_t i) {
  return getRuleContext<PrestoParser::GroupingElementContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::GroupByContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}


size_t PrestoParser::GroupByContext::getRuleIndex() const {
  return PrestoParser::RuleGroupBy;
}

void PrestoParser::GroupByContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupBy(this);
}

void PrestoParser::GroupByContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupBy(this);
}


std::any PrestoParser::GroupByContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupBy(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupByContext* PrestoParser::groupBy() {
  GroupByContext *_localctx = _tracker.createInstance<GroupByContext>(_ctx, getState());
  enterRule(_localctx, 24, PrestoParser::RuleGroupBy);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(265);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 25, _ctx)) {
    case 1: {
      setState(264);
      setQuantifier();
      break;
    }

    default:
      break;
    }
    setState(267);
    groupingElement();
    setState(272);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(268);
        match(PrestoParser::T__0);
        setState(269);
        groupingElement(); 
      }
      setState(274);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 26, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingElementContext ------------------------------------------------------------------

PrestoParser::GroupingElementContext::GroupingElementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::GroupingElementContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingElement;
}

void PrestoParser::GroupingElementContext::copyFrom(GroupingElementContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- MultipleGroupingSetsContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::MultipleGroupingSetsContext::GROUPING() {
  return getToken(PrestoParser::GROUPING, 0);
}

tree::TerminalNode* PrestoParser::MultipleGroupingSetsContext::SETS() {
  return getToken(PrestoParser::SETS, 0);
}

std::vector<PrestoParser::GroupingSetContext *> PrestoParser::MultipleGroupingSetsContext::groupingSet() {
  return getRuleContexts<PrestoParser::GroupingSetContext>();
}

PrestoParser::GroupingSetContext* PrestoParser::MultipleGroupingSetsContext::groupingSet(size_t i) {
  return getRuleContext<PrestoParser::GroupingSetContext>(i);
}

PrestoParser::MultipleGroupingSetsContext::MultipleGroupingSetsContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::MultipleGroupingSetsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultipleGroupingSets(this);
}
void PrestoParser::MultipleGroupingSetsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultipleGroupingSets(this);
}

std::any PrestoParser::MultipleGroupingSetsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitMultipleGroupingSets(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SingleGroupingSetContext ------------------------------------------------------------------

PrestoParser::GroupingExpressionsContext* PrestoParser::SingleGroupingSetContext::groupingExpressions() {
  return getRuleContext<PrestoParser::GroupingExpressionsContext>(0);
}

PrestoParser::SingleGroupingSetContext::SingleGroupingSetContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::SingleGroupingSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSingleGroupingSet(this);
}
void PrestoParser::SingleGroupingSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSingleGroupingSet(this);
}

std::any PrestoParser::SingleGroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSingleGroupingSet(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CubeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CubeContext::CUBE() {
  return getToken(PrestoParser::CUBE, 0);
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::CubeContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::CubeContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}

PrestoParser::CubeContext::CubeContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::CubeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCube(this);
}
void PrestoParser::CubeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCube(this);
}

std::any PrestoParser::CubeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCube(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RollupContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::RollupContext::ROLLUP() {
  return getToken(PrestoParser::ROLLUP, 0);
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::RollupContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::RollupContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}

PrestoParser::RollupContext::RollupContext(GroupingElementContext *ctx) { copyFrom(ctx); }

void PrestoParser::RollupContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRollup(this);
}
void PrestoParser::RollupContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRollup(this);
}

std::any PrestoParser::RollupContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRollup(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::GroupingElementContext* PrestoParser::groupingElement() {
  GroupingElementContext *_localctx = _tracker.createInstance<GroupingElementContext>(_ctx, getState());
  enterRule(_localctx, 26, PrestoParser::RuleGroupingElement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(315);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NOT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::PLUS:
      case PrestoParser::MINUS:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<PrestoParser::SingleGroupingSetContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(275);
        groupingExpressions();
        break;
      }

      case PrestoParser::ROLLUP: {
        _localctx = _tracker.createInstance<PrestoParser::RollupContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(276);
        match(PrestoParser::ROLLUP);
        setState(277);
        match(PrestoParser::T__1);
        setState(286);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(278);
          qualifiedName();
          setState(283);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(279);
            match(PrestoParser::T__0);
            setState(280);
            qualifiedName();
            setState(285);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(288);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::CUBE: {
        _localctx = _tracker.createInstance<PrestoParser::CubeContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(289);
        match(PrestoParser::CUBE);
        setState(290);
        match(PrestoParser::T__1);
        setState(299);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(291);
          qualifiedName();
          setState(296);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(292);
            match(PrestoParser::T__0);
            setState(293);
            qualifiedName();
            setState(298);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(301);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::GROUPING: {
        _localctx = _tracker.createInstance<PrestoParser::MultipleGroupingSetsContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(302);
        match(PrestoParser::GROUPING);
        setState(303);
        match(PrestoParser::SETS);
        setState(304);
        match(PrestoParser::T__1);
        setState(305);
        groupingSet();
        setState(310);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(306);
          match(PrestoParser::T__0);
          setState(307);
          groupingSet();
          setState(312);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(313);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingExpressionsContext ------------------------------------------------------------------

PrestoParser::GroupingExpressionsContext::GroupingExpressionsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::GroupingExpressionsContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::GroupingExpressionsContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::GroupingExpressionsContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingExpressions;
}

void PrestoParser::GroupingExpressionsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupingExpressions(this);
}

void PrestoParser::GroupingExpressionsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupingExpressions(this);
}


std::any PrestoParser::GroupingExpressionsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupingExpressions(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupingExpressionsContext* PrestoParser::groupingExpressions() {
  GroupingExpressionsContext *_localctx = _tracker.createInstance<GroupingExpressionsContext>(_ctx, getState());
  enterRule(_localctx, 28, PrestoParser::RuleGroupingExpressions);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(330);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(317);
      match(PrestoParser::T__1);
      setState(326);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(318);
        expression();
        setState(323);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(319);
          match(PrestoParser::T__0);
          setState(320);
          expression();
          setState(325);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(328);
      match(PrestoParser::T__2);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(329);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- GroupingSetContext ------------------------------------------------------------------

PrestoParser::GroupingSetContext::GroupingSetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::QualifiedNameContext *> PrestoParser::GroupingSetContext::qualifiedName() {
  return getRuleContexts<PrestoParser::QualifiedNameContext>();
}

PrestoParser::QualifiedNameContext* PrestoParser::GroupingSetContext::qualifiedName(size_t i) {
  return getRuleContext<PrestoParser::QualifiedNameContext>(i);
}


size_t PrestoParser::GroupingSetContext::getRuleIndex() const {
  return PrestoParser::RuleGroupingSet;
}

void PrestoParser::GroupingSetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGroupingSet(this);
}

void PrestoParser::GroupingSetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGroupingSet(this);
}


std::any PrestoParser::GroupingSetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitGroupingSet(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::GroupingSetContext* PrestoParser::groupingSet() {
  GroupingSetContext *_localctx = _tracker.createInstance<GroupingSetContext>(_ctx, getState());
  enterRule(_localctx, 30, PrestoParser::RuleGroupingSet);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(345);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1: {
        enterOuterAlt(_localctx, 1);
        setState(332);
        match(PrestoParser::T__1);
        setState(341);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << PrestoParser::ADD)
          | (1ULL << PrestoParser::ALL)
          | (1ULL << PrestoParser::SOME)
          | (1ULL << PrestoParser::ANY)
          | (1ULL << PrestoParser::AT)
          | (1ULL << PrestoParser::NO)
          | (1ULL << PrestoParser::SUBSTRING)
          | (1ULL << PrestoParser::POSITION)
          | (1ULL << PrestoParser::TINYINT)
          | (1ULL << PrestoParser::SMALLINT)
          | (1ULL << PrestoParser::INTEGER)
          | (1ULL << PrestoParser::DATE)
          | (1ULL << PrestoParser::TIME)
          | (1ULL << PrestoParser::TIMESTAMP)
          | (1ULL << PrestoParser::INTERVAL)
          | (1ULL << PrestoParser::YEAR)
          | (1ULL << PrestoParser::MONTH)
          | (1ULL << PrestoParser::DAY)
          | (1ULL << PrestoParser::HOUR)
          | (1ULL << PrestoParser::MINUTE)
          | (1ULL << PrestoParser::SECOND)
          | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 85) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 85)) & ((1ULL << (PrestoParser::FILTER - 85))
          | (1ULL << (PrestoParser::OVER - 85))
          | (1ULL << (PrestoParser::PARTITION - 85))
          | (1ULL << (PrestoParser::RANGE - 85))
          | (1ULL << (PrestoParser::ROWS - 85))
          | (1ULL << (PrestoParser::PRECEDING - 85))
          | (1ULL << (PrestoParser::FOLLOWING - 85))
          | (1ULL << (PrestoParser::CURRENT - 85))
          | (1ULL << (PrestoParser::ROW - 85))
          | (1ULL << (PrestoParser::SCHEMA - 85))
          | (1ULL << (PrestoParser::COMMENT - 85))
          | (1ULL << (PrestoParser::VIEW - 85))
          | (1ULL << (PrestoParser::REPLACE - 85))
          | (1ULL << (PrestoParser::GRANT - 85))
          | (1ULL << (PrestoParser::REVOKE - 85))
          | (1ULL << (PrestoParser::PRIVILEGES - 85))
          | (1ULL << (PrestoParser::PUBLIC - 85))
          | (1ULL << (PrestoParser::OPTION - 85))
          | (1ULL << (PrestoParser::EXPLAIN - 85))
          | (1ULL << (PrestoParser::ANALYZE - 85))
          | (1ULL << (PrestoParser::FORMAT - 85))
          | (1ULL << (PrestoParser::TYPE - 85))
          | (1ULL << (PrestoParser::TEXT - 85))
          | (1ULL << (PrestoParser::GRAPHVIZ - 85))
          | (1ULL << (PrestoParser::LOGICAL - 85))
          | (1ULL << (PrestoParser::DISTRIBUTED - 85))
          | (1ULL << (PrestoParser::VALIDATE - 85))
          | (1ULL << (PrestoParser::SHOW - 85))
          | (1ULL << (PrestoParser::TABLES - 85))
          | (1ULL << (PrestoParser::SCHEMAS - 85))
          | (1ULL << (PrestoParser::CATALOGS - 85))
          | (1ULL << (PrestoParser::COLUMNS - 85))
          | (1ULL << (PrestoParser::COLUMN - 85))
          | (1ULL << (PrestoParser::USE - 85))
          | (1ULL << (PrestoParser::PARTITIONS - 85))
          | (1ULL << (PrestoParser::FUNCTIONS - 85))
          | (1ULL << (PrestoParser::TO - 85))
          | (1ULL << (PrestoParser::SYSTEM - 85))
          | (1ULL << (PrestoParser::BERNOULLI - 85))
          | (1ULL << (PrestoParser::POISSONIZED - 85))
          | (1ULL << (PrestoParser::TABLESAMPLE - 85))
          | (1ULL << (PrestoParser::ARRAY - 85))
          | (1ULL << (PrestoParser::MAP - 85)))) != 0) || ((((_la - 149) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 149)) & ((1ULL << (PrestoParser::SET - 149))
          | (1ULL << (PrestoParser::RESET - 149))
          | (1ULL << (PrestoParser::SESSION - 149))
          | (1ULL << (PrestoParser::DATA - 149))
          | (1ULL << (PrestoParser::START - 149))
          | (1ULL << (PrestoParser::TRANSACTION - 149))
          | (1ULL << (PrestoParser::COMMIT - 149))
          | (1ULL << (PrestoParser::ROLLBACK - 149))
          | (1ULL << (PrestoParser::WORK - 149))
          | (1ULL << (PrestoParser::ISOLATION - 149))
          | (1ULL << (PrestoParser::LEVEL - 149))
          | (1ULL << (PrestoParser::SERIALIZABLE - 149))
          | (1ULL << (PrestoParser::REPEATABLE - 149))
          | (1ULL << (PrestoParser::COMMITTED - 149))
          | (1ULL << (PrestoParser::UNCOMMITTED - 149))
          | (1ULL << (PrestoParser::READ - 149))
          | (1ULL << (PrestoParser::WRITE - 149))
          | (1ULL << (PrestoParser::ONLY - 149))
          | (1ULL << (PrestoParser::CALL - 149))
          | (1ULL << (PrestoParser::INPUT - 149))
          | (1ULL << (PrestoParser::OUTPUT - 149))
          | (1ULL << (PrestoParser::CASCADE - 149))
          | (1ULL << (PrestoParser::RESTRICT - 149))
          | (1ULL << (PrestoParser::INCLUDING - 149))
          | (1ULL << (PrestoParser::EXCLUDING - 149))
          | (1ULL << (PrestoParser::PROPERTIES - 149))
          | (1ULL << (PrestoParser::NFD - 149))
          | (1ULL << (PrestoParser::NFC - 149))
          | (1ULL << (PrestoParser::NFKD - 149))
          | (1ULL << (PrestoParser::NFKC - 149))
          | (1ULL << (PrestoParser::IF - 149))
          | (1ULL << (PrestoParser::NULLIF - 149))
          | (1ULL << (PrestoParser::COALESCE - 149))
          | (1ULL << (PrestoParser::IDENTIFIER - 149))
          | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 149))
          | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 149)))) != 0)) {
          setState(333);
          qualifiedName();
          setState(338);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while (_la == PrestoParser::T__0) {
            setState(334);
            match(PrestoParser::T__0);
            setState(335);
            qualifiedName();
            setState(340);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
        }
        setState(343);
        match(PrestoParser::T__2);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 2);
        setState(344);
        qualifiedName();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamedQueryContext ------------------------------------------------------------------

PrestoParser::NamedQueryContext::NamedQueryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NamedQueryContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::QueryContext* PrestoParser::NamedQueryContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::NamedQueryContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ColumnAliasesContext* PrestoParser::NamedQueryContext::columnAliases() {
  return getRuleContext<PrestoParser::ColumnAliasesContext>(0);
}


size_t PrestoParser::NamedQueryContext::getRuleIndex() const {
  return PrestoParser::RuleNamedQuery;
}

void PrestoParser::NamedQueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedQuery(this);
}

void PrestoParser::NamedQueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedQuery(this);
}


std::any PrestoParser::NamedQueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNamedQuery(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NamedQueryContext* PrestoParser::namedQuery() {
  NamedQueryContext *_localctx = _tracker.createInstance<NamedQueryContext>(_ctx, getState());
  enterRule(_localctx, 32, PrestoParser::RuleNamedQuery);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(347);
    antlrcpp::downCast<NamedQueryContext *>(_localctx)->name = identifier();
    setState(349);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::T__1) {
      setState(348);
      columnAliases();
    }
    setState(351);
    match(PrestoParser::AS);
    setState(352);
    match(PrestoParser::T__1);
    setState(353);
    query();
    setState(354);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SetQuantifierContext ------------------------------------------------------------------

PrestoParser::SetQuantifierContext::SetQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::SetQuantifierContext::DISTINCT() {
  return getToken(PrestoParser::DISTINCT, 0);
}

tree::TerminalNode* PrestoParser::SetQuantifierContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}


size_t PrestoParser::SetQuantifierContext::getRuleIndex() const {
  return PrestoParser::RuleSetQuantifier;
}

void PrestoParser::SetQuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSetQuantifier(this);
}

void PrestoParser::SetQuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSetQuantifier(this);
}


std::any PrestoParser::SetQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSetQuantifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SetQuantifierContext* PrestoParser::setQuantifier() {
  SetQuantifierContext *_localctx = _tracker.createInstance<SetQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 34, PrestoParser::RuleSetQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(356);
    _la = _input->LA(1);
    if (!(_la == PrestoParser::ALL

    || _la == PrestoParser::DISTINCT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectItemContext ------------------------------------------------------------------

PrestoParser::SelectItemContext::SelectItemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::SelectItemContext::getRuleIndex() const {
  return PrestoParser::RuleSelectItem;
}

void PrestoParser::SelectItemContext::copyFrom(SelectItemContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SelectAllContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::SelectAllContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::SelectAllContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

PrestoParser::SelectAllContext::SelectAllContext(SelectItemContext *ctx) { copyFrom(ctx); }

void PrestoParser::SelectAllContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectAll(this);
}
void PrestoParser::SelectAllContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectAll(this);
}

std::any PrestoParser::SelectAllContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSelectAll(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SelectSingleContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::SelectSingleContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::SelectSingleContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::SelectSingleContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::SelectSingleContext::SelectSingleContext(SelectItemContext *ctx) { copyFrom(ctx); }

void PrestoParser::SelectSingleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectSingle(this);
}
void PrestoParser::SelectSingleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectSingle(this);
}

std::any PrestoParser::SelectSingleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSelectSingle(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::SelectItemContext* PrestoParser::selectItem() {
  SelectItemContext *_localctx = _tracker.createInstance<SelectItemContext>(_ctx, getState());
  enterRule(_localctx, 36, PrestoParser::RuleSelectItem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(370);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 42, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::SelectSingleContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(358);
      expression();
      setState(363);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
      case 1: {
        setState(360);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::AS) {
          setState(359);
          match(PrestoParser::AS);
        }
        setState(362);
        identifier();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::SelectAllContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(365);
      qualifiedName();
      setState(366);
      match(PrestoParser::T__3);
      setState(367);
      match(PrestoParser::ASTERISK);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::SelectAllContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(369);
      match(PrestoParser::ASTERISK);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationContext ------------------------------------------------------------------

PrestoParser::RelationContext::RelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::RelationContext::getRuleIndex() const {
  return PrestoParser::RuleRelation;
}

void PrestoParser::RelationContext::copyFrom(RelationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- RelationDefaultContext ------------------------------------------------------------------

PrestoParser::SampledRelationContext* PrestoParser::RelationDefaultContext::sampledRelation() {
  return getRuleContext<PrestoParser::SampledRelationContext>(0);
}

PrestoParser::RelationDefaultContext::RelationDefaultContext(RelationContext *ctx) { copyFrom(ctx); }

void PrestoParser::RelationDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationDefault(this);
}
void PrestoParser::RelationDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationDefault(this);
}

std::any PrestoParser::RelationDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRelationDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- JoinRelationContext ------------------------------------------------------------------

std::vector<PrestoParser::RelationContext *> PrestoParser::JoinRelationContext::relation() {
  return getRuleContexts<PrestoParser::RelationContext>();
}

PrestoParser::RelationContext* PrestoParser::JoinRelationContext::relation(size_t i) {
  return getRuleContext<PrestoParser::RelationContext>(i);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::CROSS() {
  return getToken(PrestoParser::CROSS, 0);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::JOIN() {
  return getToken(PrestoParser::JOIN, 0);
}

PrestoParser::JoinTypeContext* PrestoParser::JoinRelationContext::joinType() {
  return getRuleContext<PrestoParser::JoinTypeContext>(0);
}

PrestoParser::JoinCriteriaContext* PrestoParser::JoinRelationContext::joinCriteria() {
  return getRuleContext<PrestoParser::JoinCriteriaContext>(0);
}

tree::TerminalNode* PrestoParser::JoinRelationContext::NATURAL() {
  return getToken(PrestoParser::NATURAL, 0);
}

PrestoParser::SampledRelationContext* PrestoParser::JoinRelationContext::sampledRelation() {
  return getRuleContext<PrestoParser::SampledRelationContext>(0);
}

PrestoParser::JoinRelationContext::JoinRelationContext(RelationContext *ctx) { copyFrom(ctx); }

void PrestoParser::JoinRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinRelation(this);
}
void PrestoParser::JoinRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinRelation(this);
}

std::any PrestoParser::JoinRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::RelationContext* PrestoParser::relation() {
   return relation(0);
}

PrestoParser::RelationContext* PrestoParser::relation(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::RelationContext *_localctx = _tracker.createInstance<RelationContext>(_ctx, parentState);
  PrestoParser::RelationContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 38;
  enterRecursionRule(_localctx, 38, PrestoParser::RuleRelation, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    _localctx = _tracker.createInstance<RelationDefaultContext>(_localctx);
    _ctx = _localctx;
    previousContext = _localctx;

    setState(373);
    sampledRelation();
    _ctx->stop = _input->LT(-1);
    setState(393);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        auto newContext = _tracker.createInstance<JoinRelationContext>(_tracker.createInstance<RelationContext>(parentContext, parentState));
        _localctx = newContext;
        newContext->left = previousContext;
        pushNewRecursionContext(newContext, startState, RuleRelation);
        setState(375);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(389);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case PrestoParser::CROSS: {
            setState(376);
            match(PrestoParser::CROSS);
            setState(377);
            match(PrestoParser::JOIN);
            setState(378);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = sampledRelation();
            break;
          }

          case PrestoParser::JOIN:
          case PrestoParser::INNER:
          case PrestoParser::LEFT:
          case PrestoParser::RIGHT:
          case PrestoParser::FULL: {
            setState(379);
            joinType();
            setState(380);
            match(PrestoParser::JOIN);
            setState(381);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->rightRelation = relation(0);
            setState(382);
            joinCriteria();
            break;
          }

          case PrestoParser::NATURAL: {
            setState(384);
            match(PrestoParser::NATURAL);
            setState(385);
            joinType();
            setState(386);
            match(PrestoParser::JOIN);
            setState(387);
            antlrcpp::downCast<JoinRelationContext *>(_localctx)->right = sampledRelation();
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(395);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- JoinTypeContext ------------------------------------------------------------------

PrestoParser::JoinTypeContext::JoinTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::JoinTypeContext::INNER() {
  return getToken(PrestoParser::INNER, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::LEFT() {
  return getToken(PrestoParser::LEFT, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::OUTER() {
  return getToken(PrestoParser::OUTER, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::RIGHT() {
  return getToken(PrestoParser::RIGHT, 0);
}

tree::TerminalNode* PrestoParser::JoinTypeContext::FULL() {
  return getToken(PrestoParser::FULL, 0);
}


size_t PrestoParser::JoinTypeContext::getRuleIndex() const {
  return PrestoParser::RuleJoinType;
}

void PrestoParser::JoinTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinType(this);
}

void PrestoParser::JoinTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinType(this);
}


std::any PrestoParser::JoinTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::JoinTypeContext* PrestoParser::joinType() {
  JoinTypeContext *_localctx = _tracker.createInstance<JoinTypeContext>(_ctx, getState());
  enterRule(_localctx, 40, PrestoParser::RuleJoinType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(411);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::JOIN:
      case PrestoParser::INNER: {
        enterOuterAlt(_localctx, 1);
        setState(397);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::INNER) {
          setState(396);
          match(PrestoParser::INNER);
        }
        break;
      }

      case PrestoParser::LEFT: {
        enterOuterAlt(_localctx, 2);
        setState(399);
        match(PrestoParser::LEFT);
        setState(401);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(400);
          match(PrestoParser::OUTER);
        }
        break;
      }

      case PrestoParser::RIGHT: {
        enterOuterAlt(_localctx, 3);
        setState(403);
        match(PrestoParser::RIGHT);
        setState(405);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(404);
          match(PrestoParser::OUTER);
        }
        break;
      }

      case PrestoParser::FULL: {
        enterOuterAlt(_localctx, 4);
        setState(407);
        match(PrestoParser::FULL);
        setState(409);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == PrestoParser::OUTER) {
          setState(408);
          match(PrestoParser::OUTER);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JoinCriteriaContext ------------------------------------------------------------------

PrestoParser::JoinCriteriaContext::JoinCriteriaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::JoinCriteriaContext::ON() {
  return getToken(PrestoParser::ON, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::JoinCriteriaContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::JoinCriteriaContext::USING() {
  return getToken(PrestoParser::USING, 0);
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::JoinCriteriaContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::JoinCriteriaContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::JoinCriteriaContext::getRuleIndex() const {
  return PrestoParser::RuleJoinCriteria;
}

void PrestoParser::JoinCriteriaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJoinCriteria(this);
}

void PrestoParser::JoinCriteriaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJoinCriteria(this);
}


std::any PrestoParser::JoinCriteriaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitJoinCriteria(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::JoinCriteriaContext* PrestoParser::joinCriteria() {
  JoinCriteriaContext *_localctx = _tracker.createInstance<JoinCriteriaContext>(_ctx, getState());
  enterRule(_localctx, 42, PrestoParser::RuleJoinCriteria);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(427);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ON: {
        enterOuterAlt(_localctx, 1);
        setState(413);
        match(PrestoParser::ON);
        setState(414);
        booleanExpression(0);
        break;
      }

      case PrestoParser::USING: {
        enterOuterAlt(_localctx, 2);
        setState(415);
        match(PrestoParser::USING);
        setState(416);
        match(PrestoParser::T__1);
        setState(417);
        identifier();
        setState(422);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(418);
          match(PrestoParser::T__0);
          setState(419);
          identifier();
          setState(424);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(425);
        match(PrestoParser::T__2);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampledRelationContext ------------------------------------------------------------------

PrestoParser::SampledRelationContext::SampledRelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::AliasedRelationContext* PrestoParser::SampledRelationContext::aliasedRelation() {
  return getRuleContext<PrestoParser::AliasedRelationContext>(0);
}

tree::TerminalNode* PrestoParser::SampledRelationContext::TABLESAMPLE() {
  return getToken(PrestoParser::TABLESAMPLE, 0);
}

PrestoParser::SampleTypeContext* PrestoParser::SampledRelationContext::sampleType() {
  return getRuleContext<PrestoParser::SampleTypeContext>(0);
}

PrestoParser::ExpressionContext* PrestoParser::SampledRelationContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}


size_t PrestoParser::SampledRelationContext::getRuleIndex() const {
  return PrestoParser::RuleSampledRelation;
}

void PrestoParser::SampledRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampledRelation(this);
}

void PrestoParser::SampledRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampledRelation(this);
}


std::any PrestoParser::SampledRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSampledRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SampledRelationContext* PrestoParser::sampledRelation() {
  SampledRelationContext *_localctx = _tracker.createInstance<SampledRelationContext>(_ctx, getState());
  enterRule(_localctx, 44, PrestoParser::RuleSampledRelation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(429);
    aliasedRelation();
    setState(436);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 52, _ctx)) {
    case 1: {
      setState(430);
      match(PrestoParser::TABLESAMPLE);
      setState(431);
      sampleType();
      setState(432);
      match(PrestoParser::T__1);
      setState(433);
      antlrcpp::downCast<SampledRelationContext *>(_localctx)->percentage = expression();
      setState(434);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SampleTypeContext ------------------------------------------------------------------

PrestoParser::SampleTypeContext::SampleTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::SampleTypeContext::BERNOULLI() {
  return getToken(PrestoParser::BERNOULLI, 0);
}

tree::TerminalNode* PrestoParser::SampleTypeContext::SYSTEM() {
  return getToken(PrestoParser::SYSTEM, 0);
}

tree::TerminalNode* PrestoParser::SampleTypeContext::POISSONIZED() {
  return getToken(PrestoParser::POISSONIZED, 0);
}


size_t PrestoParser::SampleTypeContext::getRuleIndex() const {
  return PrestoParser::RuleSampleType;
}

void PrestoParser::SampleTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSampleType(this);
}

void PrestoParser::SampleTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSampleType(this);
}


std::any PrestoParser::SampleTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSampleType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::SampleTypeContext* PrestoParser::sampleType() {
  SampleTypeContext *_localctx = _tracker.createInstance<SampleTypeContext>(_ctx, getState());
  enterRule(_localctx, 46, PrestoParser::RuleSampleType);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(438);
    _la = _input->LA(1);
    if (!(((((_la - 139) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 139)) & ((1ULL << (PrestoParser::SYSTEM - 139))
      | (1ULL << (PrestoParser::BERNOULLI - 139))
      | (1ULL << (PrestoParser::POISSONIZED - 139)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasedRelationContext ------------------------------------------------------------------

PrestoParser::AliasedRelationContext::AliasedRelationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::RelationPrimaryContext* PrestoParser::AliasedRelationContext::relationPrimary() {
  return getRuleContext<PrestoParser::RelationPrimaryContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::AliasedRelationContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::AliasedRelationContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::ColumnAliasesContext* PrestoParser::AliasedRelationContext::columnAliases() {
  return getRuleContext<PrestoParser::ColumnAliasesContext>(0);
}


size_t PrestoParser::AliasedRelationContext::getRuleIndex() const {
  return PrestoParser::RuleAliasedRelation;
}

void PrestoParser::AliasedRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasedRelation(this);
}

void PrestoParser::AliasedRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasedRelation(this);
}


std::any PrestoParser::AliasedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitAliasedRelation(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::AliasedRelationContext* PrestoParser::aliasedRelation() {
  AliasedRelationContext *_localctx = _tracker.createInstance<AliasedRelationContext>(_ctx, getState());
  enterRule(_localctx, 48, PrestoParser::RuleAliasedRelation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(440);
    relationPrimary();
    setState(448);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 55, _ctx)) {
    case 1: {
      setState(442);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::AS) {
        setState(441);
        match(PrestoParser::AS);
      }
      setState(444);
      identifier();
      setState(446);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
      case 1: {
        setState(445);
        columnAliases();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ColumnAliasesContext ------------------------------------------------------------------

PrestoParser::ColumnAliasesContext::ColumnAliasesContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::ColumnAliasesContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::ColumnAliasesContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::ColumnAliasesContext::getRuleIndex() const {
  return PrestoParser::RuleColumnAliases;
}

void PrestoParser::ColumnAliasesContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnAliases(this);
}

void PrestoParser::ColumnAliasesContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnAliases(this);
}


std::any PrestoParser::ColumnAliasesContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnAliases(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ColumnAliasesContext* PrestoParser::columnAliases() {
  ColumnAliasesContext *_localctx = _tracker.createInstance<ColumnAliasesContext>(_ctx, getState());
  enterRule(_localctx, 50, PrestoParser::RuleColumnAliases);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(450);
    match(PrestoParser::T__1);
    setState(451);
    identifier();
    setState(456);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == PrestoParser::T__0) {
      setState(452);
      match(PrestoParser::T__0);
      setState(453);
      identifier();
      setState(458);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(459);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationPrimaryContext ------------------------------------------------------------------

PrestoParser::RelationPrimaryContext::RelationPrimaryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::RelationPrimaryContext::getRuleIndex() const {
  return PrestoParser::RuleRelationPrimary;
}

void PrestoParser::RelationPrimaryContext::copyFrom(RelationPrimaryContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- SubqueryRelationContext ------------------------------------------------------------------

PrestoParser::QueryContext* PrestoParser::SubqueryRelationContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::SubqueryRelationContext::SubqueryRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryRelation(this);
}
void PrestoParser::SubqueryRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryRelation(this);
}

std::any PrestoParser::SubqueryRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubqueryRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedRelationContext ------------------------------------------------------------------

PrestoParser::RelationContext* PrestoParser::ParenthesizedRelationContext::relation() {
  return getRuleContext<PrestoParser::RelationContext>(0);
}

PrestoParser::ParenthesizedRelationContext::ParenthesizedRelationContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParenthesizedRelationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedRelation(this);
}
void PrestoParser::ParenthesizedRelationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedRelation(this);
}

std::any PrestoParser::ParenthesizedRelationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParenthesizedRelation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnnestContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnnestContext::UNNEST() {
  return getToken(PrestoParser::UNNEST, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::UnnestContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::UnnestContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::UnnestContext::WITH() {
  return getToken(PrestoParser::WITH, 0);
}

tree::TerminalNode* PrestoParser::UnnestContext::ORDINALITY() {
  return getToken(PrestoParser::ORDINALITY, 0);
}

PrestoParser::UnnestContext::UnnestContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnnestContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnnest(this);
}
void PrestoParser::UnnestContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnnest(this);
}

std::any PrestoParser::UnnestContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnnest(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TableNameContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::TableNameContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

PrestoParser::TableNameContext::TableNameContext(RelationPrimaryContext *ctx) { copyFrom(ctx); }

void PrestoParser::TableNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTableName(this);
}
void PrestoParser::TableNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTableName(this);
}

std::any PrestoParser::TableNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTableName(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::RelationPrimaryContext* PrestoParser::relationPrimary() {
  RelationPrimaryContext *_localctx = _tracker.createInstance<RelationPrimaryContext>(_ctx, getState());
  enterRule(_localctx, 52, PrestoParser::RuleRelationPrimary);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(485);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 59, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::TableNameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(461);
      qualifiedName();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::SubqueryRelationContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(462);
      match(PrestoParser::T__1);
      setState(463);
      query();
      setState(464);
      match(PrestoParser::T__2);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::UnnestContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(466);
      match(PrestoParser::UNNEST);
      setState(467);
      match(PrestoParser::T__1);
      setState(468);
      expression();
      setState(473);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(469);
        match(PrestoParser::T__0);
        setState(470);
        expression();
        setState(475);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(476);
      match(PrestoParser::T__2);
      setState(479);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx)) {
      case 1: {
        setState(477);
        match(PrestoParser::WITH);
        setState(478);
        match(PrestoParser::ORDINALITY);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::ParenthesizedRelationContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(481);
      match(PrestoParser::T__1);
      setState(482);
      relation(0);
      setState(483);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

PrestoParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::BooleanExpressionContext* PrestoParser::ExpressionContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}


size_t PrestoParser::ExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleExpression;
}

void PrestoParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void PrestoParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}


std::any PrestoParser::ExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExpression(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ExpressionContext* PrestoParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 54, PrestoParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(487);
    booleanExpression(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanExpressionContext ------------------------------------------------------------------

PrestoParser::BooleanExpressionContext::BooleanExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::BooleanExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleBooleanExpression;
}

void PrestoParser::BooleanExpressionContext::copyFrom(BooleanExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- LogicalNotContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::LogicalNotContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::LogicalNotContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}

PrestoParser::LogicalNotContext::LogicalNotContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LogicalNotContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalNot(this);
}
void PrestoParser::LogicalNotContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalNot(this);
}

std::any PrestoParser::LogicalNotContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLogicalNot(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanDefaultContext ------------------------------------------------------------------

PrestoParser::PredicatedContext* PrestoParser::BooleanDefaultContext::predicated() {
  return getRuleContext<PrestoParser::PredicatedContext>(0);
}

PrestoParser::BooleanDefaultContext::BooleanDefaultContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BooleanDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanDefault(this);
}
void PrestoParser::BooleanDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanDefault(this);
}

std::any PrestoParser::BooleanDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LogicalBinaryContext ------------------------------------------------------------------

std::vector<PrestoParser::BooleanExpressionContext *> PrestoParser::LogicalBinaryContext::booleanExpression() {
  return getRuleContexts<PrestoParser::BooleanExpressionContext>();
}

PrestoParser::BooleanExpressionContext* PrestoParser::LogicalBinaryContext::booleanExpression(size_t i) {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::LogicalBinaryContext::AND() {
  return getToken(PrestoParser::AND, 0);
}

tree::TerminalNode* PrestoParser::LogicalBinaryContext::OR() {
  return getToken(PrestoParser::OR, 0);
}

PrestoParser::LogicalBinaryContext::LogicalBinaryContext(BooleanExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LogicalBinaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalBinary(this);
}
void PrestoParser::LogicalBinaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalBinary(this);
}

std::any PrestoParser::LogicalBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLogicalBinary(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BooleanExpressionContext* PrestoParser::booleanExpression() {
   return booleanExpression(0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::booleanExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::BooleanExpressionContext *_localctx = _tracker.createInstance<BooleanExpressionContext>(_ctx, parentState);
  PrestoParser::BooleanExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, PrestoParser::RuleBooleanExpression, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(493);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::PLUS:
      case PrestoParser::MINUS:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<BooleanDefaultContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(490);
        predicated();
        break;
      }

      case PrestoParser::NOT: {
        _localctx = _tracker.createInstance<LogicalNotContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(491);
        match(PrestoParser::NOT);
        setState(492);
        booleanExpression(3);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(503);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(501);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(495);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(496);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(PrestoParser::AND);
          setState(497);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(3);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<LogicalBinaryContext>(_tracker.createInstance<BooleanExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleBooleanExpression);
          setState(498);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(499);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->operator_ = match(PrestoParser::OR);
          setState(500);
          antlrcpp::downCast<LogicalBinaryContext *>(_localctx)->right = booleanExpression(2);
          break;
        }

        default:
          break;
        } 
      }
      setState(505);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PredicatedContext ------------------------------------------------------------------

PrestoParser::PredicatedContext::PredicatedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

PrestoParser::ValueExpressionContext* PrestoParser::PredicatedContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::PredicateContext* PrestoParser::PredicatedContext::predicate() {
  return getRuleContext<PrestoParser::PredicateContext>(0);
}


size_t PrestoParser::PredicatedContext::getRuleIndex() const {
  return PrestoParser::RulePredicated;
}

void PrestoParser::PredicatedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPredicated(this);
}

void PrestoParser::PredicatedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPredicated(this);
}


std::any PrestoParser::PredicatedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPredicated(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PredicatedContext* PrestoParser::predicated() {
  PredicatedContext *_localctx = _tracker.createInstance<PredicatedContext>(_ctx, getState());
  enterRule(_localctx, 58, PrestoParser::RulePredicated);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(506);
    valueExpression(0);
    setState(508);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 63, _ctx)) {
    case 1: {
      setState(507);
      predicate();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PredicateContext ------------------------------------------------------------------

PrestoParser::PredicateContext::PredicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::PredicateContext::getRuleIndex() const {
  return PrestoParser::RulePredicate;
}

void PrestoParser::PredicateContext::copyFrom(PredicateContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ComparisonContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext* PrestoParser::ComparisonContext::comparisonOperator() {
  return getRuleContext<PrestoParser::ComparisonOperatorContext>(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::ComparisonContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::ComparisonContext::ComparisonContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::ComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparison(this);
}
void PrestoParser::ComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparison(this);
}

std::any PrestoParser::ComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparison(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LikeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::LikeContext::LIKE() {
  return getToken(PrestoParser::LIKE, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::LikeContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::LikeContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::LikeContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

tree::TerminalNode* PrestoParser::LikeContext::ESCAPE() {
  return getToken(PrestoParser::ESCAPE, 0);
}

PrestoParser::LikeContext::LikeContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::LikeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLike(this);
}
void PrestoParser::LikeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLike(this);
}

std::any PrestoParser::LikeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLike(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InSubqueryContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InSubqueryContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

PrestoParser::QueryContext* PrestoParser::InSubqueryContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

tree::TerminalNode* PrestoParser::InSubqueryContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::InSubqueryContext::InSubqueryContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::InSubqueryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInSubquery(this);
}
void PrestoParser::InSubqueryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInSubquery(this);
}

std::any PrestoParser::InSubqueryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInSubquery(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DistinctFromContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DistinctFromContext::IS() {
  return getToken(PrestoParser::IS, 0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::DISTINCT() {
  return getToken(PrestoParser::DISTINCT, 0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::DistinctFromContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::DistinctFromContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::DistinctFromContext::DistinctFromContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::DistinctFromContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDistinctFrom(this);
}
void PrestoParser::DistinctFromContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDistinctFrom(this);
}

std::any PrestoParser::DistinctFromContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDistinctFrom(this);
  else
    return visitor->visitChildren(this);
}
//----------------- InListContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::InListContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::InListContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::InListContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::InListContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::InListContext::InListContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::InListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInList(this);
}
void PrestoParser::InListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInList(this);
}

std::any PrestoParser::InListContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInList(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NullPredicateContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NullPredicateContext::IS() {
  return getToken(PrestoParser::IS, 0);
}

tree::TerminalNode* PrestoParser::NullPredicateContext::NULLTOKEN() {
  return getToken(PrestoParser::NULLTOKEN, 0);
}

tree::TerminalNode* PrestoParser::NullPredicateContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::NullPredicateContext::NullPredicateContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::NullPredicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullPredicate(this);
}
void PrestoParser::NullPredicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullPredicate(this);
}

std::any PrestoParser::NullPredicateContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNullPredicate(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BetweenContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BetweenContext::BETWEEN() {
  return getToken(PrestoParser::BETWEEN, 0);
}

tree::TerminalNode* PrestoParser::BetweenContext::AND() {
  return getToken(PrestoParser::AND, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::BetweenContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::BetweenContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::BetweenContext::NOT() {
  return getToken(PrestoParser::NOT, 0);
}

PrestoParser::BetweenContext::BetweenContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::BetweenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBetween(this);
}
void PrestoParser::BetweenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBetween(this);
}

std::any PrestoParser::BetweenContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBetween(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QuantifiedComparisonContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext* PrestoParser::QuantifiedComparisonContext::comparisonOperator() {
  return getRuleContext<PrestoParser::ComparisonOperatorContext>(0);
}

PrestoParser::ComparisonQuantifierContext* PrestoParser::QuantifiedComparisonContext::comparisonQuantifier() {
  return getRuleContext<PrestoParser::ComparisonQuantifierContext>(0);
}

PrestoParser::QueryContext* PrestoParser::QuantifiedComparisonContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::QuantifiedComparisonContext::QuantifiedComparisonContext(PredicateContext *ctx) { copyFrom(ctx); }

void PrestoParser::QuantifiedComparisonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuantifiedComparison(this);
}
void PrestoParser::QuantifiedComparisonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuantifiedComparison(this);
}

std::any PrestoParser::QuantifiedComparisonContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuantifiedComparison(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::PredicateContext* PrestoParser::predicate() {
  PredicateContext *_localctx = _tracker.createInstance<PredicateContext>(_ctx, getState());
  enterRule(_localctx, 60, PrestoParser::RulePredicate);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(571);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::ComparisonContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(510);
      comparisonOperator();
      setState(511);
      antlrcpp::downCast<ComparisonContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::QuantifiedComparisonContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(513);
      comparisonOperator();
      setState(514);
      comparisonQuantifier();
      setState(515);
      match(PrestoParser::T__1);
      setState(516);
      query();
      setState(517);
      match(PrestoParser::T__2);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::BetweenContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(520);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(519);
        match(PrestoParser::NOT);
      }
      setState(522);
      match(PrestoParser::BETWEEN);
      setState(523);
      antlrcpp::downCast<BetweenContext *>(_localctx)->lower = valueExpression(0);
      setState(524);
      match(PrestoParser::AND);
      setState(525);
      antlrcpp::downCast<BetweenContext *>(_localctx)->upper = valueExpression(0);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::InListContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(528);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(527);
        match(PrestoParser::NOT);
      }
      setState(530);
      match(PrestoParser::IN);
      setState(531);
      match(PrestoParser::T__1);
      setState(532);
      expression();
      setState(537);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(533);
        match(PrestoParser::T__0);
        setState(534);
        expression();
        setState(539);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(540);
      match(PrestoParser::T__2);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<PrestoParser::InSubqueryContext>(_localctx);
      enterOuterAlt(_localctx, 5);
      setState(543);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(542);
        match(PrestoParser::NOT);
      }
      setState(545);
      match(PrestoParser::IN);
      setState(546);
      match(PrestoParser::T__1);
      setState(547);
      query();
      setState(548);
      match(PrestoParser::T__2);
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<PrestoParser::LikeContext>(_localctx);
      enterOuterAlt(_localctx, 6);
      setState(551);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(550);
        match(PrestoParser::NOT);
      }
      setState(553);
      match(PrestoParser::LIKE);
      setState(554);
      antlrcpp::downCast<LikeContext *>(_localctx)->pattern = valueExpression(0);
      setState(557);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx)) {
      case 1: {
        setState(555);
        match(PrestoParser::ESCAPE);
        setState(556);
        antlrcpp::downCast<LikeContext *>(_localctx)->escape = valueExpression(0);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<PrestoParser::NullPredicateContext>(_localctx);
      enterOuterAlt(_localctx, 7);
      setState(559);
      match(PrestoParser::IS);
      setState(561);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(560);
        match(PrestoParser::NOT);
      }
      setState(563);
      match(PrestoParser::NULLTOKEN);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<PrestoParser::DistinctFromContext>(_localctx);
      enterOuterAlt(_localctx, 8);
      setState(564);
      match(PrestoParser::IS);
      setState(566);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::NOT) {
        setState(565);
        match(PrestoParser::NOT);
      }
      setState(568);
      match(PrestoParser::DISTINCT);
      setState(569);
      match(PrestoParser::FROM);
      setState(570);
      antlrcpp::downCast<DistinctFromContext *>(_localctx)->right = valueExpression(0);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ValueExpressionContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext::ValueExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::ValueExpressionContext::getRuleIndex() const {
  return PrestoParser::RuleValueExpression;
}

void PrestoParser::ValueExpressionContext::copyFrom(ValueExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ValueExpressionDefaultContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::ValueExpressionDefaultContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::ValueExpressionDefaultContext::ValueExpressionDefaultContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ValueExpressionDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValueExpressionDefault(this);
}
void PrestoParser::ValueExpressionDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValueExpressionDefault(this);
}

std::any PrestoParser::ValueExpressionDefaultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitValueExpressionDefault(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ConcatenationContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ConcatenationContext::CONCAT() {
  return getToken(PrestoParser::CONCAT, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::ConcatenationContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::ConcatenationContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

PrestoParser::ConcatenationContext::ConcatenationContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ConcatenationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConcatenation(this);
}
void PrestoParser::ConcatenationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConcatenation(this);
}

std::any PrestoParser::ConcatenationContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitConcatenation(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticBinaryContext ------------------------------------------------------------------

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::ArithmeticBinaryContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::ArithmeticBinaryContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::SLASH() {
  return getToken(PrestoParser::SLASH, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::PERCENT() {
  return getToken(PrestoParser::PERCENT, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticBinaryContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}

PrestoParser::ArithmeticBinaryContext::ArithmeticBinaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArithmeticBinaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticBinary(this);
}
void PrestoParser::ArithmeticBinaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticBinary(this);
}

std::any PrestoParser::ArithmeticBinaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArithmeticBinary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArithmeticUnaryContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext* PrestoParser::ArithmeticUnaryContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::ArithmeticUnaryContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}

tree::TerminalNode* PrestoParser::ArithmeticUnaryContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

PrestoParser::ArithmeticUnaryContext::ArithmeticUnaryContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArithmeticUnaryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArithmeticUnary(this);
}
void PrestoParser::ArithmeticUnaryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArithmeticUnary(this);
}

std::any PrestoParser::ArithmeticUnaryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArithmeticUnary(this);
  else
    return visitor->visitChildren(this);
}
//----------------- AtTimeZoneContext ------------------------------------------------------------------

PrestoParser::ValueExpressionContext* PrestoParser::AtTimeZoneContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::AtTimeZoneContext::AT() {
  return getToken(PrestoParser::AT, 0);
}

PrestoParser::TimeZoneSpecifierContext* PrestoParser::AtTimeZoneContext::timeZoneSpecifier() {
  return getRuleContext<PrestoParser::TimeZoneSpecifierContext>(0);
}

PrestoParser::AtTimeZoneContext::AtTimeZoneContext(ValueExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::AtTimeZoneContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtTimeZone(this);
}
void PrestoParser::AtTimeZoneContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtTimeZone(this);
}

std::any PrestoParser::AtTimeZoneContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitAtTimeZone(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ValueExpressionContext* PrestoParser::valueExpression() {
   return valueExpression(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::valueExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::ValueExpressionContext *_localctx = _tracker.createInstance<ValueExpressionContext>(_ctx, parentState);
  PrestoParser::ValueExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 62;
  enterRecursionRule(_localctx, 62, PrestoParser::RuleValueExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(577);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::T__1:
      case PrestoParser::T__4:
      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::EXISTS:
      case PrestoParser::NULLTOKEN:
      case PrestoParser::TRUE:
      case PrestoParser::FALSE:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::CURRENT_DATE:
      case PrestoParser::CURRENT_TIME:
      case PrestoParser::CURRENT_TIMESTAMP:
      case PrestoParser::LOCALTIME:
      case PrestoParser::LOCALTIMESTAMP:
      case PrestoParser::EXTRACT:
      case PrestoParser::CASE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::CAST:
      case PrestoParser::TRY_CAST:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NORMALIZE:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::STRING:
      case PrestoParser::BINARY_LITERAL:
      case PrestoParser::INTEGER_VALUE:
      case PrestoParser::DECIMAL_VALUE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::DOUBLE_PRECISION: {
        _localctx = _tracker.createInstance<ValueExpressionDefaultContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;

        setState(574);
        primaryExpression(0);
        break;
      }

      case PrestoParser::PLUS:
      case PrestoParser::MINUS: {
        _localctx = _tracker.createInstance<ArithmeticUnaryContext>(_localctx);
        _ctx = _localctx;
        previousContext = _localctx;
        setState(575);
        antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::PLUS

        || _la == PrestoParser::MINUS)) {
          antlrcpp::downCast<ArithmeticUnaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(576);
        valueExpression(4);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(593);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(591);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 74, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(579);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(580);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(((((_la - 194) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 194)) & ((1ULL << (PrestoParser::ASTERISK - 194))
            | (1ULL << (PrestoParser::SLASH - 194))
            | (1ULL << (PrestoParser::PERCENT - 194)))) != 0))) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(581);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(4);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<ArithmeticBinaryContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(582);

          if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
          setState(583);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _input->LT(1);
          _la = _input->LA(1);
          if (!(_la == PrestoParser::PLUS

          || _la == PrestoParser::MINUS)) {
            antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->operator_ = _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(584);
          antlrcpp::downCast<ArithmeticBinaryContext *>(_localctx)->right = valueExpression(3);
          break;
        }

        case 3: {
          auto newContext = _tracker.createInstance<ConcatenationContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->left = previousContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(585);

          if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
          setState(586);
          match(PrestoParser::CONCAT);
          setState(587);
          antlrcpp::downCast<ConcatenationContext *>(_localctx)->right = valueExpression(2);
          break;
        }

        case 4: {
          auto newContext = _tracker.createInstance<AtTimeZoneContext>(_tracker.createInstance<ValueExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          pushNewRecursionContext(newContext, startState, RuleValueExpression);
          setState(588);

          if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
          setState(589);
          match(PrestoParser::AT);
          setState(590);
          timeZoneSpecifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(595);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 75, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::PrimaryExpressionContext::getRuleIndex() const {
  return PrestoParser::RulePrimaryExpression;
}

void PrestoParser::PrimaryExpressionContext::copyFrom(PrimaryExpressionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DereferenceContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::DereferenceContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::IdentifierContext* PrestoParser::DereferenceContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::DereferenceContext::DereferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::DereferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDereference(this);
}
void PrestoParser::DereferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDereference(this);
}

std::any PrestoParser::DereferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDereference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TypeConstructorContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::TypeConstructorContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::TypeConstructorContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

tree::TerminalNode* PrestoParser::TypeConstructorContext::DOUBLE_PRECISION() {
  return getToken(PrestoParser::DOUBLE_PRECISION, 0);
}

PrestoParser::TypeConstructorContext::TypeConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::TypeConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeConstructor(this);
}
void PrestoParser::TypeConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeConstructor(this);
}

std::any PrestoParser::TypeConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTypeConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SpecialDateTimeFunctionContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_DATE() {
  return getToken(PrestoParser::CURRENT_DATE, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_TIME() {
  return getToken(PrestoParser::CURRENT_TIME, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::CURRENT_TIMESTAMP() {
  return getToken(PrestoParser::CURRENT_TIMESTAMP, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::LOCALTIME() {
  return getToken(PrestoParser::LOCALTIME, 0);
}

tree::TerminalNode* PrestoParser::SpecialDateTimeFunctionContext::LOCALTIMESTAMP() {
  return getToken(PrestoParser::LOCALTIMESTAMP, 0);
}

PrestoParser::SpecialDateTimeFunctionContext::SpecialDateTimeFunctionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SpecialDateTimeFunctionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecialDateTimeFunction(this);
}
void PrestoParser::SpecialDateTimeFunctionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecialDateTimeFunction(this);
}

std::any PrestoParser::SpecialDateTimeFunctionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSpecialDateTimeFunction(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubstringContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SubstringContext::SUBSTRING() {
  return getToken(PrestoParser::SUBSTRING, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::SubstringContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::SubstringContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::SubstringContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

tree::TerminalNode* PrestoParser::SubstringContext::FOR() {
  return getToken(PrestoParser::FOR, 0);
}

PrestoParser::SubstringContext::SubstringContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubstringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubstring(this);
}
void PrestoParser::SubstringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubstring(this);
}

std::any PrestoParser::SubstringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubstring(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CastContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CastContext::CAST() {
  return getToken(PrestoParser::CAST, 0);
}

PrestoParser::ExpressionContext* PrestoParser::CastContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::CastContext::AS() {
  return getToken(PrestoParser::AS, 0);
}

PrestoParser::TypeContext* PrestoParser::CastContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}

tree::TerminalNode* PrestoParser::CastContext::TRY_CAST() {
  return getToken(PrestoParser::TRY_CAST, 0);
}

PrestoParser::CastContext::CastContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::CastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCast(this);
}
void PrestoParser::CastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCast(this);
}

std::any PrestoParser::CastContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCast(this);
  else
    return visitor->visitChildren(this);
}
//----------------- LambdaContext ------------------------------------------------------------------

std::vector<PrestoParser::IdentifierContext *> PrestoParser::LambdaContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::LambdaContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}

PrestoParser::ExpressionContext* PrestoParser::LambdaContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::LambdaContext::LambdaContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::LambdaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambda(this);
}
void PrestoParser::LambdaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambda(this);
}

std::any PrestoParser::LambdaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitLambda(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParenthesizedExpressionContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::ParenthesizedExpressionContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::ParenthesizedExpressionContext::ParenthesizedExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParenthesizedExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParenthesizedExpression(this);
}
void PrestoParser::ParenthesizedExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParenthesizedExpression(this);
}

std::any PrestoParser::ParenthesizedExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParenthesizedExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ParameterContext ------------------------------------------------------------------

PrestoParser::ParameterContext::ParameterContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameter(this);
}
void PrestoParser::ParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameter(this);
}

std::any PrestoParser::ParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitParameter(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NormalizeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NormalizeContext::NORMALIZE() {
  return getToken(PrestoParser::NORMALIZE, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::NormalizeContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::NormalFormContext* PrestoParser::NormalizeContext::normalForm() {
  return getRuleContext<PrestoParser::NormalFormContext>(0);
}

PrestoParser::NormalizeContext::NormalizeContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NormalizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalize(this);
}
void PrestoParser::NormalizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalize(this);
}

std::any PrestoParser::NormalizeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNormalize(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntervalLiteralContext ------------------------------------------------------------------

PrestoParser::IntervalContext* PrestoParser::IntervalLiteralContext::interval() {
  return getRuleContext<PrestoParser::IntervalContext>(0);
}

PrestoParser::IntervalLiteralContext::IntervalLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::IntervalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalLiteral(this);
}
void PrestoParser::IntervalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalLiteral(this);
}

std::any PrestoParser::IntervalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntervalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NumericLiteralContext ------------------------------------------------------------------

PrestoParser::NumberContext* PrestoParser::NumericLiteralContext::number() {
  return getRuleContext<PrestoParser::NumberContext>(0);
}

PrestoParser::NumericLiteralContext::NumericLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NumericLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumericLiteral(this);
}
void PrestoParser::NumericLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumericLiteral(this);
}

std::any PrestoParser::NumericLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNumericLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BooleanLiteralContext ------------------------------------------------------------------

PrestoParser::BooleanValueContext* PrestoParser::BooleanLiteralContext::booleanValue() {
  return getRuleContext<PrestoParser::BooleanValueContext>(0);
}

PrestoParser::BooleanLiteralContext::BooleanLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BooleanLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanLiteral(this);
}
void PrestoParser::BooleanLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanLiteral(this);
}

std::any PrestoParser::BooleanLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SimpleCaseContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SimpleCaseContext::CASE() {
  return getToken(PrestoParser::CASE, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::SimpleCaseContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::SimpleCaseContext::END() {
  return getToken(PrestoParser::END, 0);
}

std::vector<PrestoParser::WhenClauseContext *> PrestoParser::SimpleCaseContext::whenClause() {
  return getRuleContexts<PrestoParser::WhenClauseContext>();
}

PrestoParser::WhenClauseContext* PrestoParser::SimpleCaseContext::whenClause(size_t i) {
  return getRuleContext<PrestoParser::WhenClauseContext>(i);
}

tree::TerminalNode* PrestoParser::SimpleCaseContext::ELSE() {
  return getToken(PrestoParser::ELSE, 0);
}

PrestoParser::ExpressionContext* PrestoParser::SimpleCaseContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::SimpleCaseContext::SimpleCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SimpleCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleCase(this);
}
void PrestoParser::SimpleCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleCase(this);
}

std::any PrestoParser::SimpleCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSimpleCase(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ColumnReferenceContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::ColumnReferenceContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ColumnReferenceContext::ColumnReferenceContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ColumnReferenceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterColumnReference(this);
}
void PrestoParser::ColumnReferenceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitColumnReference(this);
}

std::any PrestoParser::ColumnReferenceContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitColumnReference(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NullLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::NullLiteralContext::NULLTOKEN() {
  return getToken(PrestoParser::NULLTOKEN, 0);
}

PrestoParser::NullLiteralContext::NullLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::NullLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNullLiteral(this);
}
void PrestoParser::NullLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNullLiteral(this);
}

std::any PrestoParser::NullLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNullLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RowConstructorContext ------------------------------------------------------------------

std::vector<PrestoParser::ExpressionContext *> PrestoParser::RowConstructorContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::RowConstructorContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::RowConstructorContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

PrestoParser::RowConstructorContext::RowConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::RowConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRowConstructor(this);
}
void PrestoParser::RowConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRowConstructor(this);
}

std::any PrestoParser::RowConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRowConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubscriptContext ------------------------------------------------------------------

PrestoParser::PrimaryExpressionContext* PrestoParser::SubscriptContext::primaryExpression() {
  return getRuleContext<PrestoParser::PrimaryExpressionContext>(0);
}

PrestoParser::ValueExpressionContext* PrestoParser::SubscriptContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::SubscriptContext::SubscriptContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubscriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubscript(this);
}
void PrestoParser::SubscriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubscript(this);
}

std::any PrestoParser::SubscriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubscript(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SubqueryExpressionContext ------------------------------------------------------------------

PrestoParser::QueryContext* PrestoParser::SubqueryExpressionContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::SubqueryExpressionContext::SubqueryExpressionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SubqueryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSubqueryExpression(this);
}
void PrestoParser::SubqueryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSubqueryExpression(this);
}

std::any PrestoParser::SubqueryExpressionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSubqueryExpression(this);
  else
    return visitor->visitChildren(this);
}
//----------------- BinaryLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BinaryLiteralContext::BINARY_LITERAL() {
  return getToken(PrestoParser::BINARY_LITERAL, 0);
}

PrestoParser::BinaryLiteralContext::BinaryLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::BinaryLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBinaryLiteral(this);
}
void PrestoParser::BinaryLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBinaryLiteral(this);
}

std::any PrestoParser::BinaryLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBinaryLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExtractContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExtractContext::EXTRACT() {
  return getToken(PrestoParser::EXTRACT, 0);
}

PrestoParser::IdentifierContext* PrestoParser::ExtractContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

tree::TerminalNode* PrestoParser::ExtractContext::FROM() {
  return getToken(PrestoParser::FROM, 0);
}

PrestoParser::ValueExpressionContext* PrestoParser::ExtractContext::valueExpression() {
  return getRuleContext<PrestoParser::ValueExpressionContext>(0);
}

PrestoParser::ExtractContext::ExtractContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExtractContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExtract(this);
}
void PrestoParser::ExtractContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExtract(this);
}

std::any PrestoParser::ExtractContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExtract(this);
  else
    return visitor->visitChildren(this);
}
//----------------- StringLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::StringLiteralContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

PrestoParser::StringLiteralContext::StringLiteralContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::StringLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStringLiteral(this);
}
void PrestoParser::StringLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStringLiteral(this);
}

std::any PrestoParser::StringLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitStringLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ArrayConstructorContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ArrayConstructorContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::ArrayConstructorContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::ArrayConstructorContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::ArrayConstructorContext::ArrayConstructorContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ArrayConstructorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArrayConstructor(this);
}
void PrestoParser::ArrayConstructorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArrayConstructor(this);
}

std::any PrestoParser::ArrayConstructorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitArrayConstructor(this);
  else
    return visitor->visitChildren(this);
}
//----------------- FunctionCallContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext* PrestoParser::FunctionCallContext::qualifiedName() {
  return getRuleContext<PrestoParser::QualifiedNameContext>(0);
}

tree::TerminalNode* PrestoParser::FunctionCallContext::ASTERISK() {
  return getToken(PrestoParser::ASTERISK, 0);
}

PrestoParser::FilterContext* PrestoParser::FunctionCallContext::filter() {
  return getRuleContext<PrestoParser::FilterContext>(0);
}

PrestoParser::OverContext* PrestoParser::FunctionCallContext::over() {
  return getRuleContext<PrestoParser::OverContext>(0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::FunctionCallContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::FunctionCallContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}

PrestoParser::SetQuantifierContext* PrestoParser::FunctionCallContext::setQuantifier() {
  return getRuleContext<PrestoParser::SetQuantifierContext>(0);
}

PrestoParser::FunctionCallContext::FunctionCallContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::FunctionCallContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionCall(this);
}
void PrestoParser::FunctionCallContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionCall(this);
}

std::any PrestoParser::FunctionCallContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitFunctionCall(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExistsContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExistsContext::EXISTS() {
  return getToken(PrestoParser::EXISTS, 0);
}

PrestoParser::QueryContext* PrestoParser::ExistsContext::query() {
  return getRuleContext<PrestoParser::QueryContext>(0);
}

PrestoParser::ExistsContext::ExistsContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExistsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExists(this);
}
void PrestoParser::ExistsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExists(this);
}

std::any PrestoParser::ExistsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExists(this);
  else
    return visitor->visitChildren(this);
}
//----------------- PositionContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::PositionContext::POSITION() {
  return getToken(PrestoParser::POSITION, 0);
}

std::vector<PrestoParser::ValueExpressionContext *> PrestoParser::PositionContext::valueExpression() {
  return getRuleContexts<PrestoParser::ValueExpressionContext>();
}

PrestoParser::ValueExpressionContext* PrestoParser::PositionContext::valueExpression(size_t i) {
  return getRuleContext<PrestoParser::ValueExpressionContext>(i);
}

tree::TerminalNode* PrestoParser::PositionContext::IN() {
  return getToken(PrestoParser::IN, 0);
}

PrestoParser::PositionContext::PositionContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::PositionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPosition(this);
}
void PrestoParser::PositionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPosition(this);
}

std::any PrestoParser::PositionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPosition(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SearchedCaseContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SearchedCaseContext::CASE() {
  return getToken(PrestoParser::CASE, 0);
}

tree::TerminalNode* PrestoParser::SearchedCaseContext::END() {
  return getToken(PrestoParser::END, 0);
}

std::vector<PrestoParser::WhenClauseContext *> PrestoParser::SearchedCaseContext::whenClause() {
  return getRuleContexts<PrestoParser::WhenClauseContext>();
}

PrestoParser::WhenClauseContext* PrestoParser::SearchedCaseContext::whenClause(size_t i) {
  return getRuleContext<PrestoParser::WhenClauseContext>(i);
}

tree::TerminalNode* PrestoParser::SearchedCaseContext::ELSE() {
  return getToken(PrestoParser::ELSE, 0);
}

PrestoParser::ExpressionContext* PrestoParser::SearchedCaseContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::SearchedCaseContext::SearchedCaseContext(PrimaryExpressionContext *ctx) { copyFrom(ctx); }

void PrestoParser::SearchedCaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSearchedCase(this);
}
void PrestoParser::SearchedCaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSearchedCase(this);
}

std::any PrestoParser::SearchedCaseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSearchedCase(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PrimaryExpressionContext* PrestoParser::primaryExpression() {
   return primaryExpression(0);
}

PrestoParser::PrimaryExpressionContext* PrestoParser::primaryExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, parentState);
  PrestoParser::PrimaryExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 64;
  enterRecursionRule(_localctx, 64, PrestoParser::RulePrimaryExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(805);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<NullLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;

      setState(597);
      match(PrestoParser::NULLTOKEN);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<IntervalLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(598);
      interval();
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<TypeConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(599);
      identifier();
      setState(600);
      match(PrestoParser::STRING);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<TypeConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(602);
      match(PrestoParser::DOUBLE_PRECISION);
      setState(603);
      match(PrestoParser::STRING);
      break;
    }

    case 5: {
      _localctx = _tracker.createInstance<NumericLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(604);
      number();
      break;
    }

    case 6: {
      _localctx = _tracker.createInstance<BooleanLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(605);
      booleanValue();
      break;
    }

    case 7: {
      _localctx = _tracker.createInstance<StringLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(606);
      match(PrestoParser::STRING);
      break;
    }

    case 8: {
      _localctx = _tracker.createInstance<BinaryLiteralContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(607);
      match(PrestoParser::BINARY_LITERAL);
      break;
    }

    case 9: {
      _localctx = _tracker.createInstance<ParameterContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(608);
      match(PrestoParser::T__4);
      break;
    }

    case 10: {
      _localctx = _tracker.createInstance<PositionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(609);
      match(PrestoParser::POSITION);
      setState(610);
      match(PrestoParser::T__1);
      setState(611);
      valueExpression(0);
      setState(612);
      match(PrestoParser::IN);
      setState(613);
      valueExpression(0);
      setState(614);
      match(PrestoParser::T__2);
      break;
    }

    case 11: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(616);
      match(PrestoParser::T__1);
      setState(617);
      expression();
      setState(620); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(618);
        match(PrestoParser::T__0);
        setState(619);
        expression();
        setState(622); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::T__0);
      setState(624);
      match(PrestoParser::T__2);
      break;
    }

    case 12: {
      _localctx = _tracker.createInstance<RowConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(626);
      match(PrestoParser::ROW);
      setState(627);
      match(PrestoParser::T__1);
      setState(628);
      expression();
      setState(633);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(629);
        match(PrestoParser::T__0);
        setState(630);
        expression();
        setState(635);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(636);
      match(PrestoParser::T__2);
      break;
    }

    case 13: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(638);
      qualifiedName();
      setState(639);
      match(PrestoParser::T__1);
      setState(640);
      match(PrestoParser::ASTERISK);
      setState(641);
      match(PrestoParser::T__2);
      setState(643);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
      case 1: {
        setState(642);
        filter();
        break;
      }

      default:
        break;
      }
      setState(646);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
      case 1: {
        setState(645);
        over();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 14: {
      _localctx = _tracker.createInstance<FunctionCallContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(648);
      qualifiedName();
      setState(649);
      match(PrestoParser::T__1);
      setState(661);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::DISTINCT)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(651);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
        case 1: {
          setState(650);
          setQuantifier();
          break;
        }

        default:
          break;
        }
        setState(653);
        expression();
        setState(658);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(654);
          match(PrestoParser::T__0);
          setState(655);
          expression();
          setState(660);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(663);
      match(PrestoParser::T__2);
      setState(665);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx)) {
      case 1: {
        setState(664);
        filter();
        break;
      }

      default:
        break;
      }
      setState(668);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
      case 1: {
        setState(667);
        over();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 15: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(670);
      identifier();
      setState(671);
      match(PrestoParser::T__5);
      setState(672);
      expression();
      break;
    }

    case 16: {
      _localctx = _tracker.createInstance<LambdaContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(674);
      match(PrestoParser::T__1);
      setState(675);
      identifier();
      setState(680);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(676);
        match(PrestoParser::T__0);
        setState(677);
        identifier();
        setState(682);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(683);
      match(PrestoParser::T__2);
      setState(684);
      match(PrestoParser::T__5);
      setState(685);
      expression();
      break;
    }

    case 17: {
      _localctx = _tracker.createInstance<SubqueryExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(687);
      match(PrestoParser::T__1);
      setState(688);
      query();
      setState(689);
      match(PrestoParser::T__2);
      break;
    }

    case 18: {
      _localctx = _tracker.createInstance<ExistsContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(691);
      match(PrestoParser::EXISTS);
      setState(692);
      match(PrestoParser::T__1);
      setState(693);
      query();
      setState(694);
      match(PrestoParser::T__2);
      break;
    }

    case 19: {
      _localctx = _tracker.createInstance<SimpleCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(696);
      match(PrestoParser::CASE);
      setState(697);
      valueExpression(0);
      setState(699); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(698);
        whenClause();
        setState(701); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::WHEN);
      setState(705);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::ELSE) {
        setState(703);
        match(PrestoParser::ELSE);
        setState(704);
        antlrcpp::downCast<SimpleCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(707);
      match(PrestoParser::END);
      break;
    }

    case 20: {
      _localctx = _tracker.createInstance<SearchedCaseContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(709);
      match(PrestoParser::CASE);
      setState(711); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(710);
        whenClause();
        setState(713); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == PrestoParser::WHEN);
      setState(717);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::ELSE) {
        setState(715);
        match(PrestoParser::ELSE);
        setState(716);
        antlrcpp::downCast<SearchedCaseContext *>(_localctx)->elseExpression = expression();
      }
      setState(719);
      match(PrestoParser::END);
      break;
    }

    case 21: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(721);
      match(PrestoParser::CAST);
      setState(722);
      match(PrestoParser::T__1);
      setState(723);
      expression();
      setState(724);
      match(PrestoParser::AS);
      setState(725);
      type(0);
      setState(726);
      match(PrestoParser::T__2);
      break;
    }

    case 22: {
      _localctx = _tracker.createInstance<CastContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(728);
      match(PrestoParser::TRY_CAST);
      setState(729);
      match(PrestoParser::T__1);
      setState(730);
      expression();
      setState(731);
      match(PrestoParser::AS);
      setState(732);
      type(0);
      setState(733);
      match(PrestoParser::T__2);
      break;
    }

    case 23: {
      _localctx = _tracker.createInstance<ArrayConstructorContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(735);
      match(PrestoParser::ARRAY);
      setState(736);
      match(PrestoParser::T__6);
      setState(745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << PrestoParser::T__1)
        | (1ULL << PrestoParser::T__4)
        | (1ULL << PrestoParser::ADD)
        | (1ULL << PrestoParser::ALL)
        | (1ULL << PrestoParser::SOME)
        | (1ULL << PrestoParser::ANY)
        | (1ULL << PrestoParser::AT)
        | (1ULL << PrestoParser::NOT)
        | (1ULL << PrestoParser::NO)
        | (1ULL << PrestoParser::EXISTS)
        | (1ULL << PrestoParser::NULLTOKEN)
        | (1ULL << PrestoParser::TRUE)
        | (1ULL << PrestoParser::FALSE)
        | (1ULL << PrestoParser::SUBSTRING)
        | (1ULL << PrestoParser::POSITION)
        | (1ULL << PrestoParser::TINYINT)
        | (1ULL << PrestoParser::SMALLINT)
        | (1ULL << PrestoParser::INTEGER)
        | (1ULL << PrestoParser::DATE)
        | (1ULL << PrestoParser::TIME)
        | (1ULL << PrestoParser::TIMESTAMP)
        | (1ULL << PrestoParser::INTERVAL)
        | (1ULL << PrestoParser::YEAR)
        | (1ULL << PrestoParser::MONTH)
        | (1ULL << PrestoParser::DAY)
        | (1ULL << PrestoParser::HOUR)
        | (1ULL << PrestoParser::MINUTE)
        | (1ULL << PrestoParser::SECOND)
        | (1ULL << PrestoParser::ZONE))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & ((1ULL << (PrestoParser::CURRENT_DATE - 64))
        | (1ULL << (PrestoParser::CURRENT_TIME - 64))
        | (1ULL << (PrestoParser::CURRENT_TIMESTAMP - 64))
        | (1ULL << (PrestoParser::LOCALTIME - 64))
        | (1ULL << (PrestoParser::LOCALTIMESTAMP - 64))
        | (1ULL << (PrestoParser::EXTRACT - 64))
        | (1ULL << (PrestoParser::CASE - 64))
        | (1ULL << (PrestoParser::FILTER - 64))
        | (1ULL << (PrestoParser::OVER - 64))
        | (1ULL << (PrestoParser::PARTITION - 64))
        | (1ULL << (PrestoParser::RANGE - 64))
        | (1ULL << (PrestoParser::ROWS - 64))
        | (1ULL << (PrestoParser::PRECEDING - 64))
        | (1ULL << (PrestoParser::FOLLOWING - 64))
        | (1ULL << (PrestoParser::CURRENT - 64))
        | (1ULL << (PrestoParser::ROW - 64))
        | (1ULL << (PrestoParser::SCHEMA - 64))
        | (1ULL << (PrestoParser::COMMENT - 64))
        | (1ULL << (PrestoParser::VIEW - 64))
        | (1ULL << (PrestoParser::REPLACE - 64))
        | (1ULL << (PrestoParser::GRANT - 64))
        | (1ULL << (PrestoParser::REVOKE - 64))
        | (1ULL << (PrestoParser::PRIVILEGES - 64))
        | (1ULL << (PrestoParser::PUBLIC - 64))
        | (1ULL << (PrestoParser::OPTION - 64))
        | (1ULL << (PrestoParser::EXPLAIN - 64))
        | (1ULL << (PrestoParser::ANALYZE - 64))
        | (1ULL << (PrestoParser::FORMAT - 64))
        | (1ULL << (PrestoParser::TYPE - 64))
        | (1ULL << (PrestoParser::TEXT - 64))
        | (1ULL << (PrestoParser::GRAPHVIZ - 64))
        | (1ULL << (PrestoParser::LOGICAL - 64))
        | (1ULL << (PrestoParser::DISTRIBUTED - 64))
        | (1ULL << (PrestoParser::VALIDATE - 64))
        | (1ULL << (PrestoParser::CAST - 64))
        | (1ULL << (PrestoParser::TRY_CAST - 64))
        | (1ULL << (PrestoParser::SHOW - 64))
        | (1ULL << (PrestoParser::TABLES - 64))
        | (1ULL << (PrestoParser::SCHEMAS - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & ((1ULL << (PrestoParser::CATALOGS - 128))
        | (1ULL << (PrestoParser::COLUMNS - 128))
        | (1ULL << (PrestoParser::COLUMN - 128))
        | (1ULL << (PrestoParser::USE - 128))
        | (1ULL << (PrestoParser::PARTITIONS - 128))
        | (1ULL << (PrestoParser::FUNCTIONS - 128))
        | (1ULL << (PrestoParser::TO - 128))
        | (1ULL << (PrestoParser::SYSTEM - 128))
        | (1ULL << (PrestoParser::BERNOULLI - 128))
        | (1ULL << (PrestoParser::POISSONIZED - 128))
        | (1ULL << (PrestoParser::TABLESAMPLE - 128))
        | (1ULL << (PrestoParser::ARRAY - 128))
        | (1ULL << (PrestoParser::MAP - 128))
        | (1ULL << (PrestoParser::SET - 128))
        | (1ULL << (PrestoParser::RESET - 128))
        | (1ULL << (PrestoParser::SESSION - 128))
        | (1ULL << (PrestoParser::DATA - 128))
        | (1ULL << (PrestoParser::START - 128))
        | (1ULL << (PrestoParser::TRANSACTION - 128))
        | (1ULL << (PrestoParser::COMMIT - 128))
        | (1ULL << (PrestoParser::ROLLBACK - 128))
        | (1ULL << (PrestoParser::WORK - 128))
        | (1ULL << (PrestoParser::ISOLATION - 128))
        | (1ULL << (PrestoParser::LEVEL - 128))
        | (1ULL << (PrestoParser::SERIALIZABLE - 128))
        | (1ULL << (PrestoParser::REPEATABLE - 128))
        | (1ULL << (PrestoParser::COMMITTED - 128))
        | (1ULL << (PrestoParser::UNCOMMITTED - 128))
        | (1ULL << (PrestoParser::READ - 128))
        | (1ULL << (PrestoParser::WRITE - 128))
        | (1ULL << (PrestoParser::ONLY - 128))
        | (1ULL << (PrestoParser::CALL - 128))
        | (1ULL << (PrestoParser::INPUT - 128))
        | (1ULL << (PrestoParser::OUTPUT - 128))
        | (1ULL << (PrestoParser::CASCADE - 128))
        | (1ULL << (PrestoParser::RESTRICT - 128))
        | (1ULL << (PrestoParser::INCLUDING - 128))
        | (1ULL << (PrestoParser::EXCLUDING - 128))
        | (1ULL << (PrestoParser::PROPERTIES - 128))
        | (1ULL << (PrestoParser::NORMALIZE - 128))
        | (1ULL << (PrestoParser::NFD - 128))
        | (1ULL << (PrestoParser::NFC - 128))
        | (1ULL << (PrestoParser::NFKD - 128))
        | (1ULL << (PrestoParser::NFKC - 128))
        | (1ULL << (PrestoParser::IF - 128))
        | (1ULL << (PrestoParser::NULLIF - 128))
        | (1ULL << (PrestoParser::COALESCE - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 192)) & ((1ULL << (PrestoParser::PLUS - 192))
        | (1ULL << (PrestoParser::MINUS - 192))
        | (1ULL << (PrestoParser::STRING - 192))
        | (1ULL << (PrestoParser::BINARY_LITERAL - 192))
        | (1ULL << (PrestoParser::INTEGER_VALUE - 192))
        | (1ULL << (PrestoParser::DECIMAL_VALUE - 192))
        | (1ULL << (PrestoParser::IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DIGIT_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::QUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::BACKQUOTED_IDENTIFIER - 192))
        | (1ULL << (PrestoParser::DOUBLE_PRECISION - 192)))) != 0)) {
        setState(737);
        expression();
        setState(742);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(738);
          match(PrestoParser::T__0);
          setState(739);
          expression();
          setState(744);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
      }
      setState(747);
      match(PrestoParser::T__7);
      break;
    }

    case 24: {
      _localctx = _tracker.createInstance<ColumnReferenceContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(748);
      identifier();
      break;
    }

    case 25: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(749);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_DATE);
      break;
    }

    case 26: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(750);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_TIME);
      setState(754);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 92, _ctx)) {
      case 1: {
        setState(751);
        match(PrestoParser::T__1);
        setState(752);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(753);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 27: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(756);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::CURRENT_TIMESTAMP);
      setState(760);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
      case 1: {
        setState(757);
        match(PrestoParser::T__1);
        setState(758);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(759);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 28: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(762);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::LOCALTIME);
      setState(766);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 94, _ctx)) {
      case 1: {
        setState(763);
        match(PrestoParser::T__1);
        setState(764);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(765);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 29: {
      _localctx = _tracker.createInstance<SpecialDateTimeFunctionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(768);
      antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->name = match(PrestoParser::LOCALTIMESTAMP);
      setState(772);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx)) {
      case 1: {
        setState(769);
        match(PrestoParser::T__1);
        setState(770);
        antlrcpp::downCast<SpecialDateTimeFunctionContext *>(_localctx)->precision = match(PrestoParser::INTEGER_VALUE);
        setState(771);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 30: {
      _localctx = _tracker.createInstance<SubstringContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(774);
      match(PrestoParser::SUBSTRING);
      setState(775);
      match(PrestoParser::T__1);
      setState(776);
      valueExpression(0);
      setState(777);
      match(PrestoParser::FROM);
      setState(778);
      valueExpression(0);
      setState(781);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::FOR) {
        setState(779);
        match(PrestoParser::FOR);
        setState(780);
        valueExpression(0);
      }
      setState(783);
      match(PrestoParser::T__2);
      break;
    }

    case 31: {
      _localctx = _tracker.createInstance<NormalizeContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(785);
      match(PrestoParser::NORMALIZE);
      setState(786);
      match(PrestoParser::T__1);
      setState(787);
      valueExpression(0);
      setState(790);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == PrestoParser::T__0) {
        setState(788);
        match(PrestoParser::T__0);
        setState(789);
        normalForm();
      }
      setState(792);
      match(PrestoParser::T__2);
      break;
    }

    case 32: {
      _localctx = _tracker.createInstance<ExtractContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(794);
      match(PrestoParser::EXTRACT);
      setState(795);
      match(PrestoParser::T__1);
      setState(796);
      identifier();
      setState(797);
      match(PrestoParser::FROM);
      setState(798);
      valueExpression(0);
      setState(799);
      match(PrestoParser::T__2);
      break;
    }

    case 33: {
      _localctx = _tracker.createInstance<ParenthesizedExpressionContext>(_localctx);
      _ctx = _localctx;
      previousContext = _localctx;
      setState(801);
      match(PrestoParser::T__1);
      setState(802);
      expression();
      setState(803);
      match(PrestoParser::T__2);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(817);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(815);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
        case 1: {
          auto newContext = _tracker.createInstance<SubscriptContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->value = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(807);

          if (!(precpred(_ctx, 12))) throw FailedPredicateException(this, "precpred(_ctx, 12)");
          setState(808);
          match(PrestoParser::T__6);
          setState(809);
          antlrcpp::downCast<SubscriptContext *>(_localctx)->index = valueExpression(0);
          setState(810);
          match(PrestoParser::T__7);
          break;
        }

        case 2: {
          auto newContext = _tracker.createInstance<DereferenceContext>(_tracker.createInstance<PrimaryExpressionContext>(parentContext, parentState));
          _localctx = newContext;
          newContext->base = previousContext;
          pushNewRecursionContext(newContext, startState, RulePrimaryExpression);
          setState(812);

          if (!(precpred(_ctx, 10))) throw FailedPredicateException(this, "precpred(_ctx, 10)");
          setState(813);
          match(PrestoParser::T__3);
          setState(814);
          antlrcpp::downCast<DereferenceContext *>(_localctx)->fieldName = identifier();
          break;
        }

        default:
          break;
        } 
      }
      setState(819);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TimeZoneSpecifierContext ------------------------------------------------------------------

PrestoParser::TimeZoneSpecifierContext::TimeZoneSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::TimeZoneSpecifierContext::getRuleIndex() const {
  return PrestoParser::RuleTimeZoneSpecifier;
}

void PrestoParser::TimeZoneSpecifierContext::copyFrom(TimeZoneSpecifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TimeZoneIntervalContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TimeZoneIntervalContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneIntervalContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

PrestoParser::IntervalContext* PrestoParser::TimeZoneIntervalContext::interval() {
  return getRuleContext<PrestoParser::IntervalContext>(0);
}

PrestoParser::TimeZoneIntervalContext::TimeZoneIntervalContext(TimeZoneSpecifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::TimeZoneIntervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeZoneInterval(this);
}
void PrestoParser::TimeZoneIntervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeZoneInterval(this);
}

std::any PrestoParser::TimeZoneIntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTimeZoneInterval(this);
  else
    return visitor->visitChildren(this);
}
//----------------- TimeZoneStringContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TimeZoneStringContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneStringContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

tree::TerminalNode* PrestoParser::TimeZoneStringContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

PrestoParser::TimeZoneStringContext::TimeZoneStringContext(TimeZoneSpecifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::TimeZoneStringContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTimeZoneString(this);
}
void PrestoParser::TimeZoneStringContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTimeZoneString(this);
}

std::any PrestoParser::TimeZoneStringContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTimeZoneString(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::TimeZoneSpecifierContext* PrestoParser::timeZoneSpecifier() {
  TimeZoneSpecifierContext *_localctx = _tracker.createInstance<TimeZoneSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 66, PrestoParser::RuleTimeZoneSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(826);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::TimeZoneIntervalContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(820);
      match(PrestoParser::TIME);
      setState(821);
      match(PrestoParser::ZONE);
      setState(822);
      interval();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::TimeZoneStringContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(823);
      match(PrestoParser::TIME);
      setState(824);
      match(PrestoParser::ZONE);
      setState(825);
      match(PrestoParser::STRING);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonOperatorContext ------------------------------------------------------------------

PrestoParser::ComparisonOperatorContext::ComparisonOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::EQ() {
  return getToken(PrestoParser::EQ, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::NEQ() {
  return getToken(PrestoParser::NEQ, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::LT() {
  return getToken(PrestoParser::LT, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::LTE() {
  return getToken(PrestoParser::LTE, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::GT() {
  return getToken(PrestoParser::GT, 0);
}

tree::TerminalNode* PrestoParser::ComparisonOperatorContext::GTE() {
  return getToken(PrestoParser::GTE, 0);
}


size_t PrestoParser::ComparisonOperatorContext::getRuleIndex() const {
  return PrestoParser::RuleComparisonOperator;
}

void PrestoParser::ComparisonOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonOperator(this);
}

void PrestoParser::ComparisonOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonOperator(this);
}


std::any PrestoParser::ComparisonOperatorContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparisonOperator(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ComparisonOperatorContext* PrestoParser::comparisonOperator() {
  ComparisonOperatorContext *_localctx = _tracker.createInstance<ComparisonOperatorContext>(_ctx, getState());
  enterRule(_localctx, 68, PrestoParser::RuleComparisonOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(828);
    _la = _input->LA(1);
    if (!(((((_la - 186) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 186)) & ((1ULL << (PrestoParser::EQ - 186))
      | (1ULL << (PrestoParser::NEQ - 186))
      | (1ULL << (PrestoParser::LT - 186))
      | (1ULL << (PrestoParser::LTE - 186))
      | (1ULL << (PrestoParser::GT - 186))
      | (1ULL << (PrestoParser::GTE - 186)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ComparisonQuantifierContext ------------------------------------------------------------------

PrestoParser::ComparisonQuantifierContext::ComparisonQuantifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::SOME() {
  return getToken(PrestoParser::SOME, 0);
}

tree::TerminalNode* PrestoParser::ComparisonQuantifierContext::ANY() {
  return getToken(PrestoParser::ANY, 0);
}


size_t PrestoParser::ComparisonQuantifierContext::getRuleIndex() const {
  return PrestoParser::RuleComparisonQuantifier;
}

void PrestoParser::ComparisonQuantifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterComparisonQuantifier(this);
}

void PrestoParser::ComparisonQuantifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitComparisonQuantifier(this);
}


std::any PrestoParser::ComparisonQuantifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitComparisonQuantifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::ComparisonQuantifierContext* PrestoParser::comparisonQuantifier() {
  ComparisonQuantifierContext *_localctx = _tracker.createInstance<ComparisonQuantifierContext>(_ctx, getState());
  enterRule(_localctx, 70, PrestoParser::RuleComparisonQuantifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(830);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << PrestoParser::ALL)
      | (1ULL << PrestoParser::SOME)
      | (1ULL << PrestoParser::ANY))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BooleanValueContext ------------------------------------------------------------------

PrestoParser::BooleanValueContext::BooleanValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::BooleanValueContext::TRUE() {
  return getToken(PrestoParser::TRUE, 0);
}

tree::TerminalNode* PrestoParser::BooleanValueContext::FALSE() {
  return getToken(PrestoParser::FALSE, 0);
}


size_t PrestoParser::BooleanValueContext::getRuleIndex() const {
  return PrestoParser::RuleBooleanValue;
}

void PrestoParser::BooleanValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBooleanValue(this);
}

void PrestoParser::BooleanValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBooleanValue(this);
}


std::any PrestoParser::BooleanValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBooleanValue(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BooleanValueContext* PrestoParser::booleanValue() {
  BooleanValueContext *_localctx = _tracker.createInstance<BooleanValueContext>(_ctx, getState());
  enterRule(_localctx, 72, PrestoParser::RuleBooleanValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(832);
    _la = _input->LA(1);
    if (!(_la == PrestoParser::TRUE

    || _la == PrestoParser::FALSE)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalContext ------------------------------------------------------------------

PrestoParser::IntervalContext::IntervalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::IntervalContext::INTERVAL() {
  return getToken(PrestoParser::INTERVAL, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::STRING() {
  return getToken(PrestoParser::STRING, 0);
}

std::vector<PrestoParser::IntervalFieldContext *> PrestoParser::IntervalContext::intervalField() {
  return getRuleContexts<PrestoParser::IntervalFieldContext>();
}

PrestoParser::IntervalFieldContext* PrestoParser::IntervalContext::intervalField(size_t i) {
  return getRuleContext<PrestoParser::IntervalFieldContext>(i);
}

tree::TerminalNode* PrestoParser::IntervalContext::TO() {
  return getToken(PrestoParser::TO, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::PLUS() {
  return getToken(PrestoParser::PLUS, 0);
}

tree::TerminalNode* PrestoParser::IntervalContext::MINUS() {
  return getToken(PrestoParser::MINUS, 0);
}


size_t PrestoParser::IntervalContext::getRuleIndex() const {
  return PrestoParser::RuleInterval;
}

void PrestoParser::IntervalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInterval(this);
}

void PrestoParser::IntervalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInterval(this);
}


std::any PrestoParser::IntervalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitInterval(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::IntervalContext* PrestoParser::interval() {
  IntervalContext *_localctx = _tracker.createInstance<IntervalContext>(_ctx, getState());
  enterRule(_localctx, 74, PrestoParser::RuleInterval);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(834);
    match(PrestoParser::INTERVAL);
    setState(836);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::PLUS

    || _la == PrestoParser::MINUS) {
      setState(835);
      antlrcpp::downCast<IntervalContext *>(_localctx)->sign = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::PLUS

      || _la == PrestoParser::MINUS)) {
        antlrcpp::downCast<IntervalContext *>(_localctx)->sign = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
    setState(838);
    match(PrestoParser::STRING);
    setState(839);
    antlrcpp::downCast<IntervalContext *>(_localctx)->from = intervalField();
    setState(842);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(840);
      match(PrestoParser::TO);
      setState(841);
      antlrcpp::downCast<IntervalContext *>(_localctx)->to = intervalField();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IntervalFieldContext ------------------------------------------------------------------

PrestoParser::IntervalFieldContext::IntervalFieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::YEAR() {
  return getToken(PrestoParser::YEAR, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::MONTH() {
  return getToken(PrestoParser::MONTH, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::DAY() {
  return getToken(PrestoParser::DAY, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::HOUR() {
  return getToken(PrestoParser::HOUR, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::MINUTE() {
  return getToken(PrestoParser::MINUTE, 0);
}

tree::TerminalNode* PrestoParser::IntervalFieldContext::SECOND() {
  return getToken(PrestoParser::SECOND, 0);
}


size_t PrestoParser::IntervalFieldContext::getRuleIndex() const {
  return PrestoParser::RuleIntervalField;
}

void PrestoParser::IntervalFieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntervalField(this);
}

void PrestoParser::IntervalFieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntervalField(this);
}


std::any PrestoParser::IntervalFieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntervalField(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::IntervalFieldContext* PrestoParser::intervalField() {
  IntervalFieldContext *_localctx = _tracker.createInstance<IntervalFieldContext>(_ctx, getState());
  enterRule(_localctx, 76, PrestoParser::RuleIntervalField);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(844);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << PrestoParser::YEAR)
      | (1ULL << PrestoParser::MONTH)
      | (1ULL << PrestoParser::DAY)
      | (1ULL << PrestoParser::HOUR)
      | (1ULL << PrestoParser::MINUTE)
      | (1ULL << PrestoParser::SECOND))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeContext ------------------------------------------------------------------

PrestoParser::TypeContext::TypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::TypeContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::LT() {
  return getToken(PrestoParser::LT, 0);
}

std::vector<PrestoParser::TypeContext *> PrestoParser::TypeContext::type() {
  return getRuleContexts<PrestoParser::TypeContext>();
}

PrestoParser::TypeContext* PrestoParser::TypeContext::type(size_t i) {
  return getRuleContext<PrestoParser::TypeContext>(i);
}

tree::TerminalNode* PrestoParser::TypeContext::GT() {
  return getToken(PrestoParser::GT, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::MAP() {
  return getToken(PrestoParser::MAP, 0);
}

tree::TerminalNode* PrestoParser::TypeContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::TypeContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::TypeContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}

PrestoParser::BaseTypeContext* PrestoParser::TypeContext::baseType() {
  return getRuleContext<PrestoParser::BaseTypeContext>(0);
}

std::vector<PrestoParser::TypeParameterContext *> PrestoParser::TypeContext::typeParameter() {
  return getRuleContexts<PrestoParser::TypeParameterContext>();
}

PrestoParser::TypeParameterContext* PrestoParser::TypeContext::typeParameter(size_t i) {
  return getRuleContext<PrestoParser::TypeParameterContext>(i);
}


size_t PrestoParser::TypeContext::getRuleIndex() const {
  return PrestoParser::RuleType;
}

void PrestoParser::TypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType(this);
}

void PrestoParser::TypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType(this);
}


std::any PrestoParser::TypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitType(this);
  else
    return visitor->visitChildren(this);
}


PrestoParser::TypeContext* PrestoParser::type() {
   return type(0);
}

PrestoParser::TypeContext* PrestoParser::type(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  PrestoParser::TypeContext *_localctx = _tracker.createInstance<TypeContext>(_ctx, parentState);
  PrestoParser::TypeContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 78;
  enterRecursionRule(_localctx, 78, PrestoParser::RuleType, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(888);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(847);
      match(PrestoParser::ARRAY);
      setState(848);
      match(PrestoParser::LT);
      setState(849);
      type(0);
      setState(850);
      match(PrestoParser::GT);
      break;
    }

    case 2: {
      setState(852);
      match(PrestoParser::MAP);
      setState(853);
      match(PrestoParser::LT);
      setState(854);
      type(0);
      setState(855);
      match(PrestoParser::T__0);
      setState(856);
      type(0);
      setState(857);
      match(PrestoParser::GT);
      break;
    }

    case 3: {
      setState(859);
      match(PrestoParser::ROW);
      setState(860);
      match(PrestoParser::T__1);
      setState(861);
      identifier();
      setState(862);
      type(0);
      setState(869);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(863);
        match(PrestoParser::T__0);
        setState(864);
        identifier();
        setState(865);
        type(0);
        setState(871);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(872);
      match(PrestoParser::T__2);
      break;
    }

    case 4: {
      setState(874);
      baseType();
      setState(886);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
      case 1: {
        setState(875);
        match(PrestoParser::T__1);
        setState(876);
        typeParameter();
        setState(881);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == PrestoParser::T__0) {
          setState(877);
          match(PrestoParser::T__0);
          setState(878);
          typeParameter();
          setState(883);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(884);
        match(PrestoParser::T__2);
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(894);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<TypeContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleType);
        setState(890);

        if (!(precpred(_ctx, 5))) throw FailedPredicateException(this, "precpred(_ctx, 5)");
        setState(891);
        match(PrestoParser::ARRAY); 
      }
      setState(896);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

PrestoParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::TypeParameterContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

PrestoParser::TypeContext* PrestoParser::TypeParameterContext::type() {
  return getRuleContext<PrestoParser::TypeContext>(0);
}


size_t PrestoParser::TypeParameterContext::getRuleIndex() const {
  return PrestoParser::RuleTypeParameter;
}

void PrestoParser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void PrestoParser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}


std::any PrestoParser::TypeParameterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTypeParameter(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::TypeParameterContext* PrestoParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 80, PrestoParser::RuleTypeParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(899);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::INTEGER_VALUE: {
        enterOuterAlt(_localctx, 1);
        setState(897);
        match(PrestoParser::INTEGER_VALUE);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER:
      case PrestoParser::TIME_WITH_TIME_ZONE:
      case PrestoParser::TIMESTAMP_WITH_TIME_ZONE:
      case PrestoParser::DOUBLE_PRECISION: {
        enterOuterAlt(_localctx, 2);
        setState(898);
        type(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeContext ------------------------------------------------------------------

PrestoParser::BaseTypeContext::BaseTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::BaseTypeContext::TIME_WITH_TIME_ZONE() {
  return getToken(PrestoParser::TIME_WITH_TIME_ZONE, 0);
}

tree::TerminalNode* PrestoParser::BaseTypeContext::TIMESTAMP_WITH_TIME_ZONE() {
  return getToken(PrestoParser::TIMESTAMP_WITH_TIME_ZONE, 0);
}

tree::TerminalNode* PrestoParser::BaseTypeContext::DOUBLE_PRECISION() {
  return getToken(PrestoParser::DOUBLE_PRECISION, 0);
}

PrestoParser::IdentifierContext* PrestoParser::BaseTypeContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}


size_t PrestoParser::BaseTypeContext::getRuleIndex() const {
  return PrestoParser::RuleBaseType;
}

void PrestoParser::BaseTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseType(this);
}

void PrestoParser::BaseTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseType(this);
}


std::any PrestoParser::BaseTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBaseType(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::BaseTypeContext* PrestoParser::baseType() {
  BaseTypeContext *_localctx = _tracker.createInstance<BaseTypeContext>(_ctx, getState());
  enterRule(_localctx, 82, PrestoParser::RuleBaseType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(905);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::TIME_WITH_TIME_ZONE: {
        enterOuterAlt(_localctx, 1);
        setState(901);
        match(PrestoParser::TIME_WITH_TIME_ZONE);
        break;
      }

      case PrestoParser::TIMESTAMP_WITH_TIME_ZONE: {
        enterOuterAlt(_localctx, 2);
        setState(902);
        match(PrestoParser::TIMESTAMP_WITH_TIME_ZONE);
        break;
      }

      case PrestoParser::DOUBLE_PRECISION: {
        enterOuterAlt(_localctx, 3);
        setState(903);
        match(PrestoParser::DOUBLE_PRECISION);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 4);
        setState(904);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WhenClauseContext ------------------------------------------------------------------

PrestoParser::WhenClauseContext::WhenClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WhenClauseContext::WHEN() {
  return getToken(PrestoParser::WHEN, 0);
}

tree::TerminalNode* PrestoParser::WhenClauseContext::THEN() {
  return getToken(PrestoParser::THEN, 0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::WhenClauseContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::WhenClauseContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::WhenClauseContext::getRuleIndex() const {
  return PrestoParser::RuleWhenClause;
}

void PrestoParser::WhenClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWhenClause(this);
}

void PrestoParser::WhenClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWhenClause(this);
}


std::any PrestoParser::WhenClauseContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWhenClause(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WhenClauseContext* PrestoParser::whenClause() {
  WhenClauseContext *_localctx = _tracker.createInstance<WhenClauseContext>(_ctx, getState());
  enterRule(_localctx, 84, PrestoParser::RuleWhenClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(907);
    match(PrestoParser::WHEN);
    setState(908);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->condition = expression();
    setState(909);
    match(PrestoParser::THEN);
    setState(910);
    antlrcpp::downCast<WhenClauseContext *>(_localctx)->result = expression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FilterContext ------------------------------------------------------------------

PrestoParser::FilterContext::FilterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::FilterContext::FILTER() {
  return getToken(PrestoParser::FILTER, 0);
}

tree::TerminalNode* PrestoParser::FilterContext::WHERE() {
  return getToken(PrestoParser::WHERE, 0);
}

PrestoParser::BooleanExpressionContext* PrestoParser::FilterContext::booleanExpression() {
  return getRuleContext<PrestoParser::BooleanExpressionContext>(0);
}


size_t PrestoParser::FilterContext::getRuleIndex() const {
  return PrestoParser::RuleFilter;
}

void PrestoParser::FilterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFilter(this);
}

void PrestoParser::FilterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFilter(this);
}


std::any PrestoParser::FilterContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitFilter(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::FilterContext* PrestoParser::filter() {
  FilterContext *_localctx = _tracker.createInstance<FilterContext>(_ctx, getState());
  enterRule(_localctx, 86, PrestoParser::RuleFilter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(912);
    match(PrestoParser::FILTER);
    setState(913);
    match(PrestoParser::T__1);
    setState(914);
    match(PrestoParser::WHERE);
    setState(915);
    booleanExpression(0);
    setState(916);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OverContext ------------------------------------------------------------------

PrestoParser::OverContext::OverContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::OverContext::OVER() {
  return getToken(PrestoParser::OVER, 0);
}

tree::TerminalNode* PrestoParser::OverContext::PARTITION() {
  return getToken(PrestoParser::PARTITION, 0);
}

std::vector<tree::TerminalNode *> PrestoParser::OverContext::BY() {
  return getTokens(PrestoParser::BY);
}

tree::TerminalNode* PrestoParser::OverContext::BY(size_t i) {
  return getToken(PrestoParser::BY, i);
}

tree::TerminalNode* PrestoParser::OverContext::ORDER() {
  return getToken(PrestoParser::ORDER, 0);
}

std::vector<PrestoParser::SortItemContext *> PrestoParser::OverContext::sortItem() {
  return getRuleContexts<PrestoParser::SortItemContext>();
}

PrestoParser::SortItemContext* PrestoParser::OverContext::sortItem(size_t i) {
  return getRuleContext<PrestoParser::SortItemContext>(i);
}

PrestoParser::WindowFrameContext* PrestoParser::OverContext::windowFrame() {
  return getRuleContext<PrestoParser::WindowFrameContext>(0);
}

std::vector<PrestoParser::ExpressionContext *> PrestoParser::OverContext::expression() {
  return getRuleContexts<PrestoParser::ExpressionContext>();
}

PrestoParser::ExpressionContext* PrestoParser::OverContext::expression(size_t i) {
  return getRuleContext<PrestoParser::ExpressionContext>(i);
}


size_t PrestoParser::OverContext::getRuleIndex() const {
  return PrestoParser::RuleOver;
}

void PrestoParser::OverContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOver(this);
}

void PrestoParser::OverContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOver(this);
}


std::any PrestoParser::OverContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitOver(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::OverContext* PrestoParser::over() {
  OverContext *_localctx = _tracker.createInstance<OverContext>(_ctx, getState());
  enterRule(_localctx, 88, PrestoParser::RuleOver);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    match(PrestoParser::OVER);
    setState(919);
    match(PrestoParser::T__1);
    setState(930);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::PARTITION) {
      setState(920);
      match(PrestoParser::PARTITION);
      setState(921);
      match(PrestoParser::BY);
      setState(922);
      antlrcpp::downCast<OverContext *>(_localctx)->expressionContext = expression();
      antlrcpp::downCast<OverContext *>(_localctx)->partition.push_back(antlrcpp::downCast<OverContext *>(_localctx)->expressionContext);
      setState(927);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(923);
        match(PrestoParser::T__0);
        setState(924);
        antlrcpp::downCast<OverContext *>(_localctx)->expressionContext = expression();
        antlrcpp::downCast<OverContext *>(_localctx)->partition.push_back(antlrcpp::downCast<OverContext *>(_localctx)->expressionContext);
        setState(929);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(942);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::ORDER) {
      setState(932);
      match(PrestoParser::ORDER);
      setState(933);
      match(PrestoParser::BY);
      setState(934);
      sortItem();
      setState(939);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == PrestoParser::T__0) {
        setState(935);
        match(PrestoParser::T__0);
        setState(936);
        sortItem();
        setState(941);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
    }
    setState(945);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == PrestoParser::RANGE

    || _la == PrestoParser::ROWS) {
      setState(944);
      windowFrame();
    }
    setState(947);
    match(PrestoParser::T__2);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- WindowFrameContext ------------------------------------------------------------------

PrestoParser::WindowFrameContext::WindowFrameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::WindowFrameContext::RANGE() {
  return getToken(PrestoParser::RANGE, 0);
}

std::vector<PrestoParser::FrameBoundContext *> PrestoParser::WindowFrameContext::frameBound() {
  return getRuleContexts<PrestoParser::FrameBoundContext>();
}

PrestoParser::FrameBoundContext* PrestoParser::WindowFrameContext::frameBound(size_t i) {
  return getRuleContext<PrestoParser::FrameBoundContext>(i);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::ROWS() {
  return getToken(PrestoParser::ROWS, 0);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::BETWEEN() {
  return getToken(PrestoParser::BETWEEN, 0);
}

tree::TerminalNode* PrestoParser::WindowFrameContext::AND() {
  return getToken(PrestoParser::AND, 0);
}


size_t PrestoParser::WindowFrameContext::getRuleIndex() const {
  return PrestoParser::RuleWindowFrame;
}

void PrestoParser::WindowFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterWindowFrame(this);
}

void PrestoParser::WindowFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitWindowFrame(this);
}


std::any PrestoParser::WindowFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitWindowFrame(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::WindowFrameContext* PrestoParser::windowFrame() {
  WindowFrameContext *_localctx = _tracker.createInstance<WindowFrameContext>(_ctx, getState());
  enterRule(_localctx, 90, PrestoParser::RuleWindowFrame);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(965);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(949);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::RANGE);
      setState(950);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(951);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::ROWS);
      setState(952);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(953);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::RANGE);
      setState(954);
      match(PrestoParser::BETWEEN);
      setState(955);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(956);
      match(PrestoParser::AND);
      setState(957);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(959);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->frameType = match(PrestoParser::ROWS);
      setState(960);
      match(PrestoParser::BETWEEN);
      setState(961);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->start = frameBound();
      setState(962);
      match(PrestoParser::AND);
      setState(963);
      antlrcpp::downCast<WindowFrameContext *>(_localctx)->end = frameBound();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FrameBoundContext ------------------------------------------------------------------

PrestoParser::FrameBoundContext::FrameBoundContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::FrameBoundContext::getRuleIndex() const {
  return PrestoParser::RuleFrameBound;
}

void PrestoParser::FrameBoundContext::copyFrom(FrameBoundContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BoundedFrameContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::BoundedFrameContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

tree::TerminalNode* PrestoParser::BoundedFrameContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::BoundedFrameContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

PrestoParser::BoundedFrameContext::BoundedFrameContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::BoundedFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBoundedFrame(this);
}
void PrestoParser::BoundedFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBoundedFrame(this);
}

std::any PrestoParser::BoundedFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBoundedFrame(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnboundedFrameContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnboundedFrameContext::UNBOUNDED() {
  return getToken(PrestoParser::UNBOUNDED, 0);
}

tree::TerminalNode* PrestoParser::UnboundedFrameContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::UnboundedFrameContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

PrestoParser::UnboundedFrameContext::UnboundedFrameContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnboundedFrameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnboundedFrame(this);
}
void PrestoParser::UnboundedFrameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnboundedFrame(this);
}

std::any PrestoParser::UnboundedFrameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnboundedFrame(this);
  else
    return visitor->visitChildren(this);
}
//----------------- CurrentRowBoundContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::CurrentRowBoundContext::CURRENT() {
  return getToken(PrestoParser::CURRENT, 0);
}

tree::TerminalNode* PrestoParser::CurrentRowBoundContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

PrestoParser::CurrentRowBoundContext::CurrentRowBoundContext(FrameBoundContext *ctx) { copyFrom(ctx); }

void PrestoParser::CurrentRowBoundContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCurrentRowBound(this);
}
void PrestoParser::CurrentRowBoundContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCurrentRowBound(this);
}

std::any PrestoParser::CurrentRowBoundContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitCurrentRowBound(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::FrameBoundContext* PrestoParser::frameBound() {
  FrameBoundContext *_localctx = _tracker.createInstance<FrameBoundContext>(_ctx, getState());
  enterRule(_localctx, 92, PrestoParser::RuleFrameBound);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(976);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::UnboundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(967);
      match(PrestoParser::UNBOUNDED);
      setState(968);
      antlrcpp::downCast<UnboundedFrameContext *>(_localctx)->boundType = match(PrestoParser::PRECEDING);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::UnboundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(969);
      match(PrestoParser::UNBOUNDED);
      setState(970);
      antlrcpp::downCast<UnboundedFrameContext *>(_localctx)->boundType = match(PrestoParser::FOLLOWING);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::CurrentRowBoundContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(971);
      match(PrestoParser::CURRENT);
      setState(972);
      match(PrestoParser::ROW);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::BoundedFrameContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(973);
      expression();
      setState(974);
      antlrcpp::downCast<BoundedFrameContext *>(_localctx)->boundType = _input->LT(1);
      _la = _input->LA(1);
      if (!(_la == PrestoParser::PRECEDING

      || _la == PrestoParser::FOLLOWING)) {
        antlrcpp::downCast<BoundedFrameContext *>(_localctx)->boundType = _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplainOptionContext ------------------------------------------------------------------

PrestoParser::ExplainOptionContext::ExplainOptionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::ExplainOptionContext::getRuleIndex() const {
  return PrestoParser::RuleExplainOption;
}

void PrestoParser::ExplainOptionContext::copyFrom(ExplainOptionContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ExplainFormatContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExplainFormatContext::FORMAT() {
  return getToken(PrestoParser::FORMAT, 0);
}

tree::TerminalNode* PrestoParser::ExplainFormatContext::TEXT() {
  return getToken(PrestoParser::TEXT, 0);
}

tree::TerminalNode* PrestoParser::ExplainFormatContext::GRAPHVIZ() {
  return getToken(PrestoParser::GRAPHVIZ, 0);
}

PrestoParser::ExplainFormatContext::ExplainFormatContext(ExplainOptionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExplainFormatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplainFormat(this);
}
void PrestoParser::ExplainFormatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplainFormat(this);
}

std::any PrestoParser::ExplainFormatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExplainFormat(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ExplainTypeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ExplainTypeContext::TYPE() {
  return getToken(PrestoParser::TYPE, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::LOGICAL() {
  return getToken(PrestoParser::LOGICAL, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::DISTRIBUTED() {
  return getToken(PrestoParser::DISTRIBUTED, 0);
}

tree::TerminalNode* PrestoParser::ExplainTypeContext::VALIDATE() {
  return getToken(PrestoParser::VALIDATE, 0);
}

PrestoParser::ExplainTypeContext::ExplainTypeContext(ExplainOptionContext *ctx) { copyFrom(ctx); }

void PrestoParser::ExplainTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplainType(this);
}
void PrestoParser::ExplainTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplainType(this);
}

std::any PrestoParser::ExplainTypeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitExplainType(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::ExplainOptionContext* PrestoParser::explainOption() {
  ExplainOptionContext *_localctx = _tracker.createInstance<ExplainOptionContext>(_ctx, getState());
  enterRule(_localctx, 94, PrestoParser::RuleExplainOption);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(982);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::FORMAT: {
        _localctx = _tracker.createInstance<PrestoParser::ExplainFormatContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(978);
        match(PrestoParser::FORMAT);
        setState(979);
        antlrcpp::downCast<ExplainFormatContext *>(_localctx)->value = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::TEXT

        || _la == PrestoParser::GRAPHVIZ)) {
          antlrcpp::downCast<ExplainFormatContext *>(_localctx)->value = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      case PrestoParser::TYPE: {
        _localctx = _tracker.createInstance<PrestoParser::ExplainTypeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(980);
        match(PrestoParser::TYPE);
        setState(981);
        antlrcpp::downCast<ExplainTypeContext *>(_localctx)->value = _input->LT(1);
        _la = _input->LA(1);
        if (!(((((_la - 120) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 120)) & ((1ULL << (PrestoParser::LOGICAL - 120))
          | (1ULL << (PrestoParser::DISTRIBUTED - 120))
          | (1ULL << (PrestoParser::VALIDATE - 120)))) != 0))) {
          antlrcpp::downCast<ExplainTypeContext *>(_localctx)->value = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TransactionModeContext ------------------------------------------------------------------

PrestoParser::TransactionModeContext::TransactionModeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::TransactionModeContext::getRuleIndex() const {
  return PrestoParser::RuleTransactionMode;
}

void PrestoParser::TransactionModeContext::copyFrom(TransactionModeContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- TransactionAccessModeContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::ONLY() {
  return getToken(PrestoParser::ONLY, 0);
}

tree::TerminalNode* PrestoParser::TransactionAccessModeContext::WRITE() {
  return getToken(PrestoParser::WRITE, 0);
}

PrestoParser::TransactionAccessModeContext::TransactionAccessModeContext(TransactionModeContext *ctx) { copyFrom(ctx); }

void PrestoParser::TransactionAccessModeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTransactionAccessMode(this);
}
void PrestoParser::TransactionAccessModeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTransactionAccessMode(this);
}

std::any PrestoParser::TransactionAccessModeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitTransactionAccessMode(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IsolationLevelContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::IsolationLevelContext::ISOLATION() {
  return getToken(PrestoParser::ISOLATION, 0);
}

tree::TerminalNode* PrestoParser::IsolationLevelContext::LEVEL() {
  return getToken(PrestoParser::LEVEL, 0);
}

PrestoParser::LevelOfIsolationContext* PrestoParser::IsolationLevelContext::levelOfIsolation() {
  return getRuleContext<PrestoParser::LevelOfIsolationContext>(0);
}

PrestoParser::IsolationLevelContext::IsolationLevelContext(TransactionModeContext *ctx) { copyFrom(ctx); }

void PrestoParser::IsolationLevelContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIsolationLevel(this);
}
void PrestoParser::IsolationLevelContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIsolationLevel(this);
}

std::any PrestoParser::IsolationLevelContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIsolationLevel(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::TransactionModeContext* PrestoParser::transactionMode() {
  TransactionModeContext *_localctx = _tracker.createInstance<TransactionModeContext>(_ctx, getState());
  enterRule(_localctx, 96, PrestoParser::RuleTransactionMode);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(989);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::ISOLATION: {
        _localctx = _tracker.createInstance<PrestoParser::IsolationLevelContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(984);
        match(PrestoParser::ISOLATION);
        setState(985);
        match(PrestoParser::LEVEL);
        setState(986);
        levelOfIsolation();
        break;
      }

      case PrestoParser::READ: {
        _localctx = _tracker.createInstance<PrestoParser::TransactionAccessModeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(987);
        match(PrestoParser::READ);
        setState(988);
        antlrcpp::downCast<TransactionAccessModeContext *>(_localctx)->accessMode = _input->LT(1);
        _la = _input->LA(1);
        if (!(_la == PrestoParser::WRITE

        || _la == PrestoParser::ONLY)) {
          antlrcpp::downCast<TransactionAccessModeContext *>(_localctx)->accessMode = _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LevelOfIsolationContext ------------------------------------------------------------------

PrestoParser::LevelOfIsolationContext::LevelOfIsolationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::LevelOfIsolationContext::getRuleIndex() const {
  return PrestoParser::RuleLevelOfIsolation;
}

void PrestoParser::LevelOfIsolationContext::copyFrom(LevelOfIsolationContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- ReadUncommittedContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ReadUncommittedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::ReadUncommittedContext::UNCOMMITTED() {
  return getToken(PrestoParser::UNCOMMITTED, 0);
}

PrestoParser::ReadUncommittedContext::ReadUncommittedContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::ReadUncommittedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadUncommitted(this);
}
void PrestoParser::ReadUncommittedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadUncommitted(this);
}

std::any PrestoParser::ReadUncommittedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitReadUncommitted(this);
  else
    return visitor->visitChildren(this);
}
//----------------- SerializableContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::SerializableContext::SERIALIZABLE() {
  return getToken(PrestoParser::SERIALIZABLE, 0);
}

PrestoParser::SerializableContext::SerializableContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::SerializableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSerializable(this);
}
void PrestoParser::SerializableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSerializable(this);
}

std::any PrestoParser::SerializableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitSerializable(this);
  else
    return visitor->visitChildren(this);
}
//----------------- ReadCommittedContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::ReadCommittedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::ReadCommittedContext::COMMITTED() {
  return getToken(PrestoParser::COMMITTED, 0);
}

PrestoParser::ReadCommittedContext::ReadCommittedContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::ReadCommittedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReadCommitted(this);
}
void PrestoParser::ReadCommittedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReadCommitted(this);
}

std::any PrestoParser::ReadCommittedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitReadCommitted(this);
  else
    return visitor->visitChildren(this);
}
//----------------- RepeatableReadContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::RepeatableReadContext::REPEATABLE() {
  return getToken(PrestoParser::REPEATABLE, 0);
}

tree::TerminalNode* PrestoParser::RepeatableReadContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

PrestoParser::RepeatableReadContext::RepeatableReadContext(LevelOfIsolationContext *ctx) { copyFrom(ctx); }

void PrestoParser::RepeatableReadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRepeatableRead(this);
}
void PrestoParser::RepeatableReadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRepeatableRead(this);
}

std::any PrestoParser::RepeatableReadContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitRepeatableRead(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::LevelOfIsolationContext* PrestoParser::levelOfIsolation() {
  LevelOfIsolationContext *_localctx = _tracker.createInstance<LevelOfIsolationContext>(_ctx, getState());
  enterRule(_localctx, 98, PrestoParser::RuleLevelOfIsolation);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(998);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::ReadUncommittedContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(991);
      match(PrestoParser::READ);
      setState(992);
      match(PrestoParser::UNCOMMITTED);
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::ReadCommittedContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(993);
      match(PrestoParser::READ);
      setState(994);
      match(PrestoParser::COMMITTED);
      break;
    }

    case 3: {
      _localctx = _tracker.createInstance<PrestoParser::RepeatableReadContext>(_localctx);
      enterOuterAlt(_localctx, 3);
      setState(995);
      match(PrestoParser::REPEATABLE);
      setState(996);
      match(PrestoParser::READ);
      break;
    }

    case 4: {
      _localctx = _tracker.createInstance<PrestoParser::SerializableContext>(_localctx);
      enterOuterAlt(_localctx, 4);
      setState(997);
      match(PrestoParser::SERIALIZABLE);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CallArgumentContext ------------------------------------------------------------------

PrestoParser::CallArgumentContext::CallArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::CallArgumentContext::getRuleIndex() const {
  return PrestoParser::RuleCallArgument;
}

void PrestoParser::CallArgumentContext::copyFrom(CallArgumentContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- PositionalArgumentContext ------------------------------------------------------------------

PrestoParser::ExpressionContext* PrestoParser::PositionalArgumentContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::PositionalArgumentContext::PositionalArgumentContext(CallArgumentContext *ctx) { copyFrom(ctx); }

void PrestoParser::PositionalArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPositionalArgument(this);
}
void PrestoParser::PositionalArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPositionalArgument(this);
}

std::any PrestoParser::PositionalArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPositionalArgument(this);
  else
    return visitor->visitChildren(this);
}
//----------------- NamedArgumentContext ------------------------------------------------------------------

PrestoParser::IdentifierContext* PrestoParser::NamedArgumentContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}

PrestoParser::ExpressionContext* PrestoParser::NamedArgumentContext::expression() {
  return getRuleContext<PrestoParser::ExpressionContext>(0);
}

PrestoParser::NamedArgumentContext::NamedArgumentContext(CallArgumentContext *ctx) { copyFrom(ctx); }

void PrestoParser::NamedArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamedArgument(this);
}
void PrestoParser::NamedArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamedArgument(this);
}

std::any PrestoParser::NamedArgumentContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNamedArgument(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::CallArgumentContext* PrestoParser::callArgument() {
  CallArgumentContext *_localctx = _tracker.createInstance<CallArgumentContext>(_ctx, getState());
  enterRule(_localctx, 100, PrestoParser::RuleCallArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1005);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      _localctx = _tracker.createInstance<PrestoParser::PositionalArgumentContext>(_localctx);
      enterOuterAlt(_localctx, 1);
      setState(1000);
      expression();
      break;
    }

    case 2: {
      _localctx = _tracker.createInstance<PrestoParser::NamedArgumentContext>(_localctx);
      enterOuterAlt(_localctx, 2);
      setState(1001);
      identifier();
      setState(1002);
      match(PrestoParser::T__8);
      setState(1003);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrivilegeContext ------------------------------------------------------------------

PrestoParser::PrivilegeContext::PrivilegeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::PrivilegeContext::SELECT() {
  return getToken(PrestoParser::SELECT, 0);
}

tree::TerminalNode* PrestoParser::PrivilegeContext::DELETE() {
  return getToken(PrestoParser::DELETE, 0);
}

tree::TerminalNode* PrestoParser::PrivilegeContext::INSERT() {
  return getToken(PrestoParser::INSERT, 0);
}

PrestoParser::IdentifierContext* PrestoParser::PrivilegeContext::identifier() {
  return getRuleContext<PrestoParser::IdentifierContext>(0);
}


size_t PrestoParser::PrivilegeContext::getRuleIndex() const {
  return PrestoParser::RulePrivilege;
}

void PrestoParser::PrivilegeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrivilege(this);
}

void PrestoParser::PrivilegeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrivilege(this);
}


std::any PrestoParser::PrivilegeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitPrivilege(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::PrivilegeContext* PrestoParser::privilege() {
  PrivilegeContext *_localctx = _tracker.createInstance<PrivilegeContext>(_ctx, getState());
  enterRule(_localctx, 102, PrestoParser::RulePrivilege);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1011);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SELECT: {
        enterOuterAlt(_localctx, 1);
        setState(1007);
        match(PrestoParser::SELECT);
        break;
      }

      case PrestoParser::DELETE: {
        enterOuterAlt(_localctx, 2);
        setState(1008);
        match(PrestoParser::DELETE);
        break;
      }

      case PrestoParser::INSERT: {
        enterOuterAlt(_localctx, 3);
        setState(1009);
        match(PrestoParser::INSERT);
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE:
      case PrestoParser::IDENTIFIER:
      case PrestoParser::DIGIT_IDENTIFIER:
      case PrestoParser::QUOTED_IDENTIFIER:
      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        enterOuterAlt(_localctx, 4);
        setState(1010);
        identifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedNameContext ------------------------------------------------------------------

PrestoParser::QualifiedNameContext::QualifiedNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<PrestoParser::IdentifierContext *> PrestoParser::QualifiedNameContext::identifier() {
  return getRuleContexts<PrestoParser::IdentifierContext>();
}

PrestoParser::IdentifierContext* PrestoParser::QualifiedNameContext::identifier(size_t i) {
  return getRuleContext<PrestoParser::IdentifierContext>(i);
}


size_t PrestoParser::QualifiedNameContext::getRuleIndex() const {
  return PrestoParser::RuleQualifiedName;
}

void PrestoParser::QualifiedNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedName(this);
}

void PrestoParser::QualifiedNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedName(this);
}


std::any PrestoParser::QualifiedNameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQualifiedName(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QualifiedNameContext* PrestoParser::qualifiedName() {
  QualifiedNameContext *_localctx = _tracker.createInstance<QualifiedNameContext>(_ctx, getState());
  enterRule(_localctx, 104, PrestoParser::RuleQualifiedName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1013);
    identifier();
    setState(1018);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1014);
        match(PrestoParser::T__3);
        setState(1015);
        identifier(); 
      }
      setState(1020);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdentifierContext ------------------------------------------------------------------

PrestoParser::IdentifierContext::IdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::IdentifierContext::getRuleIndex() const {
  return PrestoParser::RuleIdentifier;
}

void PrestoParser::IdentifierContext::copyFrom(IdentifierContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- BackQuotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::BackQuotedIdentifierContext::BACKQUOTED_IDENTIFIER() {
  return getToken(PrestoParser::BACKQUOTED_IDENTIFIER, 0);
}

PrestoParser::BackQuotedIdentifierContext::BackQuotedIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::BackQuotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBackQuotedIdentifier(this);
}
void PrestoParser::BackQuotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBackQuotedIdentifier(this);
}

std::any PrestoParser::BackQuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitBackQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- QuotedIdentifierAlternativeContext ------------------------------------------------------------------

PrestoParser::QuotedIdentifierContext* PrestoParser::QuotedIdentifierAlternativeContext::quotedIdentifier() {
  return getRuleContext<PrestoParser::QuotedIdentifierContext>(0);
}

PrestoParser::QuotedIdentifierAlternativeContext::QuotedIdentifierAlternativeContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::QuotedIdentifierAlternativeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuotedIdentifierAlternative(this);
}
void PrestoParser::QuotedIdentifierAlternativeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuotedIdentifierAlternative(this);
}

std::any PrestoParser::QuotedIdentifierAlternativeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifierAlternative(this);
  else
    return visitor->visitChildren(this);
}
//----------------- DigitIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DigitIdentifierContext::DIGIT_IDENTIFIER() {
  return getToken(PrestoParser::DIGIT_IDENTIFIER, 0);
}

PrestoParser::DigitIdentifierContext::DigitIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::DigitIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDigitIdentifier(this);
}
void PrestoParser::DigitIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDigitIdentifier(this);
}

std::any PrestoParser::DigitIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDigitIdentifier(this);
  else
    return visitor->visitChildren(this);
}
//----------------- UnquotedIdentifierContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::UnquotedIdentifierContext::IDENTIFIER() {
  return getToken(PrestoParser::IDENTIFIER, 0);
}

PrestoParser::NonReservedContext* PrestoParser::UnquotedIdentifierContext::nonReserved() {
  return getRuleContext<PrestoParser::NonReservedContext>(0);
}

PrestoParser::UnquotedIdentifierContext::UnquotedIdentifierContext(IdentifierContext *ctx) { copyFrom(ctx); }

void PrestoParser::UnquotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnquotedIdentifier(this);
}
void PrestoParser::UnquotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnquotedIdentifier(this);
}

std::any PrestoParser::UnquotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitUnquotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::IdentifierContext* PrestoParser::identifier() {
  IdentifierContext *_localctx = _tracker.createInstance<IdentifierContext>(_ctx, getState());
  enterRule(_localctx, 106, PrestoParser::RuleIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1026);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1021);
        match(PrestoParser::IDENTIFIER);
        break;
      }

      case PrestoParser::QUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::QuotedIdentifierAlternativeContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1022);
        quotedIdentifier();
        break;
      }

      case PrestoParser::ADD:
      case PrestoParser::ALL:
      case PrestoParser::SOME:
      case PrestoParser::ANY:
      case PrestoParser::AT:
      case PrestoParser::NO:
      case PrestoParser::SUBSTRING:
      case PrestoParser::POSITION:
      case PrestoParser::TINYINT:
      case PrestoParser::SMALLINT:
      case PrestoParser::INTEGER:
      case PrestoParser::DATE:
      case PrestoParser::TIME:
      case PrestoParser::TIMESTAMP:
      case PrestoParser::INTERVAL:
      case PrestoParser::YEAR:
      case PrestoParser::MONTH:
      case PrestoParser::DAY:
      case PrestoParser::HOUR:
      case PrestoParser::MINUTE:
      case PrestoParser::SECOND:
      case PrestoParser::ZONE:
      case PrestoParser::FILTER:
      case PrestoParser::OVER:
      case PrestoParser::PARTITION:
      case PrestoParser::RANGE:
      case PrestoParser::ROWS:
      case PrestoParser::PRECEDING:
      case PrestoParser::FOLLOWING:
      case PrestoParser::CURRENT:
      case PrestoParser::ROW:
      case PrestoParser::SCHEMA:
      case PrestoParser::COMMENT:
      case PrestoParser::VIEW:
      case PrestoParser::REPLACE:
      case PrestoParser::GRANT:
      case PrestoParser::REVOKE:
      case PrestoParser::PRIVILEGES:
      case PrestoParser::PUBLIC:
      case PrestoParser::OPTION:
      case PrestoParser::EXPLAIN:
      case PrestoParser::ANALYZE:
      case PrestoParser::FORMAT:
      case PrestoParser::TYPE:
      case PrestoParser::TEXT:
      case PrestoParser::GRAPHVIZ:
      case PrestoParser::LOGICAL:
      case PrestoParser::DISTRIBUTED:
      case PrestoParser::VALIDATE:
      case PrestoParser::SHOW:
      case PrestoParser::TABLES:
      case PrestoParser::SCHEMAS:
      case PrestoParser::CATALOGS:
      case PrestoParser::COLUMNS:
      case PrestoParser::COLUMN:
      case PrestoParser::USE:
      case PrestoParser::PARTITIONS:
      case PrestoParser::FUNCTIONS:
      case PrestoParser::TO:
      case PrestoParser::SYSTEM:
      case PrestoParser::BERNOULLI:
      case PrestoParser::POISSONIZED:
      case PrestoParser::TABLESAMPLE:
      case PrestoParser::ARRAY:
      case PrestoParser::MAP:
      case PrestoParser::SET:
      case PrestoParser::RESET:
      case PrestoParser::SESSION:
      case PrestoParser::DATA:
      case PrestoParser::START:
      case PrestoParser::TRANSACTION:
      case PrestoParser::COMMIT:
      case PrestoParser::ROLLBACK:
      case PrestoParser::WORK:
      case PrestoParser::ISOLATION:
      case PrestoParser::LEVEL:
      case PrestoParser::SERIALIZABLE:
      case PrestoParser::REPEATABLE:
      case PrestoParser::COMMITTED:
      case PrestoParser::UNCOMMITTED:
      case PrestoParser::READ:
      case PrestoParser::WRITE:
      case PrestoParser::ONLY:
      case PrestoParser::CALL:
      case PrestoParser::INPUT:
      case PrestoParser::OUTPUT:
      case PrestoParser::CASCADE:
      case PrestoParser::RESTRICT:
      case PrestoParser::INCLUDING:
      case PrestoParser::EXCLUDING:
      case PrestoParser::PROPERTIES:
      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC:
      case PrestoParser::IF:
      case PrestoParser::NULLIF:
      case PrestoParser::COALESCE: {
        _localctx = _tracker.createInstance<PrestoParser::UnquotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 3);
        setState(1023);
        nonReserved();
        break;
      }

      case PrestoParser::BACKQUOTED_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::BackQuotedIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 4);
        setState(1024);
        match(PrestoParser::BACKQUOTED_IDENTIFIER);
        break;
      }

      case PrestoParser::DIGIT_IDENTIFIER: {
        _localctx = _tracker.createInstance<PrestoParser::DigitIdentifierContext>(_localctx);
        enterOuterAlt(_localctx, 5);
        setState(1025);
        match(PrestoParser::DIGIT_IDENTIFIER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QuotedIdentifierContext ------------------------------------------------------------------

PrestoParser::QuotedIdentifierContext::QuotedIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::QuotedIdentifierContext::QUOTED_IDENTIFIER() {
  return getToken(PrestoParser::QUOTED_IDENTIFIER, 0);
}


size_t PrestoParser::QuotedIdentifierContext::getRuleIndex() const {
  return PrestoParser::RuleQuotedIdentifier;
}

void PrestoParser::QuotedIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQuotedIdentifier(this);
}

void PrestoParser::QuotedIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQuotedIdentifier(this);
}


std::any PrestoParser::QuotedIdentifierContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitQuotedIdentifier(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::QuotedIdentifierContext* PrestoParser::quotedIdentifier() {
  QuotedIdentifierContext *_localctx = _tracker.createInstance<QuotedIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 108, PrestoParser::RuleQuotedIdentifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    match(PrestoParser::QUOTED_IDENTIFIER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumberContext ------------------------------------------------------------------

PrestoParser::NumberContext::NumberContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}


size_t PrestoParser::NumberContext::getRuleIndex() const {
  return PrestoParser::RuleNumber;
}

void PrestoParser::NumberContext::copyFrom(NumberContext *ctx) {
  ParserRuleContext::copyFrom(ctx);
}

//----------------- DecimalLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::DecimalLiteralContext::DECIMAL_VALUE() {
  return getToken(PrestoParser::DECIMAL_VALUE, 0);
}

PrestoParser::DecimalLiteralContext::DecimalLiteralContext(NumberContext *ctx) { copyFrom(ctx); }

void PrestoParser::DecimalLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecimalLiteral(this);
}
void PrestoParser::DecimalLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecimalLiteral(this);
}

std::any PrestoParser::DecimalLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitDecimalLiteral(this);
  else
    return visitor->visitChildren(this);
}
//----------------- IntegerLiteralContext ------------------------------------------------------------------

tree::TerminalNode* PrestoParser::IntegerLiteralContext::INTEGER_VALUE() {
  return getToken(PrestoParser::INTEGER_VALUE, 0);
}

PrestoParser::IntegerLiteralContext::IntegerLiteralContext(NumberContext *ctx) { copyFrom(ctx); }

void PrestoParser::IntegerLiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIntegerLiteral(this);
}
void PrestoParser::IntegerLiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIntegerLiteral(this);
}

std::any PrestoParser::IntegerLiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitIntegerLiteral(this);
  else
    return visitor->visitChildren(this);
}
PrestoParser::NumberContext* PrestoParser::number() {
  NumberContext *_localctx = _tracker.createInstance<NumberContext>(_ctx, getState());
  enterRule(_localctx, 110, PrestoParser::RuleNumber);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1032);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::DECIMAL_VALUE: {
        _localctx = _tracker.createInstance<PrestoParser::DecimalLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 1);
        setState(1030);
        match(PrestoParser::DECIMAL_VALUE);
        break;
      }

      case PrestoParser::INTEGER_VALUE: {
        _localctx = _tracker.createInstance<PrestoParser::IntegerLiteralContext>(_localctx);
        enterOuterAlt(_localctx, 2);
        setState(1031);
        match(PrestoParser::INTEGER_VALUE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NonReservedContext ------------------------------------------------------------------

PrestoParser::NonReservedContext::NonReservedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NonReservedContext::SHOW() {
  return getToken(PrestoParser::SHOW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TABLES() {
  return getToken(PrestoParser::TABLES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COLUMNS() {
  return getToken(PrestoParser::COLUMNS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COLUMN() {
  return getToken(PrestoParser::COLUMN, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PARTITIONS() {
  return getToken(PrestoParser::PARTITIONS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FUNCTIONS() {
  return getToken(PrestoParser::FUNCTIONS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SCHEMAS() {
  return getToken(PrestoParser::SCHEMAS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CATALOGS() {
  return getToken(PrestoParser::CATALOGS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SESSION() {
  return getToken(PrestoParser::SESSION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ADD() {
  return getToken(PrestoParser::ADD, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FILTER() {
  return getToken(PrestoParser::FILTER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::AT() {
  return getToken(PrestoParser::AT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OVER() {
  return getToken(PrestoParser::OVER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PARTITION() {
  return getToken(PrestoParser::PARTITION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RANGE() {
  return getToken(PrestoParser::RANGE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROWS() {
  return getToken(PrestoParser::ROWS, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PRECEDING() {
  return getToken(PrestoParser::PRECEDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FOLLOWING() {
  return getToken(PrestoParser::FOLLOWING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CURRENT() {
  return getToken(PrestoParser::CURRENT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROW() {
  return getToken(PrestoParser::ROW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MAP() {
  return getToken(PrestoParser::MAP, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ARRAY() {
  return getToken(PrestoParser::ARRAY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TINYINT() {
  return getToken(PrestoParser::TINYINT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SMALLINT() {
  return getToken(PrestoParser::SMALLINT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INTEGER() {
  return getToken(PrestoParser::INTEGER, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DATE() {
  return getToken(PrestoParser::DATE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TIME() {
  return getToken(PrestoParser::TIME, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TIMESTAMP() {
  return getToken(PrestoParser::TIMESTAMP, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INTERVAL() {
  return getToken(PrestoParser::INTERVAL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ZONE() {
  return getToken(PrestoParser::ZONE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::YEAR() {
  return getToken(PrestoParser::YEAR, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MONTH() {
  return getToken(PrestoParser::MONTH, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DAY() {
  return getToken(PrestoParser::DAY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::HOUR() {
  return getToken(PrestoParser::HOUR, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::MINUTE() {
  return getToken(PrestoParser::MINUTE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SECOND() {
  return getToken(PrestoParser::SECOND, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::EXPLAIN() {
  return getToken(PrestoParser::EXPLAIN, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ANALYZE() {
  return getToken(PrestoParser::ANALYZE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::FORMAT() {
  return getToken(PrestoParser::FORMAT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TYPE() {
  return getToken(PrestoParser::TYPE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TEXT() {
  return getToken(PrestoParser::TEXT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::GRAPHVIZ() {
  return getToken(PrestoParser::GRAPHVIZ, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::LOGICAL() {
  return getToken(PrestoParser::LOGICAL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DISTRIBUTED() {
  return getToken(PrestoParser::DISTRIBUTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::VALIDATE() {
  return getToken(PrestoParser::VALIDATE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TABLESAMPLE() {
  return getToken(PrestoParser::TABLESAMPLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SYSTEM() {
  return getToken(PrestoParser::SYSTEM, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::BERNOULLI() {
  return getToken(PrestoParser::BERNOULLI, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::POISSONIZED() {
  return getToken(PrestoParser::POISSONIZED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::USE() {
  return getToken(PrestoParser::USE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TO() {
  return getToken(PrestoParser::TO, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SET() {
  return getToken(PrestoParser::SET, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RESET() {
  return getToken(PrestoParser::RESET, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::VIEW() {
  return getToken(PrestoParser::VIEW, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REPLACE() {
  return getToken(PrestoParser::REPLACE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::IF() {
  return getToken(PrestoParser::IF, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::NULLIF() {
  return getToken(PrestoParser::NULLIF, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COALESCE() {
  return getToken(PrestoParser::COALESCE, 0);
}

PrestoParser::NormalFormContext* PrestoParser::NonReservedContext::normalForm() {
  return getRuleContext<PrestoParser::NormalFormContext>(0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::POSITION() {
  return getToken(PrestoParser::POSITION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::NO() {
  return getToken(PrestoParser::NO, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::DATA() {
  return getToken(PrestoParser::DATA, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::START() {
  return getToken(PrestoParser::START, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::TRANSACTION() {
  return getToken(PrestoParser::TRANSACTION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMIT() {
  return getToken(PrestoParser::COMMIT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ROLLBACK() {
  return getToken(PrestoParser::ROLLBACK, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::WORK() {
  return getToken(PrestoParser::WORK, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ISOLATION() {
  return getToken(PrestoParser::ISOLATION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::LEVEL() {
  return getToken(PrestoParser::LEVEL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SERIALIZABLE() {
  return getToken(PrestoParser::SERIALIZABLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REPEATABLE() {
  return getToken(PrestoParser::REPEATABLE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMITTED() {
  return getToken(PrestoParser::COMMITTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::UNCOMMITTED() {
  return getToken(PrestoParser::UNCOMMITTED, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::READ() {
  return getToken(PrestoParser::READ, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::WRITE() {
  return getToken(PrestoParser::WRITE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ONLY() {
  return getToken(PrestoParser::ONLY, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::COMMENT() {
  return getToken(PrestoParser::COMMENT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CALL() {
  return getToken(PrestoParser::CALL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::GRANT() {
  return getToken(PrestoParser::GRANT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::REVOKE() {
  return getToken(PrestoParser::REVOKE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PRIVILEGES() {
  return getToken(PrestoParser::PRIVILEGES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PUBLIC() {
  return getToken(PrestoParser::PUBLIC, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OPTION() {
  return getToken(PrestoParser::OPTION, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SUBSTRING() {
  return getToken(PrestoParser::SUBSTRING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SCHEMA() {
  return getToken(PrestoParser::SCHEMA, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::CASCADE() {
  return getToken(PrestoParser::CASCADE, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::RESTRICT() {
  return getToken(PrestoParser::RESTRICT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INPUT() {
  return getToken(PrestoParser::INPUT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::OUTPUT() {
  return getToken(PrestoParser::OUTPUT, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::INCLUDING() {
  return getToken(PrestoParser::INCLUDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::EXCLUDING() {
  return getToken(PrestoParser::EXCLUDING, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::PROPERTIES() {
  return getToken(PrestoParser::PROPERTIES, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ALL() {
  return getToken(PrestoParser::ALL, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::SOME() {
  return getToken(PrestoParser::SOME, 0);
}

tree::TerminalNode* PrestoParser::NonReservedContext::ANY() {
  return getToken(PrestoParser::ANY, 0);
}


size_t PrestoParser::NonReservedContext::getRuleIndex() const {
  return PrestoParser::RuleNonReserved;
}

void PrestoParser::NonReservedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNonReserved(this);
}

void PrestoParser::NonReservedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNonReserved(this);
}


std::any PrestoParser::NonReservedContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNonReserved(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NonReservedContext* PrestoParser::nonReserved() {
  NonReservedContext *_localctx = _tracker.createInstance<NonReservedContext>(_ctx, getState());
  enterRule(_localctx, 112, PrestoParser::RuleNonReserved);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1129);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case PrestoParser::SHOW: {
        enterOuterAlt(_localctx, 1);
        setState(1034);
        match(PrestoParser::SHOW);
        break;
      }

      case PrestoParser::TABLES: {
        enterOuterAlt(_localctx, 2);
        setState(1035);
        match(PrestoParser::TABLES);
        break;
      }

      case PrestoParser::COLUMNS: {
        enterOuterAlt(_localctx, 3);
        setState(1036);
        match(PrestoParser::COLUMNS);
        break;
      }

      case PrestoParser::COLUMN: {
        enterOuterAlt(_localctx, 4);
        setState(1037);
        match(PrestoParser::COLUMN);
        break;
      }

      case PrestoParser::PARTITIONS: {
        enterOuterAlt(_localctx, 5);
        setState(1038);
        match(PrestoParser::PARTITIONS);
        break;
      }

      case PrestoParser::FUNCTIONS: {
        enterOuterAlt(_localctx, 6);
        setState(1039);
        match(PrestoParser::FUNCTIONS);
        break;
      }

      case PrestoParser::SCHEMAS: {
        enterOuterAlt(_localctx, 7);
        setState(1040);
        match(PrestoParser::SCHEMAS);
        break;
      }

      case PrestoParser::CATALOGS: {
        enterOuterAlt(_localctx, 8);
        setState(1041);
        match(PrestoParser::CATALOGS);
        break;
      }

      case PrestoParser::SESSION: {
        enterOuterAlt(_localctx, 9);
        setState(1042);
        match(PrestoParser::SESSION);
        break;
      }

      case PrestoParser::ADD: {
        enterOuterAlt(_localctx, 10);
        setState(1043);
        match(PrestoParser::ADD);
        break;
      }

      case PrestoParser::FILTER: {
        enterOuterAlt(_localctx, 11);
        setState(1044);
        match(PrestoParser::FILTER);
        break;
      }

      case PrestoParser::AT: {
        enterOuterAlt(_localctx, 12);
        setState(1045);
        match(PrestoParser::AT);
        break;
      }

      case PrestoParser::OVER: {
        enterOuterAlt(_localctx, 13);
        setState(1046);
        match(PrestoParser::OVER);
        break;
      }

      case PrestoParser::PARTITION: {
        enterOuterAlt(_localctx, 14);
        setState(1047);
        match(PrestoParser::PARTITION);
        break;
      }

      case PrestoParser::RANGE: {
        enterOuterAlt(_localctx, 15);
        setState(1048);
        match(PrestoParser::RANGE);
        break;
      }

      case PrestoParser::ROWS: {
        enterOuterAlt(_localctx, 16);
        setState(1049);
        match(PrestoParser::ROWS);
        break;
      }

      case PrestoParser::PRECEDING: {
        enterOuterAlt(_localctx, 17);
        setState(1050);
        match(PrestoParser::PRECEDING);
        break;
      }

      case PrestoParser::FOLLOWING: {
        enterOuterAlt(_localctx, 18);
        setState(1051);
        match(PrestoParser::FOLLOWING);
        break;
      }

      case PrestoParser::CURRENT: {
        enterOuterAlt(_localctx, 19);
        setState(1052);
        match(PrestoParser::CURRENT);
        break;
      }

      case PrestoParser::ROW: {
        enterOuterAlt(_localctx, 20);
        setState(1053);
        match(PrestoParser::ROW);
        break;
      }

      case PrestoParser::MAP: {
        enterOuterAlt(_localctx, 21);
        setState(1054);
        match(PrestoParser::MAP);
        break;
      }

      case PrestoParser::ARRAY: {
        enterOuterAlt(_localctx, 22);
        setState(1055);
        match(PrestoParser::ARRAY);
        break;
      }

      case PrestoParser::TINYINT: {
        enterOuterAlt(_localctx, 23);
        setState(1056);
        match(PrestoParser::TINYINT);
        break;
      }

      case PrestoParser::SMALLINT: {
        enterOuterAlt(_localctx, 24);
        setState(1057);
        match(PrestoParser::SMALLINT);
        break;
      }

      case PrestoParser::INTEGER: {
        enterOuterAlt(_localctx, 25);
        setState(1058);
        match(PrestoParser::INTEGER);
        break;
      }

      case PrestoParser::DATE: {
        enterOuterAlt(_localctx, 26);
        setState(1059);
        match(PrestoParser::DATE);
        break;
      }

      case PrestoParser::TIME: {
        enterOuterAlt(_localctx, 27);
        setState(1060);
        match(PrestoParser::TIME);
        break;
      }

      case PrestoParser::TIMESTAMP: {
        enterOuterAlt(_localctx, 28);
        setState(1061);
        match(PrestoParser::TIMESTAMP);
        break;
      }

      case PrestoParser::INTERVAL: {
        enterOuterAlt(_localctx, 29);
        setState(1062);
        match(PrestoParser::INTERVAL);
        break;
      }

      case PrestoParser::ZONE: {
        enterOuterAlt(_localctx, 30);
        setState(1063);
        match(PrestoParser::ZONE);
        break;
      }

      case PrestoParser::YEAR: {
        enterOuterAlt(_localctx, 31);
        setState(1064);
        match(PrestoParser::YEAR);
        break;
      }

      case PrestoParser::MONTH: {
        enterOuterAlt(_localctx, 32);
        setState(1065);
        match(PrestoParser::MONTH);
        break;
      }

      case PrestoParser::DAY: {
        enterOuterAlt(_localctx, 33);
        setState(1066);
        match(PrestoParser::DAY);
        break;
      }

      case PrestoParser::HOUR: {
        enterOuterAlt(_localctx, 34);
        setState(1067);
        match(PrestoParser::HOUR);
        break;
      }

      case PrestoParser::MINUTE: {
        enterOuterAlt(_localctx, 35);
        setState(1068);
        match(PrestoParser::MINUTE);
        break;
      }

      case PrestoParser::SECOND: {
        enterOuterAlt(_localctx, 36);
        setState(1069);
        match(PrestoParser::SECOND);
        break;
      }

      case PrestoParser::EXPLAIN: {
        enterOuterAlt(_localctx, 37);
        setState(1070);
        match(PrestoParser::EXPLAIN);
        break;
      }

      case PrestoParser::ANALYZE: {
        enterOuterAlt(_localctx, 38);
        setState(1071);
        match(PrestoParser::ANALYZE);
        break;
      }

      case PrestoParser::FORMAT: {
        enterOuterAlt(_localctx, 39);
        setState(1072);
        match(PrestoParser::FORMAT);
        break;
      }

      case PrestoParser::TYPE: {
        enterOuterAlt(_localctx, 40);
        setState(1073);
        match(PrestoParser::TYPE);
        break;
      }

      case PrestoParser::TEXT: {
        enterOuterAlt(_localctx, 41);
        setState(1074);
        match(PrestoParser::TEXT);
        break;
      }

      case PrestoParser::GRAPHVIZ: {
        enterOuterAlt(_localctx, 42);
        setState(1075);
        match(PrestoParser::GRAPHVIZ);
        break;
      }

      case PrestoParser::LOGICAL: {
        enterOuterAlt(_localctx, 43);
        setState(1076);
        match(PrestoParser::LOGICAL);
        break;
      }

      case PrestoParser::DISTRIBUTED: {
        enterOuterAlt(_localctx, 44);
        setState(1077);
        match(PrestoParser::DISTRIBUTED);
        break;
      }

      case PrestoParser::VALIDATE: {
        enterOuterAlt(_localctx, 45);
        setState(1078);
        match(PrestoParser::VALIDATE);
        break;
      }

      case PrestoParser::TABLESAMPLE: {
        enterOuterAlt(_localctx, 46);
        setState(1079);
        match(PrestoParser::TABLESAMPLE);
        break;
      }

      case PrestoParser::SYSTEM: {
        enterOuterAlt(_localctx, 47);
        setState(1080);
        match(PrestoParser::SYSTEM);
        break;
      }

      case PrestoParser::BERNOULLI: {
        enterOuterAlt(_localctx, 48);
        setState(1081);
        match(PrestoParser::BERNOULLI);
        break;
      }

      case PrestoParser::POISSONIZED: {
        enterOuterAlt(_localctx, 49);
        setState(1082);
        match(PrestoParser::POISSONIZED);
        break;
      }

      case PrestoParser::USE: {
        enterOuterAlt(_localctx, 50);
        setState(1083);
        match(PrestoParser::USE);
        break;
      }

      case PrestoParser::TO: {
        enterOuterAlt(_localctx, 51);
        setState(1084);
        match(PrestoParser::TO);
        break;
      }

      case PrestoParser::SET: {
        enterOuterAlt(_localctx, 52);
        setState(1085);
        match(PrestoParser::SET);
        break;
      }

      case PrestoParser::RESET: {
        enterOuterAlt(_localctx, 53);
        setState(1086);
        match(PrestoParser::RESET);
        break;
      }

      case PrestoParser::VIEW: {
        enterOuterAlt(_localctx, 54);
        setState(1087);
        match(PrestoParser::VIEW);
        break;
      }

      case PrestoParser::REPLACE: {
        enterOuterAlt(_localctx, 55);
        setState(1088);
        match(PrestoParser::REPLACE);
        break;
      }

      case PrestoParser::IF: {
        enterOuterAlt(_localctx, 56);
        setState(1089);
        match(PrestoParser::IF);
        break;
      }

      case PrestoParser::NULLIF: {
        enterOuterAlt(_localctx, 57);
        setState(1090);
        match(PrestoParser::NULLIF);
        break;
      }

      case PrestoParser::COALESCE: {
        enterOuterAlt(_localctx, 58);
        setState(1091);
        match(PrestoParser::COALESCE);
        break;
      }

      case PrestoParser::NFD:
      case PrestoParser::NFC:
      case PrestoParser::NFKD:
      case PrestoParser::NFKC: {
        enterOuterAlt(_localctx, 59);
        setState(1092);
        normalForm();
        break;
      }

      case PrestoParser::POSITION: {
        enterOuterAlt(_localctx, 60);
        setState(1093);
        match(PrestoParser::POSITION);
        break;
      }

      case PrestoParser::NO: {
        enterOuterAlt(_localctx, 61);
        setState(1094);
        match(PrestoParser::NO);
        break;
      }

      case PrestoParser::DATA: {
        enterOuterAlt(_localctx, 62);
        setState(1095);
        match(PrestoParser::DATA);
        break;
      }

      case PrestoParser::START: {
        enterOuterAlt(_localctx, 63);
        setState(1096);
        match(PrestoParser::START);
        break;
      }

      case PrestoParser::TRANSACTION: {
        enterOuterAlt(_localctx, 64);
        setState(1097);
        match(PrestoParser::TRANSACTION);
        break;
      }

      case PrestoParser::COMMIT: {
        enterOuterAlt(_localctx, 65);
        setState(1098);
        match(PrestoParser::COMMIT);
        break;
      }

      case PrestoParser::ROLLBACK: {
        enterOuterAlt(_localctx, 66);
        setState(1099);
        match(PrestoParser::ROLLBACK);
        break;
      }

      case PrestoParser::WORK: {
        enterOuterAlt(_localctx, 67);
        setState(1100);
        match(PrestoParser::WORK);
        break;
      }

      case PrestoParser::ISOLATION: {
        enterOuterAlt(_localctx, 68);
        setState(1101);
        match(PrestoParser::ISOLATION);
        break;
      }

      case PrestoParser::LEVEL: {
        enterOuterAlt(_localctx, 69);
        setState(1102);
        match(PrestoParser::LEVEL);
        break;
      }

      case PrestoParser::SERIALIZABLE: {
        enterOuterAlt(_localctx, 70);
        setState(1103);
        match(PrestoParser::SERIALIZABLE);
        break;
      }

      case PrestoParser::REPEATABLE: {
        enterOuterAlt(_localctx, 71);
        setState(1104);
        match(PrestoParser::REPEATABLE);
        break;
      }

      case PrestoParser::COMMITTED: {
        enterOuterAlt(_localctx, 72);
        setState(1105);
        match(PrestoParser::COMMITTED);
        break;
      }

      case PrestoParser::UNCOMMITTED: {
        enterOuterAlt(_localctx, 73);
        setState(1106);
        match(PrestoParser::UNCOMMITTED);
        break;
      }

      case PrestoParser::READ: {
        enterOuterAlt(_localctx, 74);
        setState(1107);
        match(PrestoParser::READ);
        break;
      }

      case PrestoParser::WRITE: {
        enterOuterAlt(_localctx, 75);
        setState(1108);
        match(PrestoParser::WRITE);
        break;
      }

      case PrestoParser::ONLY: {
        enterOuterAlt(_localctx, 76);
        setState(1109);
        match(PrestoParser::ONLY);
        break;
      }

      case PrestoParser::COMMENT: {
        enterOuterAlt(_localctx, 77);
        setState(1110);
        match(PrestoParser::COMMENT);
        break;
      }

      case PrestoParser::CALL: {
        enterOuterAlt(_localctx, 78);
        setState(1111);
        match(PrestoParser::CALL);
        break;
      }

      case PrestoParser::GRANT: {
        enterOuterAlt(_localctx, 79);
        setState(1112);
        match(PrestoParser::GRANT);
        break;
      }

      case PrestoParser::REVOKE: {
        enterOuterAlt(_localctx, 80);
        setState(1113);
        match(PrestoParser::REVOKE);
        break;
      }

      case PrestoParser::PRIVILEGES: {
        enterOuterAlt(_localctx, 81);
        setState(1114);
        match(PrestoParser::PRIVILEGES);
        break;
      }

      case PrestoParser::PUBLIC: {
        enterOuterAlt(_localctx, 82);
        setState(1115);
        match(PrestoParser::PUBLIC);
        break;
      }

      case PrestoParser::OPTION: {
        enterOuterAlt(_localctx, 83);
        setState(1116);
        match(PrestoParser::OPTION);
        break;
      }

      case PrestoParser::SUBSTRING: {
        enterOuterAlt(_localctx, 84);
        setState(1117);
        match(PrestoParser::SUBSTRING);
        break;
      }

      case PrestoParser::SCHEMA: {
        enterOuterAlt(_localctx, 85);
        setState(1118);
        match(PrestoParser::SCHEMA);
        break;
      }

      case PrestoParser::CASCADE: {
        enterOuterAlt(_localctx, 86);
        setState(1119);
        match(PrestoParser::CASCADE);
        break;
      }

      case PrestoParser::RESTRICT: {
        enterOuterAlt(_localctx, 87);
        setState(1120);
        match(PrestoParser::RESTRICT);
        break;
      }

      case PrestoParser::INPUT: {
        enterOuterAlt(_localctx, 88);
        setState(1121);
        match(PrestoParser::INPUT);
        break;
      }

      case PrestoParser::OUTPUT: {
        enterOuterAlt(_localctx, 89);
        setState(1122);
        match(PrestoParser::OUTPUT);
        break;
      }

      case PrestoParser::INCLUDING: {
        enterOuterAlt(_localctx, 90);
        setState(1123);
        match(PrestoParser::INCLUDING);
        break;
      }

      case PrestoParser::EXCLUDING: {
        enterOuterAlt(_localctx, 91);
        setState(1124);
        match(PrestoParser::EXCLUDING);
        break;
      }

      case PrestoParser::PROPERTIES: {
        enterOuterAlt(_localctx, 92);
        setState(1125);
        match(PrestoParser::PROPERTIES);
        break;
      }

      case PrestoParser::ALL: {
        enterOuterAlt(_localctx, 93);
        setState(1126);
        match(PrestoParser::ALL);
        break;
      }

      case PrestoParser::SOME: {
        enterOuterAlt(_localctx, 94);
        setState(1127);
        match(PrestoParser::SOME);
        break;
      }

      case PrestoParser::ANY: {
        enterOuterAlt(_localctx, 95);
        setState(1128);
        match(PrestoParser::ANY);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NormalFormContext ------------------------------------------------------------------

PrestoParser::NormalFormContext::NormalFormContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFD() {
  return getToken(PrestoParser::NFD, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFC() {
  return getToken(PrestoParser::NFC, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFKD() {
  return getToken(PrestoParser::NFKD, 0);
}

tree::TerminalNode* PrestoParser::NormalFormContext::NFKC() {
  return getToken(PrestoParser::NFKC, 0);
}


size_t PrestoParser::NormalFormContext::getRuleIndex() const {
  return PrestoParser::RuleNormalForm;
}

void PrestoParser::NormalFormContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNormalForm(this);
}

void PrestoParser::NormalFormContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<PrestoListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNormalForm(this);
}


std::any PrestoParser::NormalFormContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<PrestoVisitor*>(visitor))
    return parserVisitor->visitNormalForm(this);
  else
    return visitor->visitChildren(this);
}

PrestoParser::NormalFormContext* PrestoParser::normalForm() {
  NormalFormContext *_localctx = _tracker.createInstance<NormalFormContext>(_ctx, getState());
  enterRule(_localctx, 114, PrestoParser::RuleNormalForm);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1131);
    _la = _input->LA(1);
    if (!(((((_la - 179) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 179)) & ((1ULL << (PrestoParser::NFD - 179))
      | (1ULL << (PrestoParser::NFC - 179))
      | (1ULL << (PrestoParser::NFKD - 179))
      | (1ULL << (PrestoParser::NFKC - 179)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool PrestoParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 8: return queryTermSempred(antlrcpp::downCast<QueryTermContext *>(context), predicateIndex);
    case 19: return relationSempred(antlrcpp::downCast<RelationContext *>(context), predicateIndex);
    case 28: return booleanExpressionSempred(antlrcpp::downCast<BooleanExpressionContext *>(context), predicateIndex);
    case 31: return valueExpressionSempred(antlrcpp::downCast<ValueExpressionContext *>(context), predicateIndex);
    case 32: return primaryExpressionSempred(antlrcpp::downCast<PrimaryExpressionContext *>(context), predicateIndex);
    case 39: return typeSempred(antlrcpp::downCast<TypeContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool PrestoParser::queryTermSempred(QueryTermContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return precpred(_ctx, 2);
    case 1: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool PrestoParser::relationSempred(RelationContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool PrestoParser::booleanExpressionSempred(BooleanExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 2);
    case 4: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool PrestoParser::valueExpressionSempred(ValueExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 5: return precpred(_ctx, 3);
    case 6: return precpred(_ctx, 2);
    case 7: return precpred(_ctx, 1);
    case 8: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

bool PrestoParser::primaryExpressionSempred(PrimaryExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return precpred(_ctx, 12);
    case 10: return precpred(_ctx, 10);

  default:
    break;
  }
  return true;
}

bool PrestoParser::typeSempred(TypeContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return precpred(_ctx, 5);

  default:
    break;
  }
  return true;
}

void PrestoParser::initialize() {
  std::call_once(prestoParserOnceFlag, prestoParserInitialize);
}
